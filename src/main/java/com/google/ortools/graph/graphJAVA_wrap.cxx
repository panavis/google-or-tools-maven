/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <cstdint>
#include <string>
#include <vector>

#include "ortools/base/basictypes.h"


#include <string>


#include "ortools/graph/assignment.h"
#include "ortools/graph/max_flow.h"
#include "ortools/graph/min_cost_flow.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_new_1MaxFlow(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::SimpleMaxFlow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::SimpleMaxFlow *)new operations_research::SimpleMaxFlow();
  *(operations_research::SimpleMaxFlow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1addArcWithCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::NodeIndex arg2 ;
  operations_research::NodeIndex arg3 ;
  operations_research::FlowQuantity arg4 ;
  operations_research::ArcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  arg2 = (operations_research::NodeIndex)jarg2; 
  arg3 = (operations_research::NodeIndex)jarg3; 
  arg4 = (operations_research::FlowQuantity)jarg4; 
  result = (operations_research::ArcIndex)(arg1)->AddArcWithCapacity(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1getNumNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  result = (operations_research::NodeIndex)((operations_research::SimpleMaxFlow const *)arg1)->NumNodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1getNumArcs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::ArcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  result = (operations_research::ArcIndex)((operations_research::SimpleMaxFlow const *)arg1)->NumArcs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1getTail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::NodeIndex)((operations_research::SimpleMaxFlow const *)arg1)->Tail(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1getHead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::NodeIndex)((operations_research::SimpleMaxFlow const *)arg1)->Head(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::FlowQuantity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::FlowQuantity)((operations_research::SimpleMaxFlow const *)arg1)->Capacity(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::NodeIndex arg2 ;
  operations_research::NodeIndex arg3 ;
  operations_research::SimpleMaxFlow::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  arg2 = (operations_research::NodeIndex)jarg2; 
  arg3 = (operations_research::NodeIndex)jarg3; 
  result = (operations_research::SimpleMaxFlow::Status)(arg1)->Solve(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1getOptimalFlow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::FlowQuantity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  result = (operations_research::FlowQuantity)((operations_research::SimpleMaxFlow const *)arg1)->OptimalFlow();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1getFlow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::FlowQuantity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::FlowQuantity)((operations_research::SimpleMaxFlow const *)arg1)->Flow(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_graph_mainJNI_MaxFlow_1setArcCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::FlowQuantity arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  arg3 = (operations_research::FlowQuantity)jarg3; 
  (arg1)->SetArcCapacity(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_graph_mainJNI_delete_1MaxFlow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SimpleMaxFlow *arg1 = (operations_research::SimpleMaxFlow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SimpleMaxFlow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_new_1MinCostFlowBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::MinCostFlowBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MinCostFlowBase *)new operations_research::MinCostFlowBase();
  *(operations_research::MinCostFlowBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_graph_mainJNI_delete_1MinCostFlowBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::MinCostFlowBase *arg1 = (operations_research::MinCostFlowBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::MinCostFlowBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_new_1MinCostFlow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::NodeIndex arg1 ;
  operations_research::ArcIndex arg2 ;
  operations_research::SimpleMinCostFlow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (operations_research::NodeIndex)jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::SimpleMinCostFlow *)new operations_research::SimpleMinCostFlow(arg1,arg2);
  *(operations_research::SimpleMinCostFlow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_new_1MinCostFlow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  operations_research::NodeIndex arg1 ;
  operations_research::SimpleMinCostFlow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (operations_research::NodeIndex)jarg1; 
  result = (operations_research::SimpleMinCostFlow *)new operations_research::SimpleMinCostFlow(arg1);
  *(operations_research::SimpleMinCostFlow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_new_1MinCostFlow_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::SimpleMinCostFlow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::SimpleMinCostFlow *)new operations_research::SimpleMinCostFlow();
  *(operations_research::SimpleMinCostFlow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1addArcWithCapacityAndUnitCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::NodeIndex arg2 ;
  operations_research::NodeIndex arg3 ;
  operations_research::FlowQuantity arg4 ;
  operations_research::CostValue arg5 ;
  operations_research::ArcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  arg2 = (operations_research::NodeIndex)jarg2; 
  arg3 = (operations_research::NodeIndex)jarg3; 
  arg4 = (operations_research::FlowQuantity)jarg4; 
  arg5 = (operations_research::CostValue)jarg5; 
  result = (operations_research::ArcIndex)(arg1)->AddArcWithCapacityAndUnitCost(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1setNodeSupply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::NodeIndex arg2 ;
  operations_research::FlowQuantity arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  arg2 = (operations_research::NodeIndex)jarg2; 
  arg3 = (operations_research::FlowQuantity)jarg3; 
  (arg1)->SetNodeSupply(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::MinCostFlowBase::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  result = (operations_research::MinCostFlowBase::Status)(arg1)->Solve();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1solveMaxFlowWithMinCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::MinCostFlowBase::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  result = (operations_research::MinCostFlowBase::Status)(arg1)->SolveMaxFlowWithMinCost();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getOptimalCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::CostValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  result = (operations_research::CostValue)((operations_research::SimpleMinCostFlow const *)arg1)->OptimalCost();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getMaximumFlow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::FlowQuantity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  result = (operations_research::FlowQuantity)((operations_research::SimpleMinCostFlow const *)arg1)->MaximumFlow();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getFlow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::FlowQuantity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::FlowQuantity)((operations_research::SimpleMinCostFlow const *)arg1)->Flow(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getNumNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  result = (operations_research::NodeIndex)((operations_research::SimpleMinCostFlow const *)arg1)->NumNodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getNumArcs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::ArcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  result = (operations_research::ArcIndex)((operations_research::SimpleMinCostFlow const *)arg1)->NumArcs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getTail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::NodeIndex)((operations_research::SimpleMinCostFlow const *)arg1)->Tail(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getHead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::NodeIndex)((operations_research::SimpleMinCostFlow const *)arg1)->Head(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::FlowQuantity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::FlowQuantity)((operations_research::SimpleMinCostFlow const *)arg1)->Capacity(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getSupply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::NodeIndex arg2 ;
  operations_research::FlowQuantity result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  arg2 = (operations_research::NodeIndex)jarg2; 
  result = (operations_research::FlowQuantity)((operations_research::SimpleMinCostFlow const *)arg1)->Supply(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1getUnitCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::CostValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::CostValue)((operations_research::SimpleMinCostFlow const *)arg1)->UnitCost(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_graph_mainJNI_delete_1MinCostFlow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SimpleMinCostFlow *arg1 = (operations_research::SimpleMinCostFlow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SimpleMinCostFlow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_new_1LinearSumAssignment(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::SimpleLinearSumAssignment *)new operations_research::SimpleLinearSumAssignment();
  *(operations_research::SimpleLinearSumAssignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1addArcWithCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::NodeIndex arg2 ;
  operations_research::NodeIndex arg3 ;
  operations_research::CostValue arg4 ;
  operations_research::ArcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  arg2 = (operations_research::NodeIndex)jarg2; 
  arg3 = (operations_research::NodeIndex)jarg3; 
  arg4 = (operations_research::CostValue)jarg4; 
  result = (operations_research::ArcIndex)(arg1)->AddArcWithCost(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1getNumNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  result = (operations_research::NodeIndex)((operations_research::SimpleLinearSumAssignment const *)arg1)->NumNodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1getNumArcs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::ArcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  result = (operations_research::ArcIndex)((operations_research::SimpleLinearSumAssignment const *)arg1)->NumArcs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1getLeftNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::NodeIndex)((operations_research::SimpleLinearSumAssignment const *)arg1)->LeftNode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1getRightNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::NodeIndex)((operations_research::SimpleLinearSumAssignment const *)arg1)->RightNode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1getCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::ArcIndex arg2 ;
  operations_research::CostValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  arg2 = (operations_research::ArcIndex)jarg2; 
  result = (operations_research::CostValue)((operations_research::SimpleLinearSumAssignment const *)arg1)->Cost(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::SimpleLinearSumAssignment::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  result = (operations_research::SimpleLinearSumAssignment::Status)(arg1)->Solve();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1getOptimalCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::CostValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  result = (operations_research::CostValue)((operations_research::SimpleLinearSumAssignment const *)arg1)->OptimalCost();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1getRightMate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::NodeIndex arg2 ;
  operations_research::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  arg2 = (operations_research::NodeIndex)jarg2; 
  result = (operations_research::NodeIndex)((operations_research::SimpleLinearSumAssignment const *)arg1)->RightMate(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_LinearSumAssignment_1getAssignmentCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  operations_research::NodeIndex arg2 ;
  operations_research::CostValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  arg2 = (operations_research::NodeIndex)jarg2; 
  result = (operations_research::CostValue)((operations_research::SimpleLinearSumAssignment const *)arg1)->AssignmentCost(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_graph_mainJNI_delete_1LinearSumAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SimpleLinearSumAssignment *arg1 = (operations_research::SimpleLinearSumAssignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SimpleLinearSumAssignment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_graph_mainJNI_MinCostFlow_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::MinCostFlowBase **)&baseptr = *(operations_research::SimpleMinCostFlow **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

