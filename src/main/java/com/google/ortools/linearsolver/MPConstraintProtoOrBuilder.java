// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/linear_solver/linear_solver.proto

package com.google.ortools.linearsolver;

public interface MPConstraintProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.MPConstraintProto)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * var_index[i] is the variable index (w.r.t. to "variable" field of
   * MPModelProto) of the i-th linear term involved in this constraint, and
   * coefficient[i] is its coefficient. Only the terms with non-zero
   * coefficients need to appear. var_index may not contain duplicates.
   * </pre>
   *
   * <code>repeated int32 var_index = 6 [packed = true];</code>
   * @return A list containing the varIndex.
   */
  java.util.List<java.lang.Integer> getVarIndexList();
  /**
   * <pre>
   * var_index[i] is the variable index (w.r.t. to "variable" field of
   * MPModelProto) of the i-th linear term involved in this constraint, and
   * coefficient[i] is its coefficient. Only the terms with non-zero
   * coefficients need to appear. var_index may not contain duplicates.
   * </pre>
   *
   * <code>repeated int32 var_index = 6 [packed = true];</code>
   * @return The count of varIndex.
   */
  int getVarIndexCount();
  /**
   * <pre>
   * var_index[i] is the variable index (w.r.t. to "variable" field of
   * MPModelProto) of the i-th linear term involved in this constraint, and
   * coefficient[i] is its coefficient. Only the terms with non-zero
   * coefficients need to appear. var_index may not contain duplicates.
   * </pre>
   *
   * <code>repeated int32 var_index = 6 [packed = true];</code>
   * @param index The index of the element to return.
   * @return The varIndex at the given index.
   */
  int getVarIndex(int index);

  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 7 [packed = true];</code>
   * @return A list containing the coefficient.
   */
  java.util.List<java.lang.Double> getCoefficientList();
  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 7 [packed = true];</code>
   * @return The count of coefficient.
   */
  int getCoefficientCount();
  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 7 [packed = true];</code>
   * @param index The index of the element to return.
   * @return The coefficient at the given index.
   */
  double getCoefficient(int index);

  /**
   * <pre>
   * lower_bound must be &lt;= upper_bound.
   * </pre>
   *
   * <code>optional double lower_bound = 2 [default = -inf];</code>
   * @return Whether the lowerBound field is set.
   */
  boolean hasLowerBound();
  /**
   * <pre>
   * lower_bound must be &lt;= upper_bound.
   * </pre>
   *
   * <code>optional double lower_bound = 2 [default = -inf];</code>
   * @return The lowerBound.
   */
  double getLowerBound();

  /**
   * <code>optional double upper_bound = 3 [default = inf];</code>
   * @return Whether the upperBound field is set.
   */
  boolean hasUpperBound();
  /**
   * <code>optional double upper_bound = 3 [default = inf];</code>
   * @return The upperBound.
   */
  double getUpperBound();

  /**
   * <pre>
   * The name of the constraint.
   * </pre>
   *
   * <code>optional string name = 4 [default = ""];</code>
   * @return Whether the name field is set.
   */
  boolean hasName();
  /**
   * <pre>
   * The name of the constraint.
   * </pre>
   *
   * <code>optional string name = 4 [default = ""];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the constraint.
   * </pre>
   *
   * <code>optional string name = 4 [default = ""];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * [Advanced usage: do not use this if you don't know what you're doing.]
   * A lazy constraint is handled differently by the core solving engine, but
   * it does not change the result. It may or may not impact the performance.
   * For more info see: http://tinyurl.com/lazy-constraints.
   * </pre>
   *
   * <code>optional bool is_lazy = 5 [default = false];</code>
   * @return Whether the isLazy field is set.
   */
  boolean hasIsLazy();
  /**
   * <pre>
   * [Advanced usage: do not use this if you don't know what you're doing.]
   * A lazy constraint is handled differently by the core solving engine, but
   * it does not change the result. It may or may not impact the performance.
   * For more info see: http://tinyurl.com/lazy-constraints.
   * </pre>
   *
   * <code>optional bool is_lazy = 5 [default = false];</code>
   * @return The isLazy.
   */
  boolean getIsLazy();
}
