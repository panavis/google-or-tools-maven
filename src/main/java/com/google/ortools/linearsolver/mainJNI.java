/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.linearsolver;

public class mainJNI {
  public final static native int MPSolver_CLP_LINEAR_PROGRAMMING_get();
  public final static native int MPSolver_GLPK_LINEAR_PROGRAMMING_get();
  public final static native int MPSolver_GLOP_LINEAR_PROGRAMMING_get();
  public final static native int MPSolver_SCIP_MIXED_INTEGER_PROGRAMMING_get();
  public final static native int MPSolver_GLPK_MIXED_INTEGER_PROGRAMMING_get();
  public final static native int MPSolver_CBC_MIXED_INTEGER_PROGRAMMING_get();
  public final static native int MPSolver_GUROBI_LINEAR_PROGRAMMING_get();
  public final static native int MPSolver_GUROBI_MIXED_INTEGER_PROGRAMMING_get();
  public final static native int MPSolver_CPLEX_LINEAR_PROGRAMMING_get();
  public final static native int MPSolver_CPLEX_MIXED_INTEGER_PROGRAMMING_get();
  public final static native int MPSolver_XPRESS_LINEAR_PROGRAMMING_get();
  public final static native int MPSolver_XPRESS_MIXED_INTEGER_PROGRAMMING_get();
  public final static native int MPSolver_BOP_INTEGER_PROGRAMMING_get();
  public final static native int MPSolver_SAT_INTEGER_PROGRAMMING_get();
  public final static native long new_MPSolver(String jarg1, int jarg2);
  public final static native void delete_MPSolver(long jarg1);
  public final static native long MPSolver_createSolver(String jarg1, String jarg2);
  public final static native boolean MPSolver_supportsProblemType(int jarg1);
  public final static native boolean MPSolver_parseAndCheckSupportForProblemType(String jarg1);
  public final static native boolean MPSolver_isMip(long jarg1, MPSolver jarg1_);
  public final static native void MPSolver_clear(long jarg1, MPSolver jarg1_);
  public final static native int MPSolver_numVariables(long jarg1, MPSolver jarg1_);
  public final static native MPVariable[] MPSolver_variables(long jarg1, MPSolver jarg1_);
  public final static native long MPSolver_lookupVariableOrNull(long jarg1, MPSolver jarg1_, String jarg2);
  public final static native long MPSolver_makeVar(long jarg1, MPSolver jarg1_, double jarg2, double jarg3, boolean jarg4, String jarg5);
  public final static native long MPSolver_makeNumVar(long jarg1, MPSolver jarg1_, double jarg2, double jarg3, String jarg4);
  public final static native long MPSolver_makeIntVar(long jarg1, MPSolver jarg1_, double jarg2, double jarg3, String jarg4);
  public final static native long MPSolver_makeBoolVar(long jarg1, MPSolver jarg1_, String jarg2);
  public final static native int MPSolver_numConstraints(long jarg1, MPSolver jarg1_);
  public final static native MPConstraint[] MPSolver_constraints(long jarg1, MPSolver jarg1_);
  public final static native long MPSolver_lookupConstraintOrNull(long jarg1, MPSolver jarg1_, String jarg2);
  public final static native long MPSolver_makeConstraint__SWIG_0(long jarg1, MPSolver jarg1_, double jarg2, double jarg3);
  public final static native long MPSolver_makeConstraint__SWIG_1(long jarg1, MPSolver jarg1_);
  public final static native long MPSolver_makeConstraint__SWIG_2(long jarg1, MPSolver jarg1_, double jarg2, double jarg3, String jarg4);
  public final static native long MPSolver_makeConstraint__SWIG_3(long jarg1, MPSolver jarg1_, String jarg2);
  public final static native long MPSolver_objective(long jarg1, MPSolver jarg1_);
  public final static native int MPSolver_NOT_SOLVED_get();
  public final static native int MPSolver_solve__SWIG_0(long jarg1, MPSolver jarg1_);
  public final static native int MPSolver_solve__SWIG_1(long jarg1, MPSolver jarg1_, long jarg2, MPSolverParameters jarg2_);
  public final static native double[] MPSolver_computeConstraintActivities(long jarg1, MPSolver jarg1_);
  public final static native boolean MPSolver_verifySolution(long jarg1, MPSolver jarg1_, double jarg2, boolean jarg3);
  public final static native void MPSolver_reset(long jarg1, MPSolver jarg1_);
  public final static native boolean MPSolver_interruptSolve(long jarg1, MPSolver jarg1_);
  public final static native boolean MPSolver_setSolverSpecificParametersAsString(long jarg1, MPSolver jarg1_, String jarg2);
  public final static native int MPSolver_FREE_get();
  public final static native double MPSolver_infinity();
  public final static native void MPSolver_enableOutput(long jarg1, MPSolver jarg1_);
  public final static native void MPSolver_suppressOutput(long jarg1, MPSolver jarg1_);
  public final static native long MPSolver_iterations(long jarg1, MPSolver jarg1_);
  public final static native long MPSolver_nodes(long jarg1, MPSolver jarg1_);
  public final static native double MPSolver_computeExactConditionNumber(long jarg1, MPSolver jarg1_);
  public final static native void MPSolver_setTimeLimit(long jarg1, MPSolver jarg1_, long jarg2);
  public final static native long MPSolver_wallTime(long jarg1, MPSolver jarg1_);
  public final static native void MPSolver_setGurobiLibraryPath(String jarg1);
  public final static native String MPSolver_loadModelFromProto(long jarg1, MPSolver jarg1_, byte[] jarg2);
  public final static native String MPSolver_loadModelFromProtoWithUniqueNamesOrDie(long jarg1, MPSolver jarg1_, byte[] jarg2);
  public final static native byte[] MPSolver_exportModelToProto(long jarg1, MPSolver jarg1_);
  public final static native byte[] MPSolver_createSolutionResponseProto(long jarg1, MPSolver jarg1_);
  public final static native boolean MPSolver_loadSolutionFromProto(long jarg1, MPSolver jarg1_, byte[] jarg2);
  public final static native byte[] MPSolver_solveWithProto(byte[] jarg1);
  public final static native String MPSolver_exportModelAsLpFormat__SWIG_0(long jarg1, MPSolver jarg1_, long jarg2, MPModelExportOptions jarg2_);
  public final static native String MPSolver_exportModelAsLpFormat__SWIG_1(long jarg1, MPSolver jarg1_);
  public final static native String MPSolver_exportModelAsMpsFormat__SWIG_0(long jarg1, MPSolver jarg1_, long jarg2, MPModelExportOptions jarg2_);
  public final static native String MPSolver_exportModelAsMpsFormat__SWIG_1(long jarg1, MPSolver jarg1_);
  public final static native void MPSolver_setHint(long jarg1, MPSolver jarg1_, MPVariable[] jarg2, double[] jarg3);
  public final static native boolean MPSolver_setNumThreads(long jarg1, MPSolver jarg1_, int jarg2);
  public final static native void MPObjective_clear(long jarg1, MPObjective jarg1_);
  public final static native void MPObjective_setCoefficient(long jarg1, MPObjective jarg1_, long jarg2, MPVariable jarg2_, double jarg3);
  public final static native double MPObjective_getCoefficient(long jarg1, MPObjective jarg1_, long jarg2, MPVariable jarg2_);
  public final static native void MPObjective_setOffset(long jarg1, MPObjective jarg1_, double jarg2);
  public final static native double MPObjective_offset(long jarg1, MPObjective jarg1_);
  public final static native void MPObjective_setOptimizationDirection(long jarg1, MPObjective jarg1_, boolean jarg2);
  public final static native void MPObjective_setMinimization(long jarg1, MPObjective jarg1_);
  public final static native void MPObjective_setMaximization(long jarg1, MPObjective jarg1_);
  public final static native boolean MPObjective_maximization(long jarg1, MPObjective jarg1_);
  public final static native boolean MPObjective_minimization(long jarg1, MPObjective jarg1_);
  public final static native double MPObjective_value(long jarg1, MPObjective jarg1_);
  public final static native double MPObjective_bestBound(long jarg1, MPObjective jarg1_);
  public final static native void delete_MPObjective(long jarg1);
  public final static native String MPVariable_name(long jarg1, MPVariable jarg1_);
  public final static native void MPVariable_setInteger(long jarg1, MPVariable jarg1_, boolean jarg2);
  public final static native double MPVariable_solutionValue(long jarg1, MPVariable jarg1_);
  public final static native int MPVariable_index(long jarg1, MPVariable jarg1_);
  public final static native double MPVariable_lb(long jarg1, MPVariable jarg1_);
  public final static native double MPVariable_ub(long jarg1, MPVariable jarg1_);
  public final static native void MPVariable_setLb(long jarg1, MPVariable jarg1_, double jarg2);
  public final static native void MPVariable_setUb(long jarg1, MPVariable jarg1_, double jarg2);
  public final static native void MPVariable_setBounds(long jarg1, MPVariable jarg1_, double jarg2, double jarg3);
  public final static native double MPVariable_reducedCost(long jarg1, MPVariable jarg1_);
  public final static native int MPVariable_basisStatus(long jarg1, MPVariable jarg1_);
  public final static native void delete_MPVariable(long jarg1);
  public final static native String MPConstraint_name(long jarg1, MPConstraint jarg1_);
  public final static native void MPConstraint_setCoefficient(long jarg1, MPConstraint jarg1_, long jarg2, MPVariable jarg2_, double jarg3);
  public final static native double MPConstraint_getCoefficient(long jarg1, MPConstraint jarg1_, long jarg2, MPVariable jarg2_);
  public final static native double MPConstraint_lb(long jarg1, MPConstraint jarg1_);
  public final static native double MPConstraint_ub(long jarg1, MPConstraint jarg1_);
  public final static native void MPConstraint_setLb(long jarg1, MPConstraint jarg1_, double jarg2);
  public final static native void MPConstraint_setUb(long jarg1, MPConstraint jarg1_, double jarg2);
  public final static native void MPConstraint_setBounds(long jarg1, MPConstraint jarg1_, double jarg2, double jarg3);
  public final static native boolean MPConstraint_isLazy(long jarg1, MPConstraint jarg1_);
  public final static native void MPConstraint_setIsLazy(long jarg1, MPConstraint jarg1_, boolean jarg2);
  public final static native int MPConstraint_index(long jarg1, MPConstraint jarg1_);
  public final static native double MPConstraint_dualValue(long jarg1, MPConstraint jarg1_);
  public final static native int MPConstraint_basisStatus(long jarg1, MPConstraint jarg1_);
  public final static native void delete_MPConstraint(long jarg1);
  public final static native int MPSolverParameters_RELATIVE_MIP_GAP_get();
  public final static native int MPSolverParameters_PRIMAL_TOLERANCE_get();
  public final static native int MPSolverParameters_DUAL_TOLERANCE_get();
  public final static native int MPSolverParameters_PRESOLVE_get();
  public final static native int MPSolverParameters_LP_ALGORITHM_get();
  public final static native int MPSolverParameters_INCREMENTALITY_get();
  public final static native int MPSolverParameters_SCALING_get();
  public final static native int MPSolverParameters_PRESOLVE_OFF_get();
  public final static native int MPSolverParameters_PRESOLVE_ON_get();
  public final static native int MPSolverParameters_DUAL_get();
  public final static native int MPSolverParameters_PRIMAL_get();
  public final static native int MPSolverParameters_BARRIER_get();
  public final static native int MPSolverParameters_INCREMENTALITY_OFF_get();
  public final static native int MPSolverParameters_INCREMENTALITY_ON_get();
  public final static native int MPSolverParameters_SCALING_OFF_get();
  public final static native int MPSolverParameters_SCALING_ON_get();
  public final static native double MPSolverParameters_kDefaultRelativeMipGap_get();
  public final static native double MPSolverParameters_kDefaultPrimalTolerance_get();
  public final static native double MPSolverParameters_kDefaultDualTolerance_get();
  public final static native int MPSolverParameters_kDefaultPresolve_get();
  public final static native int MPSolverParameters_kDefaultIncrementality_get();
  public final static native long new_MPSolverParameters();
  public final static native void MPSolverParameters_setDoubleParam(long jarg1, MPSolverParameters jarg1_, int jarg2, double jarg3);
  public final static native void MPSolverParameters_setIntegerParam(long jarg1, MPSolverParameters jarg1_, int jarg2, int jarg3);
  public final static native double MPSolverParameters_getDoubleParam(long jarg1, MPSolverParameters jarg1_, int jarg2);
  public final static native int MPSolverParameters_getIntegerParam(long jarg1, MPSolverParameters jarg1_, int jarg2);
  public final static native void delete_MPSolverParameters(long jarg1);
  public final static native long new_MPModelExportOptions();
  public final static native void MPModelExportOptions_Obfuscate_set(long jarg1, MPModelExportOptions jarg1_, boolean jarg2);
  public final static native boolean MPModelExportOptions_Obfuscate_get(long jarg1, MPModelExportOptions jarg1_);
  public final static native void MPModelExportOptions_LogInvalidNames_set(long jarg1, MPModelExportOptions jarg1_, boolean jarg2);
  public final static native boolean MPModelExportOptions_LogInvalidNames_get(long jarg1, MPModelExportOptions jarg1_);
  public final static native void MPModelExportOptions_ShowUnusedVariables_set(long jarg1, MPModelExportOptions jarg1_, boolean jarg2);
  public final static native boolean MPModelExportOptions_ShowUnusedVariables_get(long jarg1, MPModelExportOptions jarg1_);
  public final static native void MPModelExportOptions_MaxLineLength_set(long jarg1, MPModelExportOptions jarg1_, int jarg2);
  public final static native int MPModelExportOptions_MaxLineLength_get(long jarg1, MPModelExportOptions jarg1_);
  public final static native void delete_MPModelExportOptions(long jarg1);
}
