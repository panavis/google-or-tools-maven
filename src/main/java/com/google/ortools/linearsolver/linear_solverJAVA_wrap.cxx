/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <cstdint>
#include <string>
#include <vector>

#include "ortools/base/basictypes.h"


#include <string>


#include "ortools/base/integral_types.h"


#include "ortools/base/jniutil.h"


#include "ortools/linear_solver/linear_solver.h"
#include "ortools/linear_solver/model_exporter.h"

SWIGINTERN std::string operations_research_MPSolver_loadModelFromProto(operations_research::MPSolver *self,operations_research::MPModelProto const &input_model){
    std::string error_message;
    self->LoadModelFromProto(input_model, &error_message);
    return error_message;
  }
SWIGINTERN std::string operations_research_MPSolver_loadModelFromProtoWithUniqueNamesOrDie(operations_research::MPSolver *self,operations_research::MPModelProto const &input_model){
    std::unordered_set<std::string> names;
    for (const auto var : input_model.variable()) {
      if (!var.name().empty() && !names.insert(var.name()).second) {
        LOG(FATAL) << "found duplicated variable names " + var.name();
      }
    }
    std::string error_message;
    self->LoadModelFromProtoWithUniqueNamesOrDie(input_model, &error_message);
    return error_message;
  }
SWIGINTERN operations_research::MPModelProto operations_research_MPSolver_exportModelToProto(operations_research::MPSolver *self){
    operations_research::MPModelProto model;
    self->ExportModelToProto(&model);
    return model;
  }
SWIGINTERN operations_research::MPSolutionResponse operations_research_MPSolver_createSolutionResponseProto(operations_research::MPSolver *self){
    operations_research::MPSolutionResponse response;
    self->FillSolutionResponseProto(&response);
    return response;
  }
SWIGINTERN bool operations_research_MPSolver_loadSolutionFromProto(operations_research::MPSolver *self,operations_research::MPSolutionResponse const &response){
     return self->LoadSolutionFromProto(response).ok();
   }
SWIGINTERN operations_research::MPSolutionResponse operations_research_MPSolver_solveWithProto(operations_research::MPModelRequest const &model_request){
    operations_research::MPSolutionResponse response;
    operations_research::MPSolver::SolveWithProto(model_request, &response);
    return response;
  }
SWIGINTERN std::string operations_research_MPSolver_exportModelAsLpFormat__SWIG_0(operations_research::MPSolver *self,operations_research::MPModelExportOptions const &options=operations_research::MPModelExportOptions()){
    operations_research::MPModelProto model;
    self->ExportModelToProto(&model);
    return ExportModelAsLpFormat(model, options).value_or("");
  }
SWIGINTERN std::string operations_research_MPSolver_exportModelAsMpsFormat__SWIG_0(operations_research::MPSolver *self,operations_research::MPModelExportOptions const &options=operations_research::MPModelExportOptions()){
    operations_research::MPModelProto model;
    self->ExportModelToProto(&model);
    return ExportModelAsMpsFormat(model, options).value_or("");
  }
SWIGINTERN void operations_research_MPSolver_setHint(operations_research::MPSolver *self,std::vector< operations_research::MPVariable * > const &variables,std::vector< double > const &values){
    if (variables.size() != values.size()) {
      LOG(FATAL) << "Different number of variables and values when setting "
                 << "hint.";
    }
    std::vector<std::pair<const operations_research::MPVariable*, double> >
        hint(variables.size());
    for (int i = 0; i < variables.size(); ++i) {
      hint[i] = std::make_pair(variables[i], values[i]);
    }
    self->SetHint(hint);
  }
SWIGINTERN bool operations_research_MPSolver_setNumThreads(operations_research::MPSolver *self,int num_theads){
    return self->SetNumThreads(num_theads).ok();
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1CLP_1LINEAR_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::CLP_LINEAR_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1GLPK_1LINEAR_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::GLPK_LINEAR_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1GLOP_1LINEAR_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::GLOP_LINEAR_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1SCIP_1MIXED_1INTEGER_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::SCIP_MIXED_INTEGER_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1GLPK_1MIXED_1INTEGER_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::GLPK_MIXED_INTEGER_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1CBC_1MIXED_1INTEGER_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::CBC_MIXED_INTEGER_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1GUROBI_1LINEAR_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::GUROBI_LINEAR_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1GUROBI_1MIXED_1INTEGER_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::GUROBI_MIXED_INTEGER_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1CPLEX_1LINEAR_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::CPLEX_LINEAR_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1CPLEX_1MIXED_1INTEGER_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::CPLEX_MIXED_INTEGER_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1XPRESS_1LINEAR_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::XPRESS_LINEAR_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1XPRESS_1MIXED_1INTEGER_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::XPRESS_MIXED_INTEGER_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1BOP_1INTEGER_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::BOP_INTEGER_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1SAT_1INTEGER_1PROGRAMMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::OptimizationProblemType)operations_research::MPSolver::SAT_INTEGER_PROGRAMMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_new_1MPSolver(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  operations_research::MPSolver::OptimizationProblemType arg2 ;
  operations_research::MPSolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (operations_research::MPSolver::OptimizationProblemType)jarg2; 
  result = (operations_research::MPSolver *)new operations_research::MPSolver((std::string const &)*arg1,arg2);
  *(operations_research::MPSolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_delete_1MPSolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1createSolver(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPSolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::MPSolver *)operations_research::MPSolver::CreateSolver((std::string const &)*arg1,(std::string const &)*arg2);
  *(operations_research::MPSolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1supportsProblemType(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  operations_research::MPSolver::OptimizationProblemType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (operations_research::MPSolver::OptimizationProblemType)jarg1; 
  result = (bool)operations_research::MPSolver::SupportsProblemType(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1parseAndCheckSupportForProblemType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)operations_research::MPSolver::ParseAndCheckSupportForProblemType((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1isMip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (bool)((operations_research::MPSolver const *)arg1)->IsMIP();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1numVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (int)((operations_research::MPSolver const *)arg1)->NumVariables();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1variables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< operations_research::MPVariable * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (std::vector< operations_research::MPVariable * > *) &((operations_research::MPSolver const *)arg1)->variables();
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/linearsolver" "/""MPVariable";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::MPVariable **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1lookupVariableOrNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::MPVariable *)((operations_research::MPSolver const *)arg1)->LookupVariableOrNull((std::string const &)*arg2);
  *(operations_research::MPVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1makeVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (operations_research::MPVariable *)(arg1)->MakeVar(arg2,arg3,arg4,(std::string const &)*arg5);
  *(operations_research::MPVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1makeNumVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (operations_research::MPVariable *)(arg1)->MakeNumVar(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::MPVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1makeIntVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (operations_research::MPVariable *)(arg1)->MakeIntVar(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::MPVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1makeBoolVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::MPVariable *)(arg1)->MakeBoolVar((std::string const &)*arg2);
  *(operations_research::MPVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1numConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (int)((operations_research::MPSolver const *)arg1)->NumConstraints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1constraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< operations_research::MPConstraint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (std::vector< operations_research::MPConstraint * > *) &((operations_research::MPSolver const *)arg1)->constraints();
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/linearsolver" "/""MPConstraint";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::MPConstraint **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1lookupConstraintOrNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::MPConstraint *)((operations_research::MPSolver const *)arg1)->LookupConstraintOrNull((std::string const &)*arg2);
  *(operations_research::MPConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1makeConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  operations_research::MPConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint(arg2,arg3);
  *(operations_research::MPConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1makeConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint();
  *(operations_research::MPConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1makeConstraint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::MPConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1makeConstraint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint((std::string const &)*arg2);
  *(operations_research::MPConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1objective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (operations_research::MPObjective *)(arg1)->MutableObjective();
  *(operations_research::MPObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1NOT_1SOLVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::ResultStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::ResultStatus)operations_research::MPSolver::NOT_SOLVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPSolver::ResultStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (operations_research::MPSolver::ResultStatus)(arg1)->Solve();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPSolverParameters *arg2 = 0 ;
  operations_research::MPSolver::ResultStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = *(operations_research::MPSolverParameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::MPSolverParameters const & reference is null");
    return 0;
  } 
  result = (operations_research::MPSolver::ResultStatus)(arg1)->Solve((operations_research::MPSolverParameters const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1computeConstraintActivities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = ((operations_research::MPSolver const *)arg1)->ComputeConstraintActivities();
  
  const std::vector<double>& vec = result;
  jresult = jenv->NewDoubleArray(vec.size());
  jenv->SetDoubleArrayRegion(jresult, 0, vec.size(), reinterpret_cast<const jdouble*>(vec.data()));
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1verifySolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)((operations_research::MPSolver const *)arg1)->VerifySolution(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1interruptSolve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (bool)(arg1)->InterruptSolve();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1setSolverSpecificParametersAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->SetSolverSpecificParametersAsString((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1FREE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolver::BasisStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolver::BasisStatus)operations_research::MPSolver::FREE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1infinity(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)operations_research::MPSolver::infinity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1enableOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  (arg1)->EnableOutput();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1suppressOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  (arg1)->SuppressOutput();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1iterations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (int64)((operations_research::MPSolver const *)arg1)->iterations();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (int64)((operations_research::MPSolver const *)arg1)->nodes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1computeExactConditionNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (double)((operations_research::MPSolver const *)arg1)->ComputeExactConditionNumber();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1setTimeLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->set_time_limit(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1wallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = (int64)((operations_research::MPSolver const *)arg1)->wall_time();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1setGurobiLibraryPath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  operations_research::MPSolver::SetGurobiLibraryPath((std::string const &)*arg1);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1loadModelFromProto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jstring jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPModelProto *arg2 = 0 ;
  operations_research::MPModelProto temp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::MPModelProto protocol message.");
    }
    arg2 = &temp2;
  }
  result = operations_research_MPSolver_loadModelFromProto(arg1,(operations_research::MPModelProto const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1loadModelFromProtoWithUniqueNamesOrDie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jstring jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPModelProto *arg2 = 0 ;
  operations_research::MPModelProto temp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::MPModelProto protocol message.");
    }
    arg2 = &temp2;
  }
  result = operations_research_MPSolver_loadModelFromProtoWithUniqueNamesOrDie(arg1,(operations_research::MPModelProto const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1exportModelToProto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPModelProto result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = operations_research_MPSolver_exportModelToProto(arg1);
  {
    const long size = (&result)->ByteSizeLong();
    std::unique_ptr<char[]> buf(new char[size]);
    (&result)->SerializeWithCachedSizesToArray(reinterpret_cast<uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), size);
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1createSolutionResponseProto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPSolutionResponse result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = operations_research_MPSolver_createSolutionResponseProto(arg1);
  {
    const long size = (&result)->ByteSizeLong();
    std::unique_ptr<char[]> buf(new char[size]);
    (&result)->SerializeWithCachedSizesToArray(reinterpret_cast<uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), size);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1loadSolutionFromProto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jboolean jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPSolutionResponse *arg2 = 0 ;
  operations_research::MPSolutionResponse temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::MPSolutionResponse protocol message.");
    }
    arg2 = &temp2;
  }
  result = (bool)operations_research_MPSolver_loadSolutionFromProto(arg1,(operations_research::MPSolutionResponse const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1solveWithProto(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jbyteArray jresult = 0 ;
  operations_research::MPModelRequest *arg1 = 0 ;
  operations_research::MPModelRequest temp1 ;
  operations_research::MPSolutionResponse result;
  
  (void)jenv;
  (void)jcls;
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg1, &proto_size));
    bool parsed_ok = temp1.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::MPModelRequest protocol message.");
    }
    arg1 = &temp1;
  }
  result = operations_research_MPSolver_solveWithProto((operations_research::MPModelRequest const &)*arg1);
  {
    const long size = (&result)->ByteSizeLong();
    std::unique_ptr<char[]> buf(new char[size]);
    (&result)->SerializeWithCachedSizesToArray(reinterpret_cast<uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), size);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1exportModelAsLpFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPModelExportOptions *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = *(operations_research::MPModelExportOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::MPModelExportOptions const & reference is null");
    return 0;
  } 
  result = operations_research_MPSolver_exportModelAsLpFormat__SWIG_0(arg1,(operations_research::MPModelExportOptions const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1exportModelAsLpFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = operations_research_MPSolver_exportModelAsLpFormat__SWIG_0(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1exportModelAsMpsFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPModelExportOptions *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = *(operations_research::MPModelExportOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::MPModelExportOptions const & reference is null");
    return 0;
  } 
  result = operations_research_MPSolver_exportModelAsMpsFormat__SWIG_0(arg1,(operations_research::MPModelExportOptions const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1exportModelAsMpsFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  result = operations_research_MPSolver_exportModelAsMpsFormat__SWIG_0(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1setHint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jdoubleArray jarg3) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< operations_research::MPVariable * > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< operations_research::MPVariable * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/linearsolver" "/""MPVariable";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::MPVariable*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<double>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jdouble *values = jenv->GetDoubleArrayElements((jdoubleArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseDoubleArrayElements((jdoubleArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  operations_research_MPSolver_setHint(arg1,(std::vector< operations_research::MPVariable * > const &)*arg2,(std::vector< double > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolver_1setNumThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolver **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)operations_research_MPSolver_setNumThreads(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1setCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) (operations_research::MPVariable *)0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  arg2 = *(operations_research::MPVariable **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetCoefficient((operations_research::MPVariable const *)arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1getCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) (operations_research::MPVariable *)0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  arg2 = *(operations_research::MPVariable **)&jarg2; 
  result = (double)((operations_research::MPObjective const *)arg1)->GetCoefficient((operations_research::MPVariable const *)arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1setOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetOffset(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  result = (double)((operations_research::MPObjective const *)arg1)->offset();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1setOptimizationDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOptimizationDirection(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1setMinimization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  (arg1)->SetMinimization();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1setMaximization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  (arg1)->SetMaximization();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1maximization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  result = (bool)((operations_research::MPObjective const *)arg1)->maximization();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1minimization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  result = (bool)((operations_research::MPObjective const *)arg1)->minimization();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  result = (double)((operations_research::MPObjective const *)arg1)->Value();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPObjective_1bestBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  result = (double)((operations_research::MPObjective const *)arg1)->BestBound();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_delete_1MPObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::MPObjective **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  result = (std::string *) &((operations_research::MPVariable const *)arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1setInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInteger(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1solutionValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  result = (double)((operations_research::MPVariable const *)arg1)->solution_value();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  result = (int)((operations_research::MPVariable const *)arg1)->index();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1lb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  result = (double)((operations_research::MPVariable const *)arg1)->lb();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1ub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  result = (double)((operations_research::MPVariable const *)arg1)->ub();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1setLb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetLB(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1setUb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetUB(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1setBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetBounds(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1reducedCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  result = (double)((operations_research::MPVariable const *)arg1)->reduced_cost();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPVariable_1basisStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  operations_research::MPSolver::BasisStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  result = (operations_research::MPSolver::BasisStatus)((operations_research::MPVariable const *)arg1)->basis_status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_delete_1MPVariable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::MPVariable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  result = (std::string *) &((operations_research::MPConstraint const *)arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1setCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) (operations_research::MPVariable *)0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  arg2 = *(operations_research::MPVariable **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetCoefficient((operations_research::MPVariable const *)arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1getCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) (operations_research::MPVariable *)0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  arg2 = *(operations_research::MPVariable **)&jarg2; 
  result = (double)((operations_research::MPConstraint const *)arg1)->GetCoefficient((operations_research::MPVariable const *)arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1lb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  result = (double)((operations_research::MPConstraint const *)arg1)->lb();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1ub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  result = (double)((operations_research::MPConstraint const *)arg1)->ub();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1setLb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetLB(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1setUb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetUB(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1setBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetBounds(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1isLazy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  result = (bool)((operations_research::MPConstraint const *)arg1)->is_lazy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1setIsLazy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_is_lazy(arg2);
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  result = (int)((operations_research::MPConstraint const *)arg1)->index();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1dualValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  result = (double)((operations_research::MPConstraint const *)arg1)->dual_value();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPConstraint_1basisStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPSolver::BasisStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  result = (operations_research::MPSolver::BasisStatus)((operations_research::MPConstraint const *)arg1)->basis_status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_delete_1MPConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::MPConstraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1RELATIVE_1MIP_1GAP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::DoubleParam result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::DoubleParam)operations_research::MPSolverParameters::RELATIVE_MIP_GAP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1PRIMAL_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::DoubleParam result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::DoubleParam)operations_research::MPSolverParameters::PRIMAL_TOLERANCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1DUAL_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::DoubleParam result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::DoubleParam)operations_research::MPSolverParameters::DUAL_TOLERANCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1PRESOLVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::IntegerParam result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::IntegerParam)operations_research::MPSolverParameters::PRESOLVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1LP_1ALGORITHM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::IntegerParam result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::IntegerParam)operations_research::MPSolverParameters::LP_ALGORITHM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1INCREMENTALITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::IntegerParam result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::IntegerParam)operations_research::MPSolverParameters::INCREMENTALITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1SCALING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::IntegerParam result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::IntegerParam)operations_research::MPSolverParameters::SCALING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1PRESOLVE_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::PresolveValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::PresolveValues)operations_research::MPSolverParameters::PRESOLVE_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1PRESOLVE_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::PresolveValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::PresolveValues)operations_research::MPSolverParameters::PRESOLVE_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1DUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::LpAlgorithmValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::LpAlgorithmValues)operations_research::MPSolverParameters::DUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1PRIMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::LpAlgorithmValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::LpAlgorithmValues)operations_research::MPSolverParameters::PRIMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1BARRIER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::LpAlgorithmValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::LpAlgorithmValues)operations_research::MPSolverParameters::BARRIER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1INCREMENTALITY_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::IncrementalityValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::IncrementalityValues)operations_research::MPSolverParameters::INCREMENTALITY_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1INCREMENTALITY_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::IncrementalityValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::IncrementalityValues)operations_research::MPSolverParameters::INCREMENTALITY_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1SCALING_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::ScalingValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::ScalingValues)operations_research::MPSolverParameters::SCALING_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1SCALING_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::ScalingValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::ScalingValues)operations_research::MPSolverParameters::SCALING_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1kDefaultRelativeMipGap_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)operations_research::MPSolverParameters::kDefaultRelativeMipGap;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1kDefaultPrimalTolerance_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)operations_research::MPSolverParameters::kDefaultPrimalTolerance;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1kDefaultDualTolerance_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)operations_research::MPSolverParameters::kDefaultDualTolerance;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1kDefaultPresolve_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::PresolveValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::PresolveValues)(operations_research::MPSolverParameters::PresolveValues)operations_research::MPSolverParameters::kDefaultPresolve;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1kDefaultIncrementality_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters::IncrementalityValues result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters::IncrementalityValues)(operations_research::MPSolverParameters::IncrementalityValues)operations_research::MPSolverParameters::kDefaultIncrementality;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_new_1MPSolverParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::MPSolverParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPSolverParameters *)new operations_research::MPSolverParameters();
  *(operations_research::MPSolverParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1setDoubleParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::DoubleParam arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolverParameters **)&jarg1; 
  arg2 = (operations_research::MPSolverParameters::DoubleParam)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetDoubleParam(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1setIntegerParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::IntegerParam arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolverParameters **)&jarg1; 
  arg2 = (operations_research::MPSolverParameters::IntegerParam)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetIntegerParam(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1getDoubleParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::DoubleParam arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolverParameters **)&jarg1; 
  arg2 = (operations_research::MPSolverParameters::DoubleParam)jarg2; 
  result = (double)((operations_research::MPSolverParameters const *)arg1)->GetDoubleParam(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPSolverParameters_1getIntegerParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::IntegerParam arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPSolverParameters **)&jarg1; 
  arg2 = (operations_research::MPSolverParameters::IntegerParam)jarg2; 
  result = (int)((operations_research::MPSolverParameters const *)arg1)->GetIntegerParam(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_delete_1MPSolverParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::MPSolverParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_linearsolver_mainJNI_new_1MPModelExportOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::MPModelExportOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::MPModelExportOptions *)new operations_research::MPModelExportOptions();
  *(operations_research::MPModelExportOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPModelExportOptions_1Obfuscate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->obfuscate = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPModelExportOptions_1Obfuscate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  result = (bool) ((arg1)->obfuscate);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPModelExportOptions_1LogInvalidNames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->log_invalid_names = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPModelExportOptions_1LogInvalidNames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  result = (bool) ((arg1)->log_invalid_names);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPModelExportOptions_1ShowUnusedVariables_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show_unused_variables = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPModelExportOptions_1ShowUnusedVariables_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  result = (bool) ((arg1)->show_unused_variables);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPModelExportOptions_1MaxLineLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_line_length = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_linearsolver_mainJNI_MPModelExportOptions_1MaxLineLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  result = (int) ((arg1)->max_line_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_linearsolver_mainJNI_delete_1MPModelExportOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::MPModelExportOptions *arg1 = (operations_research::MPModelExportOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::MPModelExportOptions **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

