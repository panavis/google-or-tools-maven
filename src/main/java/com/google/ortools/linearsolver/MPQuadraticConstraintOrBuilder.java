// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/linear_solver/linear_solver.proto

package com.google.ortools.linearsolver;

public interface MPQuadraticConstraintOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.MPQuadraticConstraint)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Sparse representation of linear terms in the quadratic constraint, where
   * term i is var_index[i] * coefficient[i].
   * `var_index` are variable indices w.r.t the "variable" field in
   * MPModelProto, and should be unique.
   * </pre>
   *
   * <code>repeated int32 var_index = 1;</code>
   * @return A list containing the varIndex.
   */
  java.util.List<java.lang.Integer> getVarIndexList();
  /**
   * <pre>
   * Sparse representation of linear terms in the quadratic constraint, where
   * term i is var_index[i] * coefficient[i].
   * `var_index` are variable indices w.r.t the "variable" field in
   * MPModelProto, and should be unique.
   * </pre>
   *
   * <code>repeated int32 var_index = 1;</code>
   * @return The count of varIndex.
   */
  int getVarIndexCount();
  /**
   * <pre>
   * Sparse representation of linear terms in the quadratic constraint, where
   * term i is var_index[i] * coefficient[i].
   * `var_index` are variable indices w.r.t the "variable" field in
   * MPModelProto, and should be unique.
   * </pre>
   *
   * <code>repeated int32 var_index = 1;</code>
   * @param index The index of the element to return.
   * @return The varIndex at the given index.
   */
  int getVarIndex(int index);

  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 2;</code>
   * @return A list containing the coefficient.
   */
  java.util.List<java.lang.Double> getCoefficientList();
  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 2;</code>
   * @return The count of coefficient.
   */
  int getCoefficientCount();
  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 2;</code>
   * @param index The index of the element to return.
   * @return The coefficient at the given index.
   */
  double getCoefficient(int index);

  /**
   * <pre>
   * Sparse representation of quadratic terms in the quadratic constraint, where
   * term i is qvar1_index[i] * qvar2_index[i] * qcoefficient[i].
   * `qvar1_index` and `qvar2_index` are variable indices w.r.t the "variable"
   * field in MPModelProto.
   * `qvar1_index`, `qvar2_index` and `coefficients` must have the same size.
   * If the same unordered pair (qvar1_index, qvar2_index) appears several
   * times, the sum of all of the associated coefficients will be applied.
   * </pre>
   *
   * <code>repeated int32 qvar1_index = 3;</code>
   * @return A list containing the qvar1Index.
   */
  java.util.List<java.lang.Integer> getQvar1IndexList();
  /**
   * <pre>
   * Sparse representation of quadratic terms in the quadratic constraint, where
   * term i is qvar1_index[i] * qvar2_index[i] * qcoefficient[i].
   * `qvar1_index` and `qvar2_index` are variable indices w.r.t the "variable"
   * field in MPModelProto.
   * `qvar1_index`, `qvar2_index` and `coefficients` must have the same size.
   * If the same unordered pair (qvar1_index, qvar2_index) appears several
   * times, the sum of all of the associated coefficients will be applied.
   * </pre>
   *
   * <code>repeated int32 qvar1_index = 3;</code>
   * @return The count of qvar1Index.
   */
  int getQvar1IndexCount();
  /**
   * <pre>
   * Sparse representation of quadratic terms in the quadratic constraint, where
   * term i is qvar1_index[i] * qvar2_index[i] * qcoefficient[i].
   * `qvar1_index` and `qvar2_index` are variable indices w.r.t the "variable"
   * field in MPModelProto.
   * `qvar1_index`, `qvar2_index` and `coefficients` must have the same size.
   * If the same unordered pair (qvar1_index, qvar2_index) appears several
   * times, the sum of all of the associated coefficients will be applied.
   * </pre>
   *
   * <code>repeated int32 qvar1_index = 3;</code>
   * @param index The index of the element to return.
   * @return The qvar1Index at the given index.
   */
  int getQvar1Index(int index);

  /**
   * <code>repeated int32 qvar2_index = 4;</code>
   * @return A list containing the qvar2Index.
   */
  java.util.List<java.lang.Integer> getQvar2IndexList();
  /**
   * <code>repeated int32 qvar2_index = 4;</code>
   * @return The count of qvar2Index.
   */
  int getQvar2IndexCount();
  /**
   * <code>repeated int32 qvar2_index = 4;</code>
   * @param index The index of the element to return.
   * @return The qvar2Index at the given index.
   */
  int getQvar2Index(int index);

  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double qcoefficient = 5;</code>
   * @return A list containing the qcoefficient.
   */
  java.util.List<java.lang.Double> getQcoefficientList();
  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double qcoefficient = 5;</code>
   * @return The count of qcoefficient.
   */
  int getQcoefficientCount();
  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double qcoefficient = 5;</code>
   * @param index The index of the element to return.
   * @return The qcoefficient at the given index.
   */
  double getQcoefficient(int index);

  /**
   * <pre>
   * lower_bound must be &lt;= upper_bound.
   * </pre>
   *
   * <code>optional double lower_bound = 6 [default = -inf];</code>
   * @return Whether the lowerBound field is set.
   */
  boolean hasLowerBound();
  /**
   * <pre>
   * lower_bound must be &lt;= upper_bound.
   * </pre>
   *
   * <code>optional double lower_bound = 6 [default = -inf];</code>
   * @return The lowerBound.
   */
  double getLowerBound();

  /**
   * <code>optional double upper_bound = 7 [default = inf];</code>
   * @return Whether the upperBound field is set.
   */
  boolean hasUpperBound();
  /**
   * <code>optional double upper_bound = 7 [default = inf];</code>
   * @return The upperBound.
   */
  double getUpperBound();
}
