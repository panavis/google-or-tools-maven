// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/linear_solver/linear_solver.proto

package com.google.ortools.linearsolver;

public interface MPQuadraticObjectiveOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.MPQuadraticObjective)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Sparse representation of quadratic terms in the objective function, where
   * term i is qvar1_index[i] * qvar2_index[i] * coefficient[i].
   * `qvar1_index` and `qvar2_index` are variable indices w.r.t the "variable"
   * field in MPModelProto.
   * `qvar1_index`, `qvar2_index` and `coefficients` must have the same size.
   * If the same unordered pair (qvar1_index, qvar2_index) appears several
   * times, the sum of all of the associated coefficients will be applied.
   * </pre>
   *
   * <code>repeated int32 qvar1_index = 1;</code>
   * @return A list containing the qvar1Index.
   */
  java.util.List<java.lang.Integer> getQvar1IndexList();
  /**
   * <pre>
   * Sparse representation of quadratic terms in the objective function, where
   * term i is qvar1_index[i] * qvar2_index[i] * coefficient[i].
   * `qvar1_index` and `qvar2_index` are variable indices w.r.t the "variable"
   * field in MPModelProto.
   * `qvar1_index`, `qvar2_index` and `coefficients` must have the same size.
   * If the same unordered pair (qvar1_index, qvar2_index) appears several
   * times, the sum of all of the associated coefficients will be applied.
   * </pre>
   *
   * <code>repeated int32 qvar1_index = 1;</code>
   * @return The count of qvar1Index.
   */
  int getQvar1IndexCount();
  /**
   * <pre>
   * Sparse representation of quadratic terms in the objective function, where
   * term i is qvar1_index[i] * qvar2_index[i] * coefficient[i].
   * `qvar1_index` and `qvar2_index` are variable indices w.r.t the "variable"
   * field in MPModelProto.
   * `qvar1_index`, `qvar2_index` and `coefficients` must have the same size.
   * If the same unordered pair (qvar1_index, qvar2_index) appears several
   * times, the sum of all of the associated coefficients will be applied.
   * </pre>
   *
   * <code>repeated int32 qvar1_index = 1;</code>
   * @param index The index of the element to return.
   * @return The qvar1Index at the given index.
   */
  int getQvar1Index(int index);

  /**
   * <code>repeated int32 qvar2_index = 2;</code>
   * @return A list containing the qvar2Index.
   */
  java.util.List<java.lang.Integer> getQvar2IndexList();
  /**
   * <code>repeated int32 qvar2_index = 2;</code>
   * @return The count of qvar2Index.
   */
  int getQvar2IndexCount();
  /**
   * <code>repeated int32 qvar2_index = 2;</code>
   * @param index The index of the element to return.
   * @return The qvar2Index at the given index.
   */
  int getQvar2Index(int index);

  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 3;</code>
   * @return A list containing the coefficient.
   */
  java.util.List<java.lang.Double> getCoefficientList();
  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 3;</code>
   * @return The count of coefficient.
   */
  int getCoefficientCount();
  /**
   * <pre>
   * Must be finite.
   * </pre>
   *
   * <code>repeated double coefficient = 3;</code>
   * @param index The index of the element to return.
   * @return The coefficient at the given index.
   */
  double getCoefficient(int index);
}
