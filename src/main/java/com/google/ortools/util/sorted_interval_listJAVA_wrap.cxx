/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <cstdint>
#include <string>
#include <vector>

#include "ortools/base/basictypes.h"


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <string>


#include <vector>
#include "ortools/base/integral_types.h"


#include <vector>
#include "ortools/base/integral_types.h"
#include "ortools/util/sorted_interval_list.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_new_1Domain_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::Domain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Domain *)new operations_research::Domain();
  *(operations_research::Domain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_new_1Domain_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int64 arg1 ;
  operations_research::Domain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64)jarg1; 
  result = (operations_research::Domain *)new operations_research::Domain(arg1);
  *(operations_research::Domain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_new_1Domain_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64 arg1 ;
  int64 arg2 ;
  operations_research::Domain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64)jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::Domain *)new operations_research::Domain(arg1,arg2);
  *(operations_research::Domain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1allValues(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  result = operations_research::Domain::AllValues();
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1fromValues(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlong jresult = 0 ;
  std::vector< int64 > arg1 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  
  if(jarg1) {
    const int size = jenv->GetArrayLength(jarg1);
    (&arg1)->clear();
    (&arg1)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg1, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg1)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg1, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = operations_research::Domain::FromValues(arg1);
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1fromIntervals(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< int64 > > *arg1 = 0 ;
  std::vector< std::vector< int64 > > result1 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  
  if(jarg1) {
    const int size = jenv->GetArrayLength(jarg1);
    result1.clear();
    result1.resize(size);
    for (int index1 = 0; index1 < size; ++index1) {
      jlongArray inner_array =
      (jlongArray)jenv->GetObjectArrayElement(jarg1, index1);
      const int inner_size = jenv->GetArrayLength(inner_array);
      result1[index1].reserve(inner_size);
      jlong * const values =
      jenv->GetLongArrayElements((jlongArray)inner_array, NULL);
      for (int index2 = 0; index2 < inner_size; ++index2) {
        result1[index1].emplace_back(values[index2]);
      }
      jenv->ReleaseLongArrayElements((jlongArray)inner_array, values, JNI_ABORT);
      jenv->DeleteLocalRef(inner_array);
    }
    arg1 = &result1;
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = operations_research::Domain::FromVectorIntervals((std::vector< std::vector< long > > const &)*arg1);
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1fromFlatIntervals(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlong jresult = 0 ;
  std::vector< int64 > *arg1 = 0 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  
  if(jarg1) {
    arg1 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg1);
    arg1->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg1, NULL);
    for (int i = 0; i < size; ++i) {
      arg1->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg1, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = operations_research::Domain::FromFlatIntervals((std::vector< long > const &)*arg1);
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_com_google_ortools_util_mainJNI_Domain_1flattenedIntervals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  std::vector< int64 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  result = ((operations_research::Domain const *)arg1)->FlattenedIntervals();
  
  const std::vector<int64>& vec = result;
  jresult = jenv->NewLongArray(vec.size());
  jenv->SetLongArrayRegion(jresult, 0, vec.size(), reinterpret_cast<const jlong*>(vec.data()));
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_util_mainJNI_Domain_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  result = (bool)((operations_research::Domain const *)arg1)->IsEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  result = (int64)((operations_research::Domain const *)arg1)->Size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  result = (int64)((operations_research::Domain const *)arg1)->Min();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  result = (int64)((operations_research::Domain const *)arg1)->Max();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_util_mainJNI_Domain_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::Domain const *)arg1)->Contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1complement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  result = ((operations_research::Domain const *)arg1)->Complement();
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1negation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  result = ((operations_research::Domain const *)arg1)->Negation();
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1intersectionWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  operations_research::Domain *arg2 = 0 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  arg2 = *(operations_research::Domain **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Domain const & reference is null");
    return 0;
  } 
  result = ((operations_research::Domain const *)arg1)->IntersectionWith((operations_research::Domain const &)*arg2);
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1unionWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  operations_research::Domain *arg2 = 0 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  arg2 = *(operations_research::Domain **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Domain const & reference is null");
    return 0;
  } 
  result = ((operations_research::Domain const *)arg1)->UnionWith((operations_research::Domain const &)*arg2);
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_Domain_1additionWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  operations_research::Domain *arg2 = 0 ;
  operations_research::Domain result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  arg2 = *(operations_research::Domain **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Domain const & reference is null");
    return 0;
  } 
  result = ((operations_research::Domain const *)arg1)->AdditionWith((operations_research::Domain const &)*arg2);
  *(operations_research::Domain **)&jresult = new operations_research::Domain((const operations_research::Domain &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_util_mainJNI_Domain_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Domain **)&jarg1; 
  result = ((operations_research::Domain const *)arg1)->ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_util_mainJNI_delete_1Domain(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Domain *arg1 = (operations_research::Domain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Domain **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_new_1SortedDisjointIntervalList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::SortedDisjointIntervalList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::SortedDisjointIntervalList *)new operations_research::SortedDisjointIntervalList();
  *(operations_research::SortedDisjointIntervalList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_new_1SortedDisjointIntervalList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jlong jresult = 0 ;
  std::vector< int64 > *arg1 = 0 ;
  std::vector< int64 > *arg2 = 0 ;
  operations_research::SortedDisjointIntervalList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if(jarg1) {
    arg1 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg1);
    arg1->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg1, NULL);
    for (int i = 0; i < size; ++i) {
      arg1->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg1, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::SortedDisjointIntervalList *)new operations_research::SortedDisjointIntervalList((std::vector< int64 > const &)*arg1,(std::vector< int64 > const &)*arg2);
  *(operations_research::SortedDisjointIntervalList **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_new_1SortedDisjointIntervalList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jintArray jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *arg2 = 0 ;
  operations_research::SortedDisjointIntervalList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if(jarg1) {
    arg1 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg1);
    arg1->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg1, NULL);
    for (int i = 0; i < size; ++i) {
      arg1->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg1, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::SortedDisjointIntervalList *)new operations_research::SortedDisjointIntervalList((std::vector< int > const &)*arg1,(std::vector< int > const &)*arg2);
  *(operations_research::SortedDisjointIntervalList **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_SortedDisjointIntervalList_1buildComplementOnInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::SortedDisjointIntervalList *arg1 = (operations_research::SortedDisjointIntervalList *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  operations_research::SortedDisjointIntervalList result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SortedDisjointIntervalList **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  result = (arg1)->BuildComplementOnInterval(arg2,arg3);
  *(operations_research::SortedDisjointIntervalList **)&jresult = new operations_research::SortedDisjointIntervalList((const operations_research::SortedDisjointIntervalList &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_util_mainJNI_SortedDisjointIntervalList_1insertInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::SortedDisjointIntervalList *arg1 = (operations_research::SortedDisjointIntervalList *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  SwigValueWrapper< std::set< operations_research::ClosedInterval,operations_research::SortedDisjointIntervalList::IntervalComparator >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SortedDisjointIntervalList **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  result = (arg1)->InsertInterval(arg2,arg3);
  *(operations_research::SortedDisjointIntervalList::Iterator **)&jresult = new operations_research::SortedDisjointIntervalList::Iterator((const operations_research::SortedDisjointIntervalList::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_util_mainJNI_SortedDisjointIntervalList_1insertIntervals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlongArray jarg3) {
  operations_research::SortedDisjointIntervalList *arg1 = (operations_research::SortedDisjointIntervalList *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SortedDisjointIntervalList **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->InsertIntervals((std::vector< int64 > const &)*arg2,(std::vector< int64 > const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_util_mainJNI_SortedDisjointIntervalList_1insertIntervals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  operations_research::SortedDisjointIntervalList *arg1 = (operations_research::SortedDisjointIntervalList *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SortedDisjointIntervalList **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->InsertIntervals((std::vector< int > const &)*arg2,(std::vector< int > const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_util_mainJNI_SortedDisjointIntervalList_1numIntervals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SortedDisjointIntervalList *arg1 = (operations_research::SortedDisjointIntervalList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SortedDisjointIntervalList **)&jarg1; 
  result = (int)((operations_research::SortedDisjointIntervalList const *)arg1)->NumIntervals();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_util_mainJNI_SortedDisjointIntervalList_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::SortedDisjointIntervalList *arg1 = (operations_research::SortedDisjointIntervalList *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SortedDisjointIntervalList **)&jarg1; 
  result = ((operations_research::SortedDisjointIntervalList const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_util_mainJNI_delete_1SortedDisjointIntervalList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SortedDisjointIntervalList *arg1 = (operations_research::SortedDisjointIntervalList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SortedDisjointIntervalList **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

