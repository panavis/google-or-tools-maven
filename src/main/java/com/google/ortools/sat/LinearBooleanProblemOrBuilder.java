// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/boolean_problem.proto

package com.google.ortools.sat;

public interface LinearBooleanProblemOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.sat.LinearBooleanProblem)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the problem.
   * </pre>
   *
   * <code>optional string name = 1 [default = ""];</code>
   * @return Whether the name field is set.
   */
  boolean hasName();
  /**
   * <pre>
   * The name of the problem.
   * </pre>
   *
   * <code>optional string name = 1 [default = ""];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the problem.
   * </pre>
   *
   * <code>optional string name = 1 [default = ""];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The number of variables in the problem.
   * All the signed representation of the problem literals must be in
   * [-num_variables, num_variables], excluding 0.
   * </pre>
   *
   * <code>optional int32 num_variables = 3;</code>
   * @return Whether the numVariables field is set.
   */
  boolean hasNumVariables();
  /**
   * <pre>
   * The number of variables in the problem.
   * All the signed representation of the problem literals must be in
   * [-num_variables, num_variables], excluding 0.
   * </pre>
   *
   * <code>optional int32 num_variables = 3;</code>
   * @return The numVariables.
   */
  int getNumVariables();

  /**
   * <pre>
   * The constraints of the problem.
   * </pre>
   *
   * <code>repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;</code>
   */
  java.util.List<com.google.ortools.sat.LinearBooleanConstraint> 
      getConstraintsList();
  /**
   * <pre>
   * The constraints of the problem.
   * </pre>
   *
   * <code>repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;</code>
   */
  com.google.ortools.sat.LinearBooleanConstraint getConstraints(int index);
  /**
   * <pre>
   * The constraints of the problem.
   * </pre>
   *
   * <code>repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;</code>
   */
  int getConstraintsCount();
  /**
   * <pre>
   * The constraints of the problem.
   * </pre>
   *
   * <code>repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;</code>
   */
  java.util.List<? extends com.google.ortools.sat.LinearBooleanConstraintOrBuilder> 
      getConstraintsOrBuilderList();
  /**
   * <pre>
   * The constraints of the problem.
   * </pre>
   *
   * <code>repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;</code>
   */
  com.google.ortools.sat.LinearBooleanConstraintOrBuilder getConstraintsOrBuilder(
      int index);

  /**
   * <pre>
   * The objective of the problem.
   * If left empty, we just have a satisfiability problem.
   * </pre>
   *
   * <code>optional .operations_research.sat.LinearObjective objective = 5;</code>
   * @return Whether the objective field is set.
   */
  boolean hasObjective();
  /**
   * <pre>
   * The objective of the problem.
   * If left empty, we just have a satisfiability problem.
   * </pre>
   *
   * <code>optional .operations_research.sat.LinearObjective objective = 5;</code>
   * @return The objective.
   */
  com.google.ortools.sat.LinearObjective getObjective();
  /**
   * <pre>
   * The objective of the problem.
   * If left empty, we just have a satisfiability problem.
   * </pre>
   *
   * <code>optional .operations_research.sat.LinearObjective objective = 5;</code>
   */
  com.google.ortools.sat.LinearObjectiveOrBuilder getObjectiveOrBuilder();

  /**
   * <pre>
   * The names of the problem variables. The variables index are 0-based and
   * var_names[i] will be the name of the i-th variable which correspond to
   * literals +(i + 1) or -(i + 1). This is optional and can be left empty.
   * </pre>
   *
   * <code>repeated string var_names = 6;</code>
   * @return A list containing the varNames.
   */
  java.util.List<java.lang.String>
      getVarNamesList();
  /**
   * <pre>
   * The names of the problem variables. The variables index are 0-based and
   * var_names[i] will be the name of the i-th variable which correspond to
   * literals +(i + 1) or -(i + 1). This is optional and can be left empty.
   * </pre>
   *
   * <code>repeated string var_names = 6;</code>
   * @return The count of varNames.
   */
  int getVarNamesCount();
  /**
   * <pre>
   * The names of the problem variables. The variables index are 0-based and
   * var_names[i] will be the name of the i-th variable which correspond to
   * literals +(i + 1) or -(i + 1). This is optional and can be left empty.
   * </pre>
   *
   * <code>repeated string var_names = 6;</code>
   * @param index The index of the element to return.
   * @return The varNames at the given index.
   */
  java.lang.String getVarNames(int index);
  /**
   * <pre>
   * The names of the problem variables. The variables index are 0-based and
   * var_names[i] will be the name of the i-th variable which correspond to
   * literals +(i + 1) or -(i + 1). This is optional and can be left empty.
   * </pre>
   *
   * <code>repeated string var_names = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the varNames at the given index.
   */
  com.google.protobuf.ByteString
      getVarNamesBytes(int index);

  /**
   * <pre>
   * Stores an assignement of the problem variables. That may be an initial
   * feasible solution, just a partial assignement or the optimal solution.
   * </pre>
   *
   * <code>optional .operations_research.sat.BooleanAssignment assignment = 7;</code>
   * @return Whether the assignment field is set.
   */
  boolean hasAssignment();
  /**
   * <pre>
   * Stores an assignement of the problem variables. That may be an initial
   * feasible solution, just a partial assignement or the optimal solution.
   * </pre>
   *
   * <code>optional .operations_research.sat.BooleanAssignment assignment = 7;</code>
   * @return The assignment.
   */
  com.google.ortools.sat.BooleanAssignment getAssignment();
  /**
   * <pre>
   * Stores an assignement of the problem variables. That may be an initial
   * feasible solution, just a partial assignement or the optimal solution.
   * </pre>
   *
   * <code>optional .operations_research.sat.BooleanAssignment assignment = 7;</code>
   */
  com.google.ortools.sat.BooleanAssignmentOrBuilder getAssignmentOrBuilder();

  /**
   * <pre>
   * Hack: When converting a wcnf formulat to a LinearBooleanProblem, extra
   * variables need to be created. This stores the number of variables in the
   * original problem (which are in one to one correspondence with the first
   * variables of this problem).
   * </pre>
   *
   * <code>optional int32 original_num_variables = 8;</code>
   * @return Whether the originalNumVariables field is set.
   */
  boolean hasOriginalNumVariables();
  /**
   * <pre>
   * Hack: When converting a wcnf formulat to a LinearBooleanProblem, extra
   * variables need to be created. This stores the number of variables in the
   * original problem (which are in one to one correspondence with the first
   * variables of this problem).
   * </pre>
   *
   * <code>optional int32 original_num_variables = 8;</code>
   * @return The originalNumVariables.
   */
  int getOriginalNumVariables();
}
