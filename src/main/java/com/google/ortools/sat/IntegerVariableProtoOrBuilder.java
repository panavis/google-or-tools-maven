// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/cp_model.proto

package com.google.ortools.sat;

public interface IntegerVariableProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.sat.IntegerVariableProto)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * For debug/logging only. Can be empty.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * For debug/logging only. Can be empty.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The variable domain given as a sorted list of n disjoint intervals
   * [min, max] and encoded as [min_0, max_0,  ..., min_{n-1}, max_{n-1}].
   * The most common example being just [min, max].
   * If min == max, then this is a constant variable.
   * We have:
   *  - domain_size() is always even.
   *  - min == domain.front();
   *  - max == domain.back();
   *  - for all i &lt; n   :      min_i &lt;= max_i
   *  - for all i &lt; n-1 :  max_i + 1 &lt; min_{i+1}.
   * Note that we check at validation that a variable domain is small enough so
   * that we don't run into integer overflow in our algorithms. Because of that,
   * you cannot just have "unbounded" variable like [0, kint64max] and should
   * try to specify tighter domains.
   * </pre>
   *
   * <code>repeated int64 domain = 2;</code>
   * @return A list containing the domain.
   */
  java.util.List<java.lang.Long> getDomainList();
  /**
   * <pre>
   * The variable domain given as a sorted list of n disjoint intervals
   * [min, max] and encoded as [min_0, max_0,  ..., min_{n-1}, max_{n-1}].
   * The most common example being just [min, max].
   * If min == max, then this is a constant variable.
   * We have:
   *  - domain_size() is always even.
   *  - min == domain.front();
   *  - max == domain.back();
   *  - for all i &lt; n   :      min_i &lt;= max_i
   *  - for all i &lt; n-1 :  max_i + 1 &lt; min_{i+1}.
   * Note that we check at validation that a variable domain is small enough so
   * that we don't run into integer overflow in our algorithms. Because of that,
   * you cannot just have "unbounded" variable like [0, kint64max] and should
   * try to specify tighter domains.
   * </pre>
   *
   * <code>repeated int64 domain = 2;</code>
   * @return The count of domain.
   */
  int getDomainCount();
  /**
   * <pre>
   * The variable domain given as a sorted list of n disjoint intervals
   * [min, max] and encoded as [min_0, max_0,  ..., min_{n-1}, max_{n-1}].
   * The most common example being just [min, max].
   * If min == max, then this is a constant variable.
   * We have:
   *  - domain_size() is always even.
   *  - min == domain.front();
   *  - max == domain.back();
   *  - for all i &lt; n   :      min_i &lt;= max_i
   *  - for all i &lt; n-1 :  max_i + 1 &lt; min_{i+1}.
   * Note that we check at validation that a variable domain is small enough so
   * that we don't run into integer overflow in our algorithms. Because of that,
   * you cannot just have "unbounded" variable like [0, kint64max] and should
   * try to specify tighter domains.
   * </pre>
   *
   * <code>repeated int64 domain = 2;</code>
   * @param index The index of the element to return.
   * @return The domain at the given index.
   */
  long getDomain(int index);
}
