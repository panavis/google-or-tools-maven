// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/cp_model.proto

package com.google.ortools.sat;

public interface ReservoirConstraintProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.sat.ReservoirConstraintProto)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>int64 min_level = 1;</code>
   * @return The minLevel.
   */
  long getMinLevel();

  /**
   * <code>int64 max_level = 2;</code>
   * @return The maxLevel.
   */
  long getMaxLevel();

  /**
   * <pre>
   * variables.
   * </pre>
   *
   * <code>repeated int32 times = 3;</code>
   * @return A list containing the times.
   */
  java.util.List<java.lang.Integer> getTimesList();
  /**
   * <pre>
   * variables.
   * </pre>
   *
   * <code>repeated int32 times = 3;</code>
   * @return The count of times.
   */
  int getTimesCount();
  /**
   * <pre>
   * variables.
   * </pre>
   *
   * <code>repeated int32 times = 3;</code>
   * @param index The index of the element to return.
   * @return The times at the given index.
   */
  int getTimes(int index);

  /**
   * <pre>
   * constants, can be negative.
   * </pre>
   *
   * <code>repeated int64 demands = 4;</code>
   * @return A list containing the demands.
   */
  java.util.List<java.lang.Long> getDemandsList();
  /**
   * <pre>
   * constants, can be negative.
   * </pre>
   *
   * <code>repeated int64 demands = 4;</code>
   * @return The count of demands.
   */
  int getDemandsCount();
  /**
   * <pre>
   * constants, can be negative.
   * </pre>
   *
   * <code>repeated int64 demands = 4;</code>
   * @param index The index of the element to return.
   * @return The demands at the given index.
   */
  long getDemands(int index);

  /**
   * <pre>
   * literals.
   * </pre>
   *
   * <code>repeated int32 actives = 5;</code>
   * @return A list containing the actives.
   */
  java.util.List<java.lang.Integer> getActivesList();
  /**
   * <pre>
   * literals.
   * </pre>
   *
   * <code>repeated int32 actives = 5;</code>
   * @return The count of actives.
   */
  int getActivesCount();
  /**
   * <pre>
   * literals.
   * </pre>
   *
   * <code>repeated int32 actives = 5;</code>
   * @param index The index of the element to return.
   * @return The actives at the given index.
   */
  int getActives(int index);
}
