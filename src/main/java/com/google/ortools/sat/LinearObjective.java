// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/boolean_problem.proto

package com.google.ortools.sat;

/**
 * <pre>
 * The objective of an optimization problem.
 * </pre>
 *
 * Protobuf type {@code operations_research.sat.LinearObjective}
 */
public final class LinearObjective extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:operations_research.sat.LinearObjective)
    LinearObjectiveOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LinearObjective.newBuilder() to construct.
  private LinearObjective(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LinearObjective() {
    literals_ = emptyIntList();
    coefficients_ = emptyLongList();
    scalingFactor_ = 1D;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LinearObjective();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LinearObjective(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              literals_ = newIntList();
              mutable_bitField0_ |= 0x00000001;
            }
            literals_.addInt(input.readInt32());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
              literals_ = newIntList();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              literals_.addInt(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 16: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              coefficients_ = newLongList();
              mutable_bitField0_ |= 0x00000002;
            }
            coefficients_.addLong(input.readInt64());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
              coefficients_ = newLongList();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              coefficients_.addLong(input.readInt64());
            }
            input.popLimit(limit);
            break;
          }
          case 25: {
            bitField0_ |= 0x00000001;
            offset_ = input.readDouble();
            break;
          }
          case 33: {
            bitField0_ |= 0x00000002;
            scalingFactor_ = input.readDouble();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        literals_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        coefficients_.makeImmutable(); // C
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.ortools.sat.BooleanProblem.internal_static_operations_research_sat_LinearObjective_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.ortools.sat.BooleanProblem.internal_static_operations_research_sat_LinearObjective_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.ortools.sat.LinearObjective.class, com.google.ortools.sat.LinearObjective.Builder.class);
  }

  private int bitField0_;
  public static final int LITERALS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.IntList literals_;
  /**
   * <pre>
   * The goal is always to minimize the linear Boolean formula defined by these
   * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
   * literal_i is true in a given assignment.
   * Note that the same variable shouldn't appear twice and that zero
   * coefficients are not allowed.
   * </pre>
   *
   * <code>repeated int32 literals = 1;</code>
   * @return A list containing the literals.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getLiteralsList() {
    return literals_;
  }
  /**
   * <pre>
   * The goal is always to minimize the linear Boolean formula defined by these
   * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
   * literal_i is true in a given assignment.
   * Note that the same variable shouldn't appear twice and that zero
   * coefficients are not allowed.
   * </pre>
   *
   * <code>repeated int32 literals = 1;</code>
   * @return The count of literals.
   */
  public int getLiteralsCount() {
    return literals_.size();
  }
  /**
   * <pre>
   * The goal is always to minimize the linear Boolean formula defined by these
   * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
   * literal_i is true in a given assignment.
   * Note that the same variable shouldn't appear twice and that zero
   * coefficients are not allowed.
   * </pre>
   *
   * <code>repeated int32 literals = 1;</code>
   * @param index The index of the element to return.
   * @return The literals at the given index.
   */
  public int getLiterals(int index) {
    return literals_.getInt(index);
  }

  public static final int COEFFICIENTS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.LongList coefficients_;
  /**
   * <code>repeated int64 coefficients = 2;</code>
   * @return A list containing the coefficients.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getCoefficientsList() {
    return coefficients_;
  }
  /**
   * <code>repeated int64 coefficients = 2;</code>
   * @return The count of coefficients.
   */
  public int getCoefficientsCount() {
    return coefficients_.size();
  }
  /**
   * <code>repeated int64 coefficients = 2;</code>
   * @param index The index of the element to return.
   * @return The coefficients at the given index.
   */
  public long getCoefficients(int index) {
    return coefficients_.getLong(index);
  }

  public static final int OFFSET_FIELD_NUMBER = 3;
  private double offset_;
  /**
   * <pre>
   * For a given variable assignment, the "real" problem objective value is
   * 'scaling_factor * (minimization_objective + offset)' where
   * 'minimization_objective is the one defined just above.
   * Note that this is not what we minimize, but it is what we display.
   * In particular if scaling_factor is negative, then the "real" problem is
   * a maximization problem, even if the "internal" objective is minimized.
   * </pre>
   *
   * <code>optional double offset = 3 [default = 0];</code>
   * @return Whether the offset field is set.
   */
  @java.lang.Override
  public boolean hasOffset() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * For a given variable assignment, the "real" problem objective value is
   * 'scaling_factor * (minimization_objective + offset)' where
   * 'minimization_objective is the one defined just above.
   * Note that this is not what we minimize, but it is what we display.
   * In particular if scaling_factor is negative, then the "real" problem is
   * a maximization problem, even if the "internal" objective is minimized.
   * </pre>
   *
   * <code>optional double offset = 3 [default = 0];</code>
   * @return The offset.
   */
  @java.lang.Override
  public double getOffset() {
    return offset_;
  }

  public static final int SCALING_FACTOR_FIELD_NUMBER = 4;
  private double scalingFactor_;
  /**
   * <code>optional double scaling_factor = 4 [default = 1];</code>
   * @return Whether the scalingFactor field is set.
   */
  @java.lang.Override
  public boolean hasScalingFactor() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>optional double scaling_factor = 4 [default = 1];</code>
   * @return The scalingFactor.
   */
  @java.lang.Override
  public double getScalingFactor() {
    return scalingFactor_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < literals_.size(); i++) {
      output.writeInt32(1, literals_.getInt(i));
    }
    for (int i = 0; i < coefficients_.size(); i++) {
      output.writeInt64(2, coefficients_.getLong(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeDouble(3, offset_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeDouble(4, scalingFactor_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < literals_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(literals_.getInt(i));
      }
      size += dataSize;
      size += 1 * getLiteralsList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < coefficients_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt64SizeNoTag(coefficients_.getLong(i));
      }
      size += dataSize;
      size += 1 * getCoefficientsList().size();
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, offset_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(4, scalingFactor_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.ortools.sat.LinearObjective)) {
      return super.equals(obj);
    }
    com.google.ortools.sat.LinearObjective other = (com.google.ortools.sat.LinearObjective) obj;

    if (!getLiteralsList()
        .equals(other.getLiteralsList())) return false;
    if (!getCoefficientsList()
        .equals(other.getCoefficientsList())) return false;
    if (hasOffset() != other.hasOffset()) return false;
    if (hasOffset()) {
      if (java.lang.Double.doubleToLongBits(getOffset())
          != java.lang.Double.doubleToLongBits(
              other.getOffset())) return false;
    }
    if (hasScalingFactor() != other.hasScalingFactor()) return false;
    if (hasScalingFactor()) {
      if (java.lang.Double.doubleToLongBits(getScalingFactor())
          != java.lang.Double.doubleToLongBits(
              other.getScalingFactor())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getLiteralsCount() > 0) {
      hash = (37 * hash) + LITERALS_FIELD_NUMBER;
      hash = (53 * hash) + getLiteralsList().hashCode();
    }
    if (getCoefficientsCount() > 0) {
      hash = (37 * hash) + COEFFICIENTS_FIELD_NUMBER;
      hash = (53 * hash) + getCoefficientsList().hashCode();
    }
    if (hasOffset()) {
      hash = (37 * hash) + OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getOffset()));
    }
    if (hasScalingFactor()) {
      hash = (37 * hash) + SCALING_FACTOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getScalingFactor()));
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.ortools.sat.LinearObjective parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ortools.sat.LinearObjective parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.ortools.sat.LinearObjective parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.ortools.sat.LinearObjective parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.ortools.sat.LinearObjective prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The objective of an optimization problem.
   * </pre>
   *
   * Protobuf type {@code operations_research.sat.LinearObjective}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:operations_research.sat.LinearObjective)
      com.google.ortools.sat.LinearObjectiveOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.ortools.sat.BooleanProblem.internal_static_operations_research_sat_LinearObjective_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.ortools.sat.BooleanProblem.internal_static_operations_research_sat_LinearObjective_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.ortools.sat.LinearObjective.class, com.google.ortools.sat.LinearObjective.Builder.class);
    }

    // Construct using com.google.ortools.sat.LinearObjective.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      literals_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000001);
      coefficients_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000002);
      offset_ = 0D;
      bitField0_ = (bitField0_ & ~0x00000004);
      scalingFactor_ = 1D;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.ortools.sat.BooleanProblem.internal_static_operations_research_sat_LinearObjective_descriptor;
    }

    @java.lang.Override
    public com.google.ortools.sat.LinearObjective getDefaultInstanceForType() {
      return com.google.ortools.sat.LinearObjective.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.ortools.sat.LinearObjective build() {
      com.google.ortools.sat.LinearObjective result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.ortools.sat.LinearObjective buildPartial() {
      com.google.ortools.sat.LinearObjective result = new com.google.ortools.sat.LinearObjective(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        literals_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.literals_ = literals_;
      if (((bitField0_ & 0x00000002) != 0)) {
        coefficients_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.coefficients_ = coefficients_;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.offset_ = offset_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        to_bitField0_ |= 0x00000002;
      }
      result.scalingFactor_ = scalingFactor_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.ortools.sat.LinearObjective) {
        return mergeFrom((com.google.ortools.sat.LinearObjective)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.ortools.sat.LinearObjective other) {
      if (other == com.google.ortools.sat.LinearObjective.getDefaultInstance()) return this;
      if (!other.literals_.isEmpty()) {
        if (literals_.isEmpty()) {
          literals_ = other.literals_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureLiteralsIsMutable();
          literals_.addAll(other.literals_);
        }
        onChanged();
      }
      if (!other.coefficients_.isEmpty()) {
        if (coefficients_.isEmpty()) {
          coefficients_ = other.coefficients_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureCoefficientsIsMutable();
          coefficients_.addAll(other.coefficients_);
        }
        onChanged();
      }
      if (other.hasOffset()) {
        setOffset(other.getOffset());
      }
      if (other.hasScalingFactor()) {
        setScalingFactor(other.getScalingFactor());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.ortools.sat.LinearObjective parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.ortools.sat.LinearObjective) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.IntList literals_ = emptyIntList();
    private void ensureLiteralsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        literals_ = mutableCopy(literals_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * The goal is always to minimize the linear Boolean formula defined by these
     * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
     * literal_i is true in a given assignment.
     * Note that the same variable shouldn't appear twice and that zero
     * coefficients are not allowed.
     * </pre>
     *
     * <code>repeated int32 literals = 1;</code>
     * @return A list containing the literals.
     */
    public java.util.List<java.lang.Integer>
        getLiteralsList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(literals_) : literals_;
    }
    /**
     * <pre>
     * The goal is always to minimize the linear Boolean formula defined by these
     * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
     * literal_i is true in a given assignment.
     * Note that the same variable shouldn't appear twice and that zero
     * coefficients are not allowed.
     * </pre>
     *
     * <code>repeated int32 literals = 1;</code>
     * @return The count of literals.
     */
    public int getLiteralsCount() {
      return literals_.size();
    }
    /**
     * <pre>
     * The goal is always to minimize the linear Boolean formula defined by these
     * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
     * literal_i is true in a given assignment.
     * Note that the same variable shouldn't appear twice and that zero
     * coefficients are not allowed.
     * </pre>
     *
     * <code>repeated int32 literals = 1;</code>
     * @param index The index of the element to return.
     * @return The literals at the given index.
     */
    public int getLiterals(int index) {
      return literals_.getInt(index);
    }
    /**
     * <pre>
     * The goal is always to minimize the linear Boolean formula defined by these
     * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
     * literal_i is true in a given assignment.
     * Note that the same variable shouldn't appear twice and that zero
     * coefficients are not allowed.
     * </pre>
     *
     * <code>repeated int32 literals = 1;</code>
     * @param index The index to set the value at.
     * @param value The literals to set.
     * @return This builder for chaining.
     */
    public Builder setLiterals(
        int index, int value) {
      ensureLiteralsIsMutable();
      literals_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The goal is always to minimize the linear Boolean formula defined by these
     * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
     * literal_i is true in a given assignment.
     * Note that the same variable shouldn't appear twice and that zero
     * coefficients are not allowed.
     * </pre>
     *
     * <code>repeated int32 literals = 1;</code>
     * @param value The literals to add.
     * @return This builder for chaining.
     */
    public Builder addLiterals(int value) {
      ensureLiteralsIsMutable();
      literals_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The goal is always to minimize the linear Boolean formula defined by these
     * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
     * literal_i is true in a given assignment.
     * Note that the same variable shouldn't appear twice and that zero
     * coefficients are not allowed.
     * </pre>
     *
     * <code>repeated int32 literals = 1;</code>
     * @param values The literals to add.
     * @return This builder for chaining.
     */
    public Builder addAllLiterals(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureLiteralsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, literals_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The goal is always to minimize the linear Boolean formula defined by these
     * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
     * literal_i is true in a given assignment.
     * Note that the same variable shouldn't appear twice and that zero
     * coefficients are not allowed.
     * </pre>
     *
     * <code>repeated int32 literals = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearLiterals() {
      literals_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList coefficients_ = emptyLongList();
    private void ensureCoefficientsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        coefficients_ = mutableCopy(coefficients_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated int64 coefficients = 2;</code>
     * @return A list containing the coefficients.
     */
    public java.util.List<java.lang.Long>
        getCoefficientsList() {
      return ((bitField0_ & 0x00000002) != 0) ?
               java.util.Collections.unmodifiableList(coefficients_) : coefficients_;
    }
    /**
     * <code>repeated int64 coefficients = 2;</code>
     * @return The count of coefficients.
     */
    public int getCoefficientsCount() {
      return coefficients_.size();
    }
    /**
     * <code>repeated int64 coefficients = 2;</code>
     * @param index The index of the element to return.
     * @return The coefficients at the given index.
     */
    public long getCoefficients(int index) {
      return coefficients_.getLong(index);
    }
    /**
     * <code>repeated int64 coefficients = 2;</code>
     * @param index The index to set the value at.
     * @param value The coefficients to set.
     * @return This builder for chaining.
     */
    public Builder setCoefficients(
        int index, long value) {
      ensureCoefficientsIsMutable();
      coefficients_.setLong(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 coefficients = 2;</code>
     * @param value The coefficients to add.
     * @return This builder for chaining.
     */
    public Builder addCoefficients(long value) {
      ensureCoefficientsIsMutable();
      coefficients_.addLong(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 coefficients = 2;</code>
     * @param values The coefficients to add.
     * @return This builder for chaining.
     */
    public Builder addAllCoefficients(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureCoefficientsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, coefficients_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 coefficients = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCoefficients() {
      coefficients_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private double offset_ ;
    /**
     * <pre>
     * For a given variable assignment, the "real" problem objective value is
     * 'scaling_factor * (minimization_objective + offset)' where
     * 'minimization_objective is the one defined just above.
     * Note that this is not what we minimize, but it is what we display.
     * In particular if scaling_factor is negative, then the "real" problem is
     * a maximization problem, even if the "internal" objective is minimized.
     * </pre>
     *
     * <code>optional double offset = 3 [default = 0];</code>
     * @return Whether the offset field is set.
     */
    @java.lang.Override
    public boolean hasOffset() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * For a given variable assignment, the "real" problem objective value is
     * 'scaling_factor * (minimization_objective + offset)' where
     * 'minimization_objective is the one defined just above.
     * Note that this is not what we minimize, but it is what we display.
     * In particular if scaling_factor is negative, then the "real" problem is
     * a maximization problem, even if the "internal" objective is minimized.
     * </pre>
     *
     * <code>optional double offset = 3 [default = 0];</code>
     * @return The offset.
     */
    @java.lang.Override
    public double getOffset() {
      return offset_;
    }
    /**
     * <pre>
     * For a given variable assignment, the "real" problem objective value is
     * 'scaling_factor * (minimization_objective + offset)' where
     * 'minimization_objective is the one defined just above.
     * Note that this is not what we minimize, but it is what we display.
     * In particular if scaling_factor is negative, then the "real" problem is
     * a maximization problem, even if the "internal" objective is minimized.
     * </pre>
     *
     * <code>optional double offset = 3 [default = 0];</code>
     * @param value The offset to set.
     * @return This builder for chaining.
     */
    public Builder setOffset(double value) {
      bitField0_ |= 0x00000004;
      offset_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For a given variable assignment, the "real" problem objective value is
     * 'scaling_factor * (minimization_objective + offset)' where
     * 'minimization_objective is the one defined just above.
     * Note that this is not what we minimize, but it is what we display.
     * In particular if scaling_factor is negative, then the "real" problem is
     * a maximization problem, even if the "internal" objective is minimized.
     * </pre>
     *
     * <code>optional double offset = 3 [default = 0];</code>
     * @return This builder for chaining.
     */
    public Builder clearOffset() {
      bitField0_ = (bitField0_ & ~0x00000004);
      offset_ = 0D;
      onChanged();
      return this;
    }

    private double scalingFactor_ = 1D;
    /**
     * <code>optional double scaling_factor = 4 [default = 1];</code>
     * @return Whether the scalingFactor field is set.
     */
    @java.lang.Override
    public boolean hasScalingFactor() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional double scaling_factor = 4 [default = 1];</code>
     * @return The scalingFactor.
     */
    @java.lang.Override
    public double getScalingFactor() {
      return scalingFactor_;
    }
    /**
     * <code>optional double scaling_factor = 4 [default = 1];</code>
     * @param value The scalingFactor to set.
     * @return This builder for chaining.
     */
    public Builder setScalingFactor(double value) {
      bitField0_ |= 0x00000008;
      scalingFactor_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional double scaling_factor = 4 [default = 1];</code>
     * @return This builder for chaining.
     */
    public Builder clearScalingFactor() {
      bitField0_ = (bitField0_ & ~0x00000008);
      scalingFactor_ = 1D;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:operations_research.sat.LinearObjective)
  }

  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearObjective)
  private static final com.google.ortools.sat.LinearObjective DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.ortools.sat.LinearObjective();
  }

  public static com.google.ortools.sat.LinearObjective getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<LinearObjective>
      PARSER = new com.google.protobuf.AbstractParser<LinearObjective>() {
    @java.lang.Override
    public LinearObjective parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LinearObjective(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LinearObjective> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LinearObjective> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.ortools.sat.LinearObjective getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

