// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/boolean_problem.proto

package com.google.ortools.sat;

public interface LinearObjectiveOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.sat.LinearObjective)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The goal is always to minimize the linear Boolean formula defined by these
   * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
   * literal_i is true in a given assignment.
   * Note that the same variable shouldn't appear twice and that zero
   * coefficients are not allowed.
   * </pre>
   *
   * <code>repeated int32 literals = 1;</code>
   * @return A list containing the literals.
   */
  java.util.List<java.lang.Integer> getLiteralsList();
  /**
   * <pre>
   * The goal is always to minimize the linear Boolean formula defined by these
   * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
   * literal_i is true in a given assignment.
   * Note that the same variable shouldn't appear twice and that zero
   * coefficients are not allowed.
   * </pre>
   *
   * <code>repeated int32 literals = 1;</code>
   * @return The count of literals.
   */
  int getLiteralsCount();
  /**
   * <pre>
   * The goal is always to minimize the linear Boolean formula defined by these
   * two fields: sum_i literal_i * coefficient_i where literal_i is 1 iff
   * literal_i is true in a given assignment.
   * Note that the same variable shouldn't appear twice and that zero
   * coefficients are not allowed.
   * </pre>
   *
   * <code>repeated int32 literals = 1;</code>
   * @param index The index of the element to return.
   * @return The literals at the given index.
   */
  int getLiterals(int index);

  /**
   * <code>repeated int64 coefficients = 2;</code>
   * @return A list containing the coefficients.
   */
  java.util.List<java.lang.Long> getCoefficientsList();
  /**
   * <code>repeated int64 coefficients = 2;</code>
   * @return The count of coefficients.
   */
  int getCoefficientsCount();
  /**
   * <code>repeated int64 coefficients = 2;</code>
   * @param index The index of the element to return.
   * @return The coefficients at the given index.
   */
  long getCoefficients(int index);

  /**
   * <pre>
   * For a given variable assignment, the "real" problem objective value is
   * 'scaling_factor * (minimization_objective + offset)' where
   * 'minimization_objective is the one defined just above.
   * Note that this is not what we minimize, but it is what we display.
   * In particular if scaling_factor is negative, then the "real" problem is
   * a maximization problem, even if the "internal" objective is minimized.
   * </pre>
   *
   * <code>optional double offset = 3 [default = 0];</code>
   * @return Whether the offset field is set.
   */
  boolean hasOffset();
  /**
   * <pre>
   * For a given variable assignment, the "real" problem objective value is
   * 'scaling_factor * (minimization_objective + offset)' where
   * 'minimization_objective is the one defined just above.
   * Note that this is not what we minimize, but it is what we display.
   * In particular if scaling_factor is negative, then the "real" problem is
   * a maximization problem, even if the "internal" objective is minimized.
   * </pre>
   *
   * <code>optional double offset = 3 [default = 0];</code>
   * @return The offset.
   */
  double getOffset();

  /**
   * <code>optional double scaling_factor = 4 [default = 1];</code>
   * @return Whether the scalingFactor field is set.
   */
  boolean hasScalingFactor();
  /**
   * <code>optional double scaling_factor = 4 [default = 1];</code>
   * @return The scalingFactor.
   */
  double getScalingFactor();
}
