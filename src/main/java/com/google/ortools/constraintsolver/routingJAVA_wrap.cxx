/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_mainJNI = NULL;
    jmethodID director_method_ids[113];
  }
}

SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <cstdint>
#include <string>
#include <vector>

#include "ortools/base/basictypes.h"


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <string>


#include <vector>
#include "ortools/base/integral_types.h"


// TODO(user): see if we can remove <vector>
#include <vector>
#include "ortools/base/integral_types.h"
#include "ortools/util/tuple_set.h"


#include "ortools/base/integral_types.h"


#include "ortools/base/jniutil.h"


#include "ortools/constraint_solver/constraint_solver.h"
#include "ortools/constraint_solver/constraint_solveri.h"
#include "ortools/constraint_solver/java/javawrapcp_util.h"
#include "ortools/constraint_solver/search_limit.pb.h"
#include "ortools/constraint_solver/solver_parameters.pb.h"

// Supporting structure for the PROTECT_FROM_FAILURE macro.
#include "setjmp.h"
struct FailureProtect {
  jmp_buf exception_buffer;
  void JumpBack() { longjmp(exception_buffer, 1); }
};

/* Global JNI reference deleter */
class GlobalRefGuard {
  JNIEnv *jenv_;
  jobject jref_;
  // non-copyable
  GlobalRefGuard(const GlobalRefGuard &) = delete;
  GlobalRefGuard &operator=(const GlobalRefGuard &) = delete;
  public:
  GlobalRefGuard(JNIEnv *jenv, jobject jref): jenv_(jenv), jref_(jref) {}
  ~GlobalRefGuard() { jenv_->DeleteGlobalRef(jref_); }
};


#include <setjmp.h>
#include <vector>

#include "ortools/base/integral_types.h"
#include "ortools/constraint_solver/constraint_solver.h"
#include "ortools/constraint_solver/constraint_solveri.h"


#include <memory> // std::make_shared<GlobalRefGuard>

SWIGINTERN int operations_research_IntVarLocalSearchFilter_index(operations_research::IntVarLocalSearchFilter *self,operations_research::IntVar *const var){
    int64 index = -1;
    self->FindIndex(var, &index);
    return index;
  }

#include "ortools/constraint_solver/routing_types.h"


#include "ortools/constraint_solver/routing_index_manager.h"


#include "ortools/constraint_solver/routing_types.h"
#include "ortools/constraint_solver/routing_parameters.pb.h"
#include "ortools/constraint_solver/routing_parameters.h"
#include "ortools/constraint_solver/routing.h"
#include <memory>

SWIGINTERN void operations_research_RoutingModel_addMatrixDimension(operations_research::RoutingModel *self,std::vector< std::vector< int64 > > const &values,int64 capacity,bool fix_start_cumul_to_zero,std::string const &name){
    self->AddMatrixDimension(values, capacity, fix_start_cumul_to_zero, name);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "routingJAVA_wrap.h"

SwigDirector_Decision::SwigDirector_Decision(JNIEnv *jenv) : operations_research::Decision(), Swig::Director(jenv) {
}

SwigDirector_Decision::~SwigDirector_Decision() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_Decision::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::Decision::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::Decision::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Decision::Apply(operations_research::Solver *const s) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong js = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::Decision::Apply.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Solver **)&js) = (operations_research::Solver *) s; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[1], swigjobj, js);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::Decision::Apply ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Decision::Refute(operations_research::Solver *const s) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong js = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::Decision::Refute.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Solver **)&js) = (operations_research::Solver *) s; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[2], swigjobj, js);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::Decision::Refute ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Decision::Accept(operations_research::DecisionVisitor *const visitor) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvisitor = 0 ;
  
  if (!swig_override[3]) {
    operations_research::Decision::Accept(visitor);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::DecisionVisitor **)&jvisitor) = (operations_research::DecisionVisitor *) visitor; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[3], swigjobj, jvisitor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::Decision::Accept ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Decision::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "apply", "(Lcom/google/ortools/constraintsolver/Solver;)V", NULL 
    },
    {
      "refute", "(Lcom/google/ortools/constraintsolver/Solver;)V", NULL 
    },
    {
      "accept", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/Decision");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_DecisionVisitor::SwigDirector_DecisionVisitor(JNIEnv *jenv) : operations_research::DecisionVisitor(), Swig::Director(jenv) {
}

SwigDirector_DecisionVisitor::~SwigDirector_DecisionVisitor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_DecisionVisitor::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionVisitor::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_DecisionVisitor::VisitSetVariableValue(operations_research::IntVar *const var, int64 value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvar = 0 ;
  jlong jvalue  ;
  
  if (!swig_override[1]) {
    operations_research::DecisionVisitor::VisitSetVariableValue(var,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::IntVar **)&jvar) = (operations_research::IntVar *) var; 
    jvalue = (jlong) value;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[5], swigjobj, jvar, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionVisitor::VisitSetVariableValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_DecisionVisitor::VisitSplitVariableDomain(operations_research::IntVar *const var, int64 value, bool start_with_lower_half) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvar = 0 ;
  jlong jvalue  ;
  jboolean jstart_with_lower_half  ;
  
  if (!swig_override[2]) {
    operations_research::DecisionVisitor::VisitSplitVariableDomain(var,value,start_with_lower_half);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::IntVar **)&jvar) = (operations_research::IntVar *) var; 
    jvalue = (jlong) value;
    jstart_with_lower_half = (jboolean) start_with_lower_half;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[6], swigjobj, jvar, jvalue, jstart_with_lower_half);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionVisitor::VisitSplitVariableDomain ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_DecisionVisitor::VisitScheduleOrPostpone(operations_research::IntervalVar *const var, int64 est) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvar = 0 ;
  jlong jest  ;
  
  if (!swig_override[3]) {
    operations_research::DecisionVisitor::VisitScheduleOrPostpone(var,est);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::IntervalVar **)&jvar) = (operations_research::IntervalVar *) var; 
    jest = (jlong) est;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[7], swigjobj, jvar, jest);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionVisitor::VisitScheduleOrPostpone ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_DecisionVisitor::VisitScheduleOrExpedite(operations_research::IntervalVar *const var, int64 est) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvar = 0 ;
  jlong jest  ;
  
  if (!swig_override[4]) {
    operations_research::DecisionVisitor::VisitScheduleOrExpedite(var,est);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::IntervalVar **)&jvar) = (operations_research::IntervalVar *) var; 
    jest = (jlong) est;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[8], swigjobj, jvar, jest);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionVisitor::VisitScheduleOrExpedite ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_DecisionVisitor::VisitRankFirstInterval(operations_research::SequenceVar *const sequence, int index) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence = 0 ;
  jint jindex  ;
  
  if (!swig_override[5]) {
    operations_research::DecisionVisitor::VisitRankFirstInterval(sequence,index);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::SequenceVar **)&jsequence) = (operations_research::SequenceVar *) sequence; 
    jindex = (jint) index;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[9], swigjobj, jsequence, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionVisitor::VisitRankFirstInterval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_DecisionVisitor::VisitRankLastInterval(operations_research::SequenceVar *const sequence, int index) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence = 0 ;
  jint jindex  ;
  
  if (!swig_override[6]) {
    operations_research::DecisionVisitor::VisitRankLastInterval(sequence,index);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::SequenceVar **)&jsequence) = (operations_research::SequenceVar *) sequence; 
    jindex = (jint) index;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[10], swigjobj, jsequence, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionVisitor::VisitRankLastInterval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_DecisionVisitor::VisitUnknownDecision() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    operations_research::DecisionVisitor::VisitUnknownDecision();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[11], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionVisitor::VisitUnknownDecision ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_DecisionVisitor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "visitSetVariableValue", "(Lcom/google/ortools/constraintsolver/IntVar;J)V", NULL 
    },
    {
      "visitSplitVariableDomain", "(Lcom/google/ortools/constraintsolver/IntVar;JZ)V", NULL 
    },
    {
      "visitScheduleOrPostpone", "(Lcom/google/ortools/constraintsolver/IntervalVar;J)V", NULL 
    },
    {
      "visitScheduleOrExpedite", "(Lcom/google/ortools/constraintsolver/IntervalVar;J)V", NULL 
    },
    {
      "visitRankFirstInterval", "(Lcom/google/ortools/constraintsolver/SequenceVar;I)V", NULL 
    },
    {
      "visitRankLastInterval", "(Lcom/google/ortools/constraintsolver/SequenceVar;I)V", NULL 
    },
    {
      "visitUnknownDecision", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/DecisionVisitor");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_DecisionBuilder::SwigDirector_DecisionBuilder(JNIEnv *jenv) : operations_research::DecisionBuilder(), Swig::Director(jenv) {
}

SwigDirector_DecisionBuilder::~SwigDirector_DecisionBuilder() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_DecisionBuilder::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::DecisionBuilder::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[12], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionBuilder::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

operations_research::Decision *SwigDirector_DecisionBuilder::Next(operations_research::Solver *const s) {
  operations_research::Decision *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong js = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::DecisionBuilder::Next.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Solver **)&js) = (operations_research::Solver *) s; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_mainJNI, Swig::director_method_ids[13], swigjobj, js);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = *(operations_research::Decision **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::DecisionBuilder::Next ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_DecisionBuilder::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "nextWrap", "(Lcom/google/ortools/constraintsolver/Solver;)Lcom/google/ortools/constraintsolver/Decision;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/DecisionBuilder");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SearchMonitor::SwigDirector_SearchMonitor(JNIEnv *jenv, operations_research::Solver *const s) : operations_research::SearchMonitor(s), Swig::Director(jenv) {
}

SwigDirector_SearchMonitor::~SwigDirector_SearchMonitor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_SearchMonitor::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[14], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SearchMonitor::EnterSearch() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    operations_research::SearchMonitor::EnterSearch();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[15], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::EnterSearch ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::RestartSearch() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    operations_research::SearchMonitor::RestartSearch();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[16], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::RestartSearch ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::ExitSearch() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    operations_research::SearchMonitor::ExitSearch();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[17], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::ExitSearch ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::BeginNextDecision(operations_research::DecisionBuilder *const b) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jb = 0 ;
  
  if (!swig_override[4]) {
    operations_research::SearchMonitor::BeginNextDecision(b);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::DecisionBuilder **)&jb) = (operations_research::DecisionBuilder *) b; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[18], swigjobj, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::BeginNextDecision ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::EndNextDecision(operations_research::DecisionBuilder *const b, operations_research::Decision *const d) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jb = 0 ;
  jlong jd = 0 ;
  
  if (!swig_override[5]) {
    operations_research::SearchMonitor::EndNextDecision(b,d);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::DecisionBuilder **)&jb) = (operations_research::DecisionBuilder *) b; 
    *((operations_research::Decision **)&jd) = (operations_research::Decision *) d; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[19], swigjobj, jb, jd);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::EndNextDecision ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::ApplyDecision(operations_research::Decision *const d) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  
  if (!swig_override[6]) {
    operations_research::SearchMonitor::ApplyDecision(d);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Decision **)&jd) = (operations_research::Decision *) d; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[20], swigjobj, jd);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::ApplyDecision ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::RefuteDecision(operations_research::Decision *const d) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  
  if (!swig_override[7]) {
    operations_research::SearchMonitor::RefuteDecision(d);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Decision **)&jd) = (operations_research::Decision *) d; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[21], swigjobj, jd);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::RefuteDecision ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::AfterDecision(operations_research::Decision *const d, bool apply) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jd = 0 ;
  jboolean japply  ;
  
  if (!swig_override[8]) {
    operations_research::SearchMonitor::AfterDecision(d,apply);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Decision **)&jd) = (operations_research::Decision *) d; 
    japply = (jboolean) apply;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[22], swigjobj, jd, japply);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::AfterDecision ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::BeginFail() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    operations_research::SearchMonitor::BeginFail();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[23], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::BeginFail ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::EndFail() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[10]) {
    operations_research::SearchMonitor::EndFail();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[24], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::EndFail ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::BeginInitialPropagation() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    operations_research::SearchMonitor::BeginInitialPropagation();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[25], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::BeginInitialPropagation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::EndInitialPropagation() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[12]) {
    operations_research::SearchMonitor::EndInitialPropagation();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[26], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::EndInitialPropagation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_SearchMonitor::AcceptSolution() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[13]) {
    return operations_research::SearchMonitor::AcceptSolution();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[27], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::AcceptSolution ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_SearchMonitor::AtSolution() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[14]) {
    return operations_research::SearchMonitor::AtSolution();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[28], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::AtSolution ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SearchMonitor::NoMoreSolutions() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[15]) {
    operations_research::SearchMonitor::NoMoreSolutions();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[29], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::NoMoreSolutions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_SearchMonitor::LocalOptimum() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[16]) {
    return operations_research::SearchMonitor::LocalOptimum();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[30], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::LocalOptimum ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_SearchMonitor::AcceptDelta(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdelta = 0 ;
  jlong jdeltadelta = 0 ;
  
  if (!swig_override[17]) {
    return operations_research::SearchMonitor::AcceptDelta(delta,deltadelta);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    *((operations_research::Assignment **)&jdeltadelta) = (operations_research::Assignment *) deltadelta; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[31], swigjobj, jdelta, jdeltadelta);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::AcceptDelta ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SearchMonitor::AcceptNeighbor() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[18]) {
    operations_research::SearchMonitor::AcceptNeighbor();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[32], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::AcceptNeighbor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::AcceptUncheckedNeighbor() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[19]) {
    operations_research::SearchMonitor::AcceptUncheckedNeighbor();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[33], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::AcceptUncheckedNeighbor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_SearchMonitor::IsUncheckedSolutionLimitReached() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[20]) {
    return operations_research::SearchMonitor::IsUncheckedSolutionLimitReached();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[34], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::IsUncheckedSolutionLimitReached ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SearchMonitor::PeriodicCheck() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[21]) {
    operations_research::SearchMonitor::PeriodicCheck();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[35], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::PeriodicCheck ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_SearchMonitor::ProgressPercent() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[22]) {
    return operations_research::SearchMonitor::ProgressPercent();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_mainJNI, Swig::director_method_ids[36], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::ProgressPercent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SearchMonitor::Accept(operations_research::ModelVisitor *const visitor) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvisitor = 0 ;
  
  if (!swig_override[23]) {
    operations_research::SearchMonitor::Accept(visitor);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::ModelVisitor **)&jvisitor) = (operations_research::ModelVisitor *) visitor; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[37], swigjobj, jvisitor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::Accept ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::Install() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[24]) {
    operations_research::SearchMonitor::Install();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[38], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SearchMonitor::Install ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SearchMonitor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "enterSearch", "()V", NULL 
    },
    {
      "restartSearch", "()V", NULL 
    },
    {
      "exitSearch", "()V", NULL 
    },
    {
      "beginNextDecision", "(Lcom/google/ortools/constraintsolver/DecisionBuilder;)V", NULL 
    },
    {
      "endNextDecision", "(Lcom/google/ortools/constraintsolver/DecisionBuilder;Lcom/google/ortools/constraintsolver/Decision;)V", NULL 
    },
    {
      "applyDecision", "(Lcom/google/ortools/constraintsolver/Decision;)V", NULL 
    },
    {
      "refuteDecision", "(Lcom/google/ortools/constraintsolver/Decision;)V", NULL 
    },
    {
      "afterDecision", "(Lcom/google/ortools/constraintsolver/Decision;Z)V", NULL 
    },
    {
      "beginFail", "()V", NULL 
    },
    {
      "endFail", "()V", NULL 
    },
    {
      "beginInitialPropagation", "()V", NULL 
    },
    {
      "endInitialPropagation", "()V", NULL 
    },
    {
      "acceptSolution", "()Z", NULL 
    },
    {
      "atSolution", "()Z", NULL 
    },
    {
      "noMoreSolutions", "()V", NULL 
    },
    {
      "localOptimum", "()Z", NULL 
    },
    {
      "acceptDelta", "(Lcom/google/ortools/constraintsolver/Assignment;Lcom/google/ortools/constraintsolver/Assignment;)Z", NULL 
    },
    {
      "acceptNeighbor", "()V", NULL 
    },
    {
      "AcceptUncheckedNeighbor", "()V", NULL 
    },
    {
      "IsUncheckedSolutionLimitReached", "()Z", NULL 
    },
    {
      "periodicCheck", "()V", NULL 
    },
    {
      "progressPercent", "()I", NULL 
    },
    {
      "accept", "(Lcom/google/ortools/constraintsolver/ModelVisitor;)V", NULL 
    },
    {
      "install", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/SearchMonitor");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 25; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_LocalSearchOperator::SwigDirector_LocalSearchOperator(JNIEnv *jenv) : operations_research::LocalSearchOperator(), Swig::Director(jenv) {
}

SwigDirector_LocalSearchOperator::~SwigDirector_LocalSearchOperator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_LocalSearchOperator::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[39], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchOperator::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_LocalSearchOperator::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdelta = 0 ;
  jlong jdeltadelta = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::LocalSearchOperator::MakeNextNeighbor.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    *((operations_research::Assignment **)&jdeltadelta) = (operations_research::Assignment *) deltadelta; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[40], swigjobj, jdelta, jdeltadelta);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchOperator::MakeNextNeighbor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_LocalSearchOperator::Start(operations_research::Assignment const *assignment) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jassignment = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::LocalSearchOperator::Start.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jassignment) = (operations_research::Assignment *) assignment; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[41], swigjobj, jassignment);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchOperator::Start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_LocalSearchOperator::Reset() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    operations_research::LocalSearchOperator::Reset();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[42], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchOperator::Reset ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_LocalSearchOperator::HasFragments() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return operations_research::LocalSearchOperator::HasFragments();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[43], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchOperator::HasFragments ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_LocalSearchOperator::HoldsDelta() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return operations_research::LocalSearchOperator::HoldsDelta();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[44], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchOperator::HoldsDelta ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_LocalSearchOperator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "nextNeighbor", "(Lcom/google/ortools/constraintsolver/Assignment;Lcom/google/ortools/constraintsolver/Assignment;)Z", NULL 
    },
    {
      "start", "(Lcom/google/ortools/constraintsolver/Assignment;)V", NULL 
    },
    {
      "reset", "()V", NULL 
    },
    {
      "HasFragments", "()Z", NULL 
    },
    {
      "HoldsDelta", "()Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/LocalSearchOperator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IntVarLocalSearchOperator::SwigDirector_IntVarLocalSearchOperator(JNIEnv *jenv) : operations_research::IntVarLocalSearchOperator(), Swig::Director(jenv) {
}

SwigDirector_IntVarLocalSearchOperator::SwigDirector_IntVarLocalSearchOperator(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &vars, bool keep_inverse_values) : operations_research::IntVarLocalSearchOperator(vars, keep_inverse_values), Swig::Director(jenv) {
}

SwigDirector_IntVarLocalSearchOperator::~SwigDirector_IntVarLocalSearchOperator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_IntVarLocalSearchOperator::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[45], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchOperator::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_IntVarLocalSearchOperator::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  return operations_research::IntVarLocalSearchOperator::MakeNextNeighbor(delta,deltadelta);
}

void SwigDirector_IntVarLocalSearchOperator::Start(operations_research::Assignment const *assignment) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::Start(assignment);
}

void SwigDirector_IntVarLocalSearchOperator::Reset() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    operations_research::LocalSearchOperator::Reset();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[46], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchOperator::Reset ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_IntVarLocalSearchOperator::HasFragments() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return operations_research::LocalSearchOperator::HasFragments();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[47], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchOperator::HasFragments ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_IntVarLocalSearchOperator::HoldsDelta() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::HoldsDelta();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[48], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchOperator::HoldsDelta ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_IntVarLocalSearchOperator::IsIncremental() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::IsIncremental();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[49], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchOperator::IsIncremental ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_IntVarLocalSearchOperator::SkipUnchanged(int index) const {
  return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::SkipUnchanged(index);
}

void SwigDirector_IntVarLocalSearchOperator::OnStart() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::OnStart();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[50], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchOperator::OnStart ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_IntVarLocalSearchOperator::MakeOneNeighbor() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return operations_research::IntVarLocalSearchOperator::MakeOneNeighbor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[51], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchOperator::MakeOneNeighbor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IntVarLocalSearchOperator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "reset", "()V", NULL 
    },
    {
      "HasFragments", "()Z", NULL 
    },
    {
      "HoldsDelta", "()Z", NULL 
    },
    {
      "isIncremental", "()Z", NULL 
    },
    {
      "onStart", "()V", NULL 
    },
    {
      "oneNeighbor", "()Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/IntVarLocalSearchOperator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SequenceVarLocalSearchOperator::SwigDirector_SequenceVarLocalSearchOperator(JNIEnv *jenv) : operations_research::SequenceVarLocalSearchOperator(), Swig::Director(jenv) {
}

SwigDirector_SequenceVarLocalSearchOperator::SwigDirector_SequenceVarLocalSearchOperator(JNIEnv *jenv, std::vector< operations_research::SequenceVar * > const &vars) : operations_research::SequenceVarLocalSearchOperator(vars), Swig::Director(jenv) {
}

SwigDirector_SequenceVarLocalSearchOperator::~SwigDirector_SequenceVarLocalSearchOperator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_SequenceVarLocalSearchOperator::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[52], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SequenceVarLocalSearchOperator::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_SequenceVarLocalSearchOperator::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdelta = 0 ;
  jlong jdeltadelta = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::SequenceVarLocalSearchOperator::MakeNextNeighbor.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    *((operations_research::Assignment **)&jdeltadelta) = (operations_research::Assignment *) deltadelta; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[53], swigjobj, jdelta, jdeltadelta);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SequenceVarLocalSearchOperator::MakeNextNeighbor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SequenceVarLocalSearchOperator::Start(operations_research::Assignment const *assignment) {
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler >::Start(assignment);
}

void SwigDirector_SequenceVarLocalSearchOperator::Reset() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    operations_research::LocalSearchOperator::Reset();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[54], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SequenceVarLocalSearchOperator::Reset ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_SequenceVarLocalSearchOperator::HasFragments() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return operations_research::LocalSearchOperator::HasFragments();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[55], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SequenceVarLocalSearchOperator::HasFragments ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_SequenceVarLocalSearchOperator::HoldsDelta() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler >::HoldsDelta();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[56], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SequenceVarLocalSearchOperator::HoldsDelta ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_SequenceVarLocalSearchOperator::IsIncremental() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler >::IsIncremental();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[57], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SequenceVarLocalSearchOperator::IsIncremental ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_SequenceVarLocalSearchOperator::SkipUnchanged(int index) const {
  return operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler >::SkipUnchanged(index);
}

void SwigDirector_SequenceVarLocalSearchOperator::OnStart() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler >::OnStart();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[58], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SequenceVarLocalSearchOperator::OnStart ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SequenceVarLocalSearchOperator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "nextNeighbor", "(Lcom/google/ortools/constraintsolver/Assignment;Lcom/google/ortools/constraintsolver/Assignment;)Z", NULL 
    },
    {
      "reset", "()V", NULL 
    },
    {
      "HasFragments", "()Z", NULL 
    },
    {
      "HoldsDelta", "()Z", NULL 
    },
    {
      "isIncremental", "()Z", NULL 
    },
    {
      "onStart", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/SequenceVarLocalSearchOperator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_BaseLns::SwigDirector_BaseLns(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &vars) : operations_research::BaseLns(vars), Swig::Director(jenv) {
}

SwigDirector_BaseLns::~SwigDirector_BaseLns() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_BaseLns::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[59], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::BaseLns::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_BaseLns::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  return operations_research::IntVarLocalSearchOperator::MakeNextNeighbor(delta,deltadelta);
}

void SwigDirector_BaseLns::Start(operations_research::Assignment const *assignment) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::Start(assignment);
}

void SwigDirector_BaseLns::Reset() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    operations_research::LocalSearchOperator::Reset();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[60], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::BaseLns::Reset ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_BaseLns::HasFragments() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return operations_research::BaseLns::HasFragments();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[61], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::BaseLns::HasFragments ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_BaseLns::HoldsDelta() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::HoldsDelta();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[62], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::BaseLns::HoldsDelta ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_BaseLns::IsIncremental() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::IsIncremental();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[63], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::BaseLns::IsIncremental ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_BaseLns::InitFragments() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    operations_research::BaseLns::InitFragments();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[64], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::BaseLns::InitFragments ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_BaseLns::NextFragment() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::BaseLns::NextFragment.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[65], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::BaseLns::NextFragment ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_BaseLns::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "reset", "()V", NULL 
    },
    {
      "HasFragments", "()Z", NULL 
    },
    {
      "HoldsDelta", "()Z", NULL 
    },
    {
      "isIncremental", "()Z", NULL 
    },
    {
      "initFragments", "()V", NULL 
    },
    {
      "nextFragment", "()Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/BaseLns");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ChangeValue::SwigDirector_ChangeValue(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &vars) : operations_research::ChangeValue(vars), Swig::Director(jenv) {
}

SwigDirector_ChangeValue::~SwigDirector_ChangeValue() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_ChangeValue::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[66], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::ChangeValue::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ChangeValue::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  return operations_research::IntVarLocalSearchOperator::MakeNextNeighbor(delta,deltadelta);
}

void SwigDirector_ChangeValue::Start(operations_research::Assignment const *assignment) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::Start(assignment);
}

void SwigDirector_ChangeValue::Reset() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    operations_research::LocalSearchOperator::Reset();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[67], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::ChangeValue::Reset ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ChangeValue::HasFragments() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return operations_research::LocalSearchOperator::HasFragments();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[68], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::ChangeValue::HasFragments ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ChangeValue::HoldsDelta() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::HoldsDelta();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[69], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::ChangeValue::HoldsDelta ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ChangeValue::IsIncremental() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::IsIncremental();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[70], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::ChangeValue::IsIncremental ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ChangeValue::SkipUnchanged(int index) const {
  return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::SkipUnchanged(index);
}

void SwigDirector_ChangeValue::OnStart() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::OnStart();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[71], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::ChangeValue::OnStart ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ChangeValue::MakeOneNeighbor() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return operations_research::ChangeValue::MakeOneNeighbor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[72], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::ChangeValue::MakeOneNeighbor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64 SwigDirector_ChangeValue::ModifyValue(int64 index, int64 value) {
  int64 c_result = SwigValueInit< int64 >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindex  ;
  jlong jvalue  ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::ChangeValue::ModifyValue.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindex = (jlong) index;
    jvalue = (jlong) value;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_mainJNI, Swig::director_method_ids[73], swigjobj, jindex, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::ChangeValue::ModifyValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ChangeValue::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "reset", "()V", NULL 
    },
    {
      "HasFragments", "()Z", NULL 
    },
    {
      "HoldsDelta", "()Z", NULL 
    },
    {
      "isIncremental", "()Z", NULL 
    },
    {
      "onStart", "()V", NULL 
    },
    {
      "oneNeighbor", "()Z", NULL 
    },
    {
      "modifyValue", "(JJ)J", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/ChangeValue");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_PathOperator::SwigDirector_PathOperator(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &next_vars, std::vector< operations_research::IntVar * > const &path_vars, int number_of_base_nodes, bool skip_locally_optimal_paths, bool accept_path_end_base, std::function< int (int64) > start_empty_path_class) : operations_research::PathOperator(next_vars, path_vars, number_of_base_nodes, skip_locally_optimal_paths, accept_path_end_base, start_empty_path_class), Swig::Director(jenv) {
}

SwigDirector_PathOperator::~SwigDirector_PathOperator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_PathOperator::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[74], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_PathOperator::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  return operations_research::IntVarLocalSearchOperator::MakeNextNeighbor(delta,deltadelta);
}

void SwigDirector_PathOperator::Start(operations_research::Assignment const *assignment) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::Start(assignment);
}

void SwigDirector_PathOperator::Reset() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    operations_research::PathOperator::Reset();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[75], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::Reset ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_PathOperator::HasFragments() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return operations_research::LocalSearchOperator::HasFragments();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[76], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::HasFragments ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_PathOperator::HoldsDelta() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::HoldsDelta();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[77], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::HoldsDelta ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_PathOperator::IsIncremental() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::IsIncremental();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[78], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::IsIncremental ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_PathOperator::SkipUnchanged(int index) const {
  return operations_research::PathOperator::SkipUnchanged(index);
}

void SwigDirector_PathOperator::OnStart() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler >::OnStart();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[79], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::OnStart ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_PathOperator::MakeOneNeighbor() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return operations_research::PathOperator::MakeOneNeighbor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[80], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::MakeOneNeighbor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_PathOperator::MakeNeighbor() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::PathOperator::MakeNeighbor.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[81], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::MakeNeighbor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PathOperator::OnNodeInitialization() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    operations_research::PathOperator::OnNodeInitialization();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[82], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::OnNodeInitialization ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_PathOperator::RestartAtPathStartOnSynchronize() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    return operations_research::PathOperator::RestartAtPathStartOnSynchronize();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[83], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::RestartAtPathStartOnSynchronize ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_PathOperator::OnSamePathAsPreviousBase(int64 base_index) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbase_index  ;
  
  if (!swig_override[10]) {
    return operations_research::PathOperator::OnSamePathAsPreviousBase(base_index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbase_index = (jlong) base_index;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[84], swigjobj, jbase_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::OnSamePathAsPreviousBase ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64 SwigDirector_PathOperator::GetBaseNodeRestartPosition(int base_index) {
  int64 c_result = SwigValueInit< int64 >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbase_index  ;
  
  if (!swig_override[11]) {
    return operations_research::PathOperator::GetBaseNodeRestartPosition(base_index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbase_index = (jint) base_index;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_mainJNI, Swig::director_method_ids[85], swigjobj, jbase_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::GetBaseNodeRestartPosition ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PathOperator::SetNextBaseToIncrement(int64 base_index) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbase_index  ;
  
  if (!swig_override[12]) {
    operations_research::PathOperator::SetNextBaseToIncrement(base_index);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbase_index = (jlong) base_index;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[86], swigjobj, jbase_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::SetNextBaseToIncrement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_PathOperator::ConsiderAlternatives(int64 base_index) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbase_index  ;
  
  if (!swig_override[13]) {
    return operations_research::PathOperator::ConsiderAlternatives(base_index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbase_index = (jlong) base_index;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[87], swigjobj, jbase_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::ConsiderAlternatives ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_PathOperator::InitPosition() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[14]) {
    return operations_research::PathOperator::InitPosition();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[88], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::PathOperator::InitPosition ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PathOperator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "reset", "()V", NULL 
    },
    {
      "HasFragments", "()Z", NULL 
    },
    {
      "HoldsDelta", "()Z", NULL 
    },
    {
      "isIncremental", "()Z", NULL 
    },
    {
      "onStart", "()V", NULL 
    },
    {
      "oneNeighbor", "()Z", NULL 
    },
    {
      "neighbor", "()Z", NULL 
    },
    {
      "OnNodeInitialization", "()V", NULL 
    },
    {
      "restartAtPathStartOnSynchronize", "()Z", NULL 
    },
    {
      "onSamePathAsPreviousBase", "(J)Z", NULL 
    },
    {
      "getBaseNodeRestartPosition", "(I)J", NULL 
    },
    {
      "setNextBaseToIncrement", "(J)V", NULL 
    },
    {
      "ConsiderAlternatives", "(J)Z", NULL 
    },
    {
      "initPosition", "()Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/PathOperator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 15; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_LocalSearchFilter::SwigDirector_LocalSearchFilter(JNIEnv *jenv) : operations_research::LocalSearchFilter(), Swig::Director(jenv) {
}

SwigDirector_LocalSearchFilter::~SwigDirector_LocalSearchFilter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_LocalSearchFilter::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[89], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchFilter::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_LocalSearchFilter::Relax(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdelta = 0 ;
  jlong jdeltadelta = 0 ;
  
  if (!swig_override[1]) {
    operations_research::LocalSearchFilter::Relax(delta,deltadelta);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    *((operations_research::Assignment **)&jdeltadelta) = (operations_research::Assignment *) deltadelta; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[90], swigjobj, jdelta, jdeltadelta);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchFilter::Relax ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_LocalSearchFilter::Accept(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta, int64 objective_min, int64 objective_max) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdelta = 0 ;
  jlong jdeltadelta = 0 ;
  jlong jobjective_min  ;
  jlong jobjective_max  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::LocalSearchFilter::Accept.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    *((operations_research::Assignment **)&jdeltadelta) = (operations_research::Assignment *) deltadelta; 
    jobjective_min = (jlong) objective_min;
    jobjective_max = (jlong) objective_max;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[91], swigjobj, jdelta, jdeltadelta, jobjective_min, jobjective_max);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchFilter::Accept ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_LocalSearchFilter::IsIncremental() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return operations_research::LocalSearchFilter::IsIncremental();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[92], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchFilter::IsIncremental ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_LocalSearchFilter::Synchronize(operations_research::Assignment const *assignment, operations_research::Assignment const *delta) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jassignment = 0 ;
  jlong jdelta = 0 ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::LocalSearchFilter::Synchronize.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jassignment) = (operations_research::Assignment *) assignment; 
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[93], swigjobj, jassignment, jdelta);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchFilter::Synchronize ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_LocalSearchFilter::Revert() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    operations_research::LocalSearchFilter::Revert();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[94], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchFilter::Revert ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int64 SwigDirector_LocalSearchFilter::GetSynchronizedObjectiveValue() const {
  int64 c_result = SwigValueInit< int64 >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return operations_research::LocalSearchFilter::GetSynchronizedObjectiveValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_mainJNI, Swig::director_method_ids[95], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchFilter::GetSynchronizedObjectiveValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64 SwigDirector_LocalSearchFilter::GetAcceptedObjectiveValue() const {
  int64 c_result = SwigValueInit< int64 >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    return operations_research::LocalSearchFilter::GetAcceptedObjectiveValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_mainJNI, Swig::director_method_ids[96], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::LocalSearchFilter::GetAcceptedObjectiveValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_LocalSearchFilter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "Relax", "(Lcom/google/ortools/constraintsolver/Assignment;Lcom/google/ortools/constraintsolver/Assignment;)V", NULL 
    },
    {
      "accept", "(Lcom/google/ortools/constraintsolver/Assignment;Lcom/google/ortools/constraintsolver/Assignment;JJ)Z", NULL 
    },
    {
      "isIncremental", "()Z", NULL 
    },
    {
      "synchronize", "(Lcom/google/ortools/constraintsolver/Assignment;Lcom/google/ortools/constraintsolver/Assignment;)V", NULL 
    },
    {
      "Revert", "()V", NULL 
    },
    {
      "getSynchronizedObjectiveValue", "()J", NULL 
    },
    {
      "getAcceptedObjectiveValue", "()J", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/LocalSearchFilter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IntVarLocalSearchFilter::SwigDirector_IntVarLocalSearchFilter(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &vars) : operations_research::IntVarLocalSearchFilter(vars), Swig::Director(jenv) {
}

SwigDirector_IntVarLocalSearchFilter::~SwigDirector_IntVarLocalSearchFilter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_IntVarLocalSearchFilter::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[97], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchFilter::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IntVarLocalSearchFilter::Relax(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdelta = 0 ;
  jlong jdeltadelta = 0 ;
  
  if (!swig_override[1]) {
    operations_research::LocalSearchFilter::Relax(delta,deltadelta);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    *((operations_research::Assignment **)&jdeltadelta) = (operations_research::Assignment *) deltadelta; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[98], swigjobj, jdelta, jdeltadelta);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchFilter::Relax ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_IntVarLocalSearchFilter::Accept(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta, int64 objective_min, int64 objective_max) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdelta = 0 ;
  jlong jdeltadelta = 0 ;
  jlong jobjective_min  ;
  jlong jobjective_max  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method operations_research::IntVarLocalSearchFilter::Accept.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    *((operations_research::Assignment **)&jdeltadelta) = (operations_research::Assignment *) deltadelta; 
    jobjective_min = (jlong) objective_min;
    jobjective_max = (jlong) objective_max;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[99], swigjobj, jdelta, jdeltadelta, jobjective_min, jobjective_max);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchFilter::Accept ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_IntVarLocalSearchFilter::IsIncremental() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return operations_research::LocalSearchFilter::IsIncremental();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_mainJNI, Swig::director_method_ids[100], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchFilter::IsIncremental ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IntVarLocalSearchFilter::Revert() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    operations_research::LocalSearchFilter::Revert();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[101], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchFilter::Revert ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int64 SwigDirector_IntVarLocalSearchFilter::GetSynchronizedObjectiveValue() const {
  int64 c_result = SwigValueInit< int64 >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return operations_research::LocalSearchFilter::GetSynchronizedObjectiveValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_mainJNI, Swig::director_method_ids[102], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchFilter::GetSynchronizedObjectiveValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64 SwigDirector_IntVarLocalSearchFilter::GetAcceptedObjectiveValue() const {
  int64 c_result = SwigValueInit< int64 >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return operations_research::LocalSearchFilter::GetAcceptedObjectiveValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_mainJNI, Swig::director_method_ids[103], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchFilter::GetAcceptedObjectiveValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IntVarLocalSearchFilter::OnSynchronize(operations_research::Assignment const *delta) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdelta = 0 ;
  
  if (!swig_override[7]) {
    operations_research::IntVarLocalSearchFilter::OnSynchronize(delta);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::Assignment **)&jdelta) = (operations_research::Assignment *) delta; 
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[104], swigjobj, jdelta);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::IntVarLocalSearchFilter::OnSynchronize ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IntVarLocalSearchFilter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "Relax", "(Lcom/google/ortools/constraintsolver/Assignment;Lcom/google/ortools/constraintsolver/Assignment;)V", NULL 
    },
    {
      "accept", "(Lcom/google/ortools/constraintsolver/Assignment;Lcom/google/ortools/constraintsolver/Assignment;JJ)Z", NULL 
    },
    {
      "isIncremental", "()Z", NULL 
    },
    {
      "Revert", "()V", NULL 
    },
    {
      "getSynchronizedObjectiveValue", "()J", NULL 
    },
    {
      "getAcceptedObjectiveValue", "()J", NULL 
    },
    {
      "onSynchronize", "(Lcom/google/ortools/constraintsolver/Assignment;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/IntVarLocalSearchFilter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SymmetryBreaker::SwigDirector_SymmetryBreaker(JNIEnv *jenv) : operations_research::SymmetryBreaker(), Swig::Director(jenv) {
}

SwigDirector_SymmetryBreaker::~SwigDirector_SymmetryBreaker() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_SymmetryBreaker::DebugString() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return operations_research::BaseObject::DebugString();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_mainJNI, Swig::director_method_ids[105], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SymmetryBreaker::DebugString ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_SymmetryBreaker::VisitSetVariableValue(operations_research::IntVar *const var, int64 value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvar = 0 ;
  jlong jvalue  ;
  
  if (!swig_override[1]) {
    operations_research::DecisionVisitor::VisitSetVariableValue(var,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::IntVar **)&jvar) = (operations_research::IntVar *) var; 
    jvalue = (jlong) value;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[106], swigjobj, jvar, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SymmetryBreaker::VisitSetVariableValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SymmetryBreaker::VisitSplitVariableDomain(operations_research::IntVar *const var, int64 value, bool start_with_lower_half) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvar = 0 ;
  jlong jvalue  ;
  jboolean jstart_with_lower_half  ;
  
  if (!swig_override[2]) {
    operations_research::DecisionVisitor::VisitSplitVariableDomain(var,value,start_with_lower_half);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::IntVar **)&jvar) = (operations_research::IntVar *) var; 
    jvalue = (jlong) value;
    jstart_with_lower_half = (jboolean) start_with_lower_half;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[107], swigjobj, jvar, jvalue, jstart_with_lower_half);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SymmetryBreaker::VisitSplitVariableDomain ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SymmetryBreaker::VisitScheduleOrPostpone(operations_research::IntervalVar *const var, int64 est) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvar = 0 ;
  jlong jest  ;
  
  if (!swig_override[3]) {
    operations_research::DecisionVisitor::VisitScheduleOrPostpone(var,est);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::IntervalVar **)&jvar) = (operations_research::IntervalVar *) var; 
    jest = (jlong) est;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[108], swigjobj, jvar, jest);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SymmetryBreaker::VisitScheduleOrPostpone ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SymmetryBreaker::VisitScheduleOrExpedite(operations_research::IntervalVar *const var, int64 est) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvar = 0 ;
  jlong jest  ;
  
  if (!swig_override[4]) {
    operations_research::DecisionVisitor::VisitScheduleOrExpedite(var,est);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::IntervalVar **)&jvar) = (operations_research::IntervalVar *) var; 
    jest = (jlong) est;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[109], swigjobj, jvar, jest);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SymmetryBreaker::VisitScheduleOrExpedite ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SymmetryBreaker::VisitRankFirstInterval(operations_research::SequenceVar *const sequence, int index) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence = 0 ;
  jint jindex  ;
  
  if (!swig_override[5]) {
    operations_research::DecisionVisitor::VisitRankFirstInterval(sequence,index);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::SequenceVar **)&jsequence) = (operations_research::SequenceVar *) sequence; 
    jindex = (jint) index;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[110], swigjobj, jsequence, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SymmetryBreaker::VisitRankFirstInterval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SymmetryBreaker::VisitRankLastInterval(operations_research::SequenceVar *const sequence, int index) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence = 0 ;
  jint jindex  ;
  
  if (!swig_override[6]) {
    operations_research::DecisionVisitor::VisitRankLastInterval(sequence,index);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((operations_research::SequenceVar **)&jsequence) = (operations_research::SequenceVar *) sequence; 
    jindex = (jint) index;
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[111], swigjobj, jsequence, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SymmetryBreaker::VisitRankLastInterval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SymmetryBreaker::VisitUnknownDecision() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    operations_research::DecisionVisitor::VisitUnknownDecision();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_mainJNI, Swig::director_method_ids[112], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in operations_research::SymmetryBreaker::VisitUnknownDecision ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SymmetryBreaker::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "toString", "()Ljava/lang/String;", NULL 
    },
    {
      "visitSetVariableValue", "(Lcom/google/ortools/constraintsolver/IntVar;J)V", NULL 
    },
    {
      "visitSplitVariableDomain", "(Lcom/google/ortools/constraintsolver/IntVar;JZ)V", NULL 
    },
    {
      "visitScheduleOrPostpone", "(Lcom/google/ortools/constraintsolver/IntervalVar;J)V", NULL 
    },
    {
      "visitScheduleOrExpedite", "(Lcom/google/ortools/constraintsolver/IntervalVar;J)V", NULL 
    },
    {
      "visitRankFirstInterval", "(Lcom/google/ortools/constraintsolver/SequenceVar;I)V", NULL 
    },
    {
      "visitRankLastInterval", "(Lcom/google/ortools/constraintsolver/SequenceVar;I)V", NULL 
    },
    {
      "visitUnknownDecision", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/ortools/constraintsolver/SymmetryBreaker");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntTupleSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  operations_research::IntTupleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (operations_research::IntTupleSet *)new operations_research::IntTupleSet(arg1);
  *(operations_research::IntTupleSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntTupleSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntTupleSet *arg1 = 0 ;
  operations_research::IntTupleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::IntTupleSet const & reference is null");
    return 0;
  } 
  result = (operations_research::IntTupleSet *)new operations_research::IntTupleSet((operations_research::IntTupleSet const &)*arg1);
  *(operations_research::IntTupleSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntTupleSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (int)(arg1)->Insert((std::vector< int > const &)*arg2);
  jresult = (jint)result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  jint jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (int)(arg1)->Insert((std::vector< int64 > const &)*arg2);
  jresult = (jint)result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1insert2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  result = (int)(arg1)->Insert2(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1insert3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (int)(arg1)->Insert3(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1insert4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  result = (int)(arg1)->Insert4(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1insertAll_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  std::vector< std::vector< int64 > > *arg2 = 0 ;
  std::vector< std::vector< int64 > > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  
  if(jarg2) {
    const int size = jenv->GetArrayLength(jarg2);
    result2.clear();
    result2.resize(size);
    for (int index1 = 0; index1 < size; ++index1) {
      jlongArray inner_array =
      (jlongArray)jenv->GetObjectArrayElement(jarg2, index1);
      const int inner_size = jenv->GetArrayLength(inner_array);
      result2[index1].reserve(inner_size);
      jlong * const values =
      jenv->GetLongArrayElements((jlongArray)inner_array, NULL);
      for (int index2 = 0; index2 < inner_size; ++index2) {
        result2[index1].emplace_back(values[index2]);
      }
      jenv->ReleaseLongArrayElements((jlongArray)inner_array, values, JNI_ABORT);
      jenv->DeleteLocalRef(inner_array);
    }
    arg2 = &result2;
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->InsertAll((std::vector< std::vector< int64 > > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1insertAll_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  std::vector< std::vector< int > > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  
  if(jarg2) {
    const int size = jenv->GetArrayLength(jarg2);
    result2.clear();
    result2.resize(size);
    for (int index1 = 0; index1 < size; ++index1) {
      jintArray inner_array =
      (jintArray)jenv->GetObjectArrayElement(jarg2, index1);
      const int inner_size = jenv->GetArrayLength(inner_array);
      result2[index1].reserve(inner_size);
      jint * const values =
      jenv->GetIntArrayElements((jintArray)inner_array, NULL);
      for (int index2 = 0; index2 < inner_size; ++index2) {
        result2[index1].emplace_back(values[index2]);
      }
      jenv->ReleaseIntArrayElements((jintArray)inner_array, values, JNI_ABORT);
      jenv->DeleteLocalRef(inner_array);
    }
    arg2 = &result2;
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->InsertAll((std::vector< std::vector< int > > const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1contains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jboolean jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  std::vector< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (bool)((operations_research::IntTupleSet const *)arg1)->Contains((std::vector< int > const &)*arg2);
  jresult = (jboolean)result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1contains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  jboolean jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (bool)((operations_research::IntTupleSet const *)arg1)->Contains((std::vector< int64 > const &)*arg2);
  jresult = (jboolean)result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1numTuples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  result = (int)((operations_research::IntTupleSet const *)arg1)->NumTuples();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int64)((operations_research::IntTupleSet const *)arg1)->Value(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1arity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  result = (int)((operations_research::IntTupleSet const *)arg1)->Arity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1numDifferentValuesInColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((operations_research::IntTupleSet const *)arg1)->NumDifferentValuesInColumn(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1sortedByColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< operations_research::IntTupleSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((operations_research::IntTupleSet const *)arg1)->SortedByColumn(arg2);
  *(operations_research::IntTupleSet **)&jresult = new operations_research::IntTupleSet((const operations_research::IntTupleSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntTupleSet_1sortedLexicographically(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntTupleSet *arg1 = (operations_research::IntTupleSet *) 0 ;
  SwigValueWrapper< operations_research::IntTupleSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntTupleSet **)&jarg1; 
  result = ((operations_research::IntTupleSet const *)arg1)->SortedLexicographically();
  *(operations_research::IntTupleSet **)&jresult = new operations_research::IntTupleSet((const operations_research::IntTupleSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CpRandomSeed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  result = (int64)operations_research::CpRandomSeed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1CHOOSE_1MAX_1SUM_1IMPACT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters::VariableSelection result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters::VariableSelection)operations_research::DefaultPhaseParameters::CHOOSE_MAX_SUM_IMPACT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1CHOOSE_1MAX_1AVERAGE_1IMPACT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters::VariableSelection result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters::VariableSelection)operations_research::DefaultPhaseParameters::CHOOSE_MAX_AVERAGE_IMPACT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1CHOOSE_1MAX_1VALUE_1IMPACT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters::VariableSelection result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters::VariableSelection)operations_research::DefaultPhaseParameters::CHOOSE_MAX_VALUE_IMPACT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1SELECT_1MIN_1IMPACT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters::ValueSelection result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters::ValueSelection)operations_research::DefaultPhaseParameters::SELECT_MIN_IMPACT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1SELECT_1MAX_1IMPACT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters::ValueSelection result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters::ValueSelection)operations_research::DefaultPhaseParameters::SELECT_MAX_IMPACT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters::DisplayLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters::DisplayLevel)operations_research::DefaultPhaseParameters::NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters::DisplayLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters::DisplayLevel)operations_research::DefaultPhaseParameters::NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1VERBOSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters::DisplayLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters::DisplayLevel)operations_research::DefaultPhaseParameters::VERBOSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1var_1selection_1schema_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::VariableSelection arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = (operations_research::DefaultPhaseParameters::VariableSelection)jarg2; 
  if (arg1) (arg1)->var_selection_schema = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1var_1selection_1schema_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::VariableSelection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (operations_research::DefaultPhaseParameters::VariableSelection) ((arg1)->var_selection_schema);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1value_1selection_1schema_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::ValueSelection arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = (operations_research::DefaultPhaseParameters::ValueSelection)jarg2; 
  if (arg1) (arg1)->value_selection_schema = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1value_1selection_1schema_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::ValueSelection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (operations_research::DefaultPhaseParameters::ValueSelection) ((arg1)->value_selection_schema);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1initialization_1splits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->initialization_splits = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1initialization_1splits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (int) ((arg1)->initialization_splits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1run_1all_1heuristics_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->run_all_heuristics = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1run_1all_1heuristics_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (bool) ((arg1)->run_all_heuristics);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1heuristic_1period_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->heuristic_period = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1heuristic_1period_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (int) ((arg1)->heuristic_period);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1heuristic_1num_1failures_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->heuristic_num_failures_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1heuristic_1num_1failures_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (int) ((arg1)->heuristic_num_failures_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1persistent_1impact_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->persistent_impact = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1persistent_1impact_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (bool) ((arg1)->persistent_impact);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1random_1seed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->random_seed = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1random_1seed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (int) ((arg1)->random_seed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1display_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::DisplayLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = (operations_research::DefaultPhaseParameters::DisplayLevel)jarg2; 
  if (arg1) (arg1)->display_level = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1display_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::DisplayLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (operations_research::DefaultPhaseParameters::DisplayLevel) ((arg1)->display_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1use_1last_1conflict_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->use_last_conflict = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1use_1last_1conflict_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (bool) ((arg1)->use_last_conflict);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1decision_1builder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  if (arg1) (arg1)->decision_builder = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DefaultPhaseParameters_1decision_1builder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  result = (operations_research::DecisionBuilder *) ((arg1)->decision_builder);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1DefaultPhaseParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::DefaultPhaseParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DefaultPhaseParameters *)new operations_research::DefaultPhaseParameters();
  *(operations_research::DefaultPhaseParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1DefaultPhaseParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::DefaultPhaseParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1Solver_1IntegerCastInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::Solver::IntegerCastInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntegerCastInfo *)new operations_research::Solver::IntegerCastInfo();
  *(operations_research::Solver::IntegerCastInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1Solver_1IntegerCastInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::Constraint *arg3 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::Solver::IntegerCastInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::Constraint **)&jarg3; 
  result = (operations_research::Solver::IntegerCastInfo *)new operations_research::Solver::IntegerCastInfo(arg1,arg2,arg3);
  *(operations_research::Solver::IntegerCastInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1IntegerCastInfo_1variable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Solver::IntegerCastInfo *arg1 = (operations_research::Solver::IntegerCastInfo *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver::IntegerCastInfo **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  if (arg1) (arg1)->variable = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1IntegerCastInfo_1variable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver::IntegerCastInfo *arg1 = (operations_research::Solver::IntegerCastInfo *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver::IntegerCastInfo **)&jarg1; 
  result = (operations_research::IntVar *) ((arg1)->variable);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1IntegerCastInfo_1expression_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Solver::IntegerCastInfo *arg1 = (operations_research::Solver::IntegerCastInfo *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver::IntegerCastInfo **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  if (arg1) (arg1)->expression = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1IntegerCastInfo_1expression_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver::IntegerCastInfo *arg1 = (operations_research::Solver::IntegerCastInfo *) 0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver::IntegerCastInfo **)&jarg1; 
  result = (operations_research::IntExpr *) ((arg1)->expression);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1IntegerCastInfo_1maintainer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Solver::IntegerCastInfo *arg1 = (operations_research::Solver::IntegerCastInfo *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver::IntegerCastInfo **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  if (arg1) (arg1)->maintainer = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1IntegerCastInfo_1maintainer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver::IntegerCastInfo *arg1 = (operations_research::Solver::IntegerCastInfo *) 0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver::IntegerCastInfo **)&jarg1; 
  result = (operations_research::Constraint *) ((arg1)->maintainer);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1Solver_1IntegerCastInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Solver::IntegerCastInfo *arg1 = (operations_research::Solver::IntegerCastInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Solver::IntegerCastInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1kNumPriorities_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)operations_research::Solver::kNumPriorities;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INT_1VAR_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::INT_VAR_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INT_1VAR_1SIMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::INT_VAR_SIMPLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1FIRST_1UNBOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_FIRST_UNBOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1RANDOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_RANDOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1MIN_1SIZE_1LOWEST_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_MIN_SIZE_LOWEST_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1MIN_1SIZE_1HIGHEST_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_MIN_SIZE_HIGHEST_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1MIN_1SIZE_1LOWEST_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_MIN_SIZE_LOWEST_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1MIN_1SIZE_1HIGHEST_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_MIN_SIZE_HIGHEST_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1LOWEST_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_LOWEST_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1HIGHEST_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_HIGHEST_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1MIN_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_MIN_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1MAX_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_MAX_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1MAX_1REGRET_1ON_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_MAX_REGRET_ON_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntVarStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntVarStrategy)operations_research::Solver::CHOOSE_PATH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INT_1VALUE_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntValueStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntValueStrategy)operations_research::Solver::INT_VALUE_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INT_1VALUE_1SIMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntValueStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntValueStrategy)operations_research::Solver::INT_VALUE_SIMPLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ASSIGN_1MIN_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntValueStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntValueStrategy)operations_research::Solver::ASSIGN_MIN_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ASSIGN_1MAX_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntValueStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntValueStrategy)operations_research::Solver::ASSIGN_MAX_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ASSIGN_1RANDOM_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntValueStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntValueStrategy)operations_research::Solver::ASSIGN_RANDOM_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ASSIGN_1CENTER_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntValueStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntValueStrategy)operations_research::Solver::ASSIGN_CENTER_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SPLIT_1LOWER_1HALF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntValueStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntValueStrategy)operations_research::Solver::SPLIT_LOWER_HALF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SPLIT_1UPPER_1HALF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntValueStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntValueStrategy)operations_research::Solver::SPLIT_UPPER_HALF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1STATIC_1GLOBAL_1BEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::EvaluatorStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::EvaluatorStrategy)operations_research::Solver::CHOOSE_STATIC_GLOBAL_BEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1DYNAMIC_1GLOBAL_1BEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::EvaluatorStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::EvaluatorStrategy)operations_research::Solver::CHOOSE_DYNAMIC_GLOBAL_BEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SEQUENCE_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SequenceStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SequenceStrategy)operations_research::Solver::SEQUENCE_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SEQUENCE_1SIMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SequenceStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SequenceStrategy)operations_research::Solver::SEQUENCE_SIMPLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1MIN_1SLACK_1RANK_1FORWARD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SequenceStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SequenceStrategy)operations_research::Solver::CHOOSE_MIN_SLACK_RANK_FORWARD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOOSE_1RANDOM_1RANK_1FORWARD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SequenceStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SequenceStrategy)operations_research::Solver::CHOOSE_RANDOM_RANK_FORWARD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INTERVAL_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntervalStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntervalStrategy)operations_research::Solver::INTERVAL_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INTERVAL_1SIMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntervalStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntervalStrategy)operations_research::Solver::INTERVAL_SIMPLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INTERVAL_1SET_1TIMES_1FORWARD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntervalStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntervalStrategy)operations_research::Solver::INTERVAL_SET_TIMES_FORWARD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INTERVAL_1SET_1TIMES_1BACKWARD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::IntervalStrategy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::IntervalStrategy)operations_research::Solver::INTERVAL_SET_TIMES_BACKWARD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1TWOOPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::TWOOPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1OROPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::OROPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1RELOCATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::RELOCATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1EXCHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::EXCHANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CROSS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::CROSS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1MAKEACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::MAKEACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1MAKEINACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::MAKEINACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1MAKECHAININACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::MAKECHAININACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SWAPACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::SWAPACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1EXTENDEDSWAPACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::EXTENDEDSWAPACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1PATHLNS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::PATHLNS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1FULLPATHLNS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::FULLPATHLNS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1UNACTIVELNS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::UNACTIVELNS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1INCREMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::INCREMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1DECREMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::DECREMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SIMPLELNS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchOperators)operations_research::Solver::SIMPLELNS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1LK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::EvaluatorLocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::EvaluatorLocalSearchOperators)operations_research::Solver::LK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1TSPOPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::EvaluatorLocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::EvaluatorLocalSearchOperators)operations_research::Solver::TSPOPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1TSPLNS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::EvaluatorLocalSearchOperators result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::EvaluatorLocalSearchOperators)operations_research::Solver::TSPLNS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1GE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchFilterBound result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchFilterBound)operations_research::Solver::GE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchFilterBound result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchFilterBound)operations_research::Solver::LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1EQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::LocalSearchFilterBound result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::LocalSearchFilterBound)operations_research::Solver::EQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1DELAYED_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::DemonPriority result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::DemonPriority)operations_research::Solver::DELAYED_PRIORITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1VAR_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::DemonPriority result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::DemonPriority)operations_research::Solver::VAR_PRIORITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1NORMAL_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::DemonPriority result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::DemonPriority)operations_research::Solver::NORMAL_PRIORITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ENDS_1AFTER_1END_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::ENDS_AFTER_END;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ENDS_1AFTER_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::ENDS_AFTER_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ENDS_1AT_1END_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::ENDS_AT_END;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ENDS_1AT_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::ENDS_AT_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1STARTS_1AFTER_1END_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::STARTS_AFTER_END;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1STARTS_1AFTER_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::STARTS_AFTER_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1STARTS_1AT_1END_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::STARTS_AT_END;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1STARTS_1AT_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::STARTS_AT_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1STAYS_1IN_1SYNC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::BinaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::BinaryIntervalRelation)operations_research::Solver::STAYS_IN_SYNC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ENDS_1AFTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::UnaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::UnaryIntervalRelation)operations_research::Solver::ENDS_AFTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ENDS_1AT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::UnaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::UnaryIntervalRelation)operations_research::Solver::ENDS_AT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ENDS_1BEFORE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::UnaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::UnaryIntervalRelation)operations_research::Solver::ENDS_BEFORE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1STARTS_1AFTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::UnaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::UnaryIntervalRelation)operations_research::Solver::STARTS_AFTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1STARTS_1AT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::UnaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::UnaryIntervalRelation)operations_research::Solver::STARTS_AT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1STARTS_1BEFORE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::UnaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::UnaryIntervalRelation)operations_research::Solver::STARTS_BEFORE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CROSS_1DATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::UnaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::UnaryIntervalRelation)operations_research::Solver::CROSS_DATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1AVOID_1DATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::UnaryIntervalRelation result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::UnaryIntervalRelation)operations_research::Solver::AVOID_DATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1NO_1CHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::DecisionModification result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::DecisionModification)operations_research::Solver::NO_CHANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1KEEP_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::DecisionModification result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::DecisionModification)operations_research::Solver::KEEP_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1KEEP_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::DecisionModification result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::DecisionModification)operations_research::Solver::KEEP_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1KILL_1BOTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::DecisionModification result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::DecisionModification)operations_research::Solver::KILL_BOTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SWITCH_1BRANCHES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::DecisionModification result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::DecisionModification)operations_research::Solver::SWITCH_BRANCHES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SENTINEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::MarkerType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::MarkerType)operations_research::Solver::SENTINEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SIMPLE_1MARKER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::MarkerType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::MarkerType)operations_research::Solver::SIMPLE_MARKER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1CHOICE_1POINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::MarkerType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::MarkerType)operations_research::Solver::CHOICE_POINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1REVERSIBLE_1ACTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::MarkerType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::MarkerType)operations_research::Solver::REVERSIBLE_ACTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1OUTSIDE_1SEARCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SolverState result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SolverState)operations_research::Solver::OUTSIDE_SEARCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1IN_1ROOT_1NODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SolverState result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SolverState)operations_research::Solver::IN_ROOT_NODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1IN_1SEARCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SolverState result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SolverState)operations_research::Solver::IN_SEARCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1AT_1SOLUTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SolverState result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SolverState)operations_research::Solver::AT_SOLUTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1NO_1MORE_1SOLUTIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SolverState result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SolverState)operations_research::Solver::NO_MORE_SOLUTIONS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1PROBLEM_1INFEASIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::SolverState result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::SolverState)operations_research::Solver::PROBLEM_INFEASIBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1NOT_1SET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::OptimizationDirection result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::OptimizationDirection)operations_research::Solver::NOT_SET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1MAXIMIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::OptimizationDirection result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::OptimizationDirection)operations_research::Solver::MAXIMIZATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1MINIMIZATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::Solver::OptimizationDirection result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Solver::OptimizationDirection)operations_research::Solver::MINIMIZATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1Solver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  operations_research::Solver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (operations_research::Solver *)new operations_research::Solver((std::string const &)*arg1);
  *(operations_research::Solver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1Solver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jbyteArray jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  operations_research::ConstraintSolverParameters *arg2 = 0 ;
  operations_research::ConstraintSolverParameters temp2 ;
  operations_research::Solver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::ConstraintSolverParameters protocol message.");
    }
    arg2 = &temp2;
  }
  result = (operations_research::Solver *)new operations_research::Solver((std::string const &)*arg1,(operations_research::ConstraintSolverParameters const &)*arg2);
  *(operations_research::Solver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1Solver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Solver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jbyteArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::ConstraintSolverParameters result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = ((operations_research::Solver const *)arg1)->parameters();
  {
    const long size = (&result)->ByteSizeLong();
    std::unique_ptr<char[]> buf(new char[size]);
    (&result)->SerializeWithCachedSizesToArray(reinterpret_cast<uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), size);
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1defaultSolverParameters(JNIEnv *jenv, jclass jcls) {
  jbyteArray jresult = 0 ;
  operations_research::ConstraintSolverParameters result;
  
  (void)jenv;
  (void)jcls;
  result = operations_research::Solver::DefaultSolverParameters();
  {
    const long size = (&result)->ByteSizeLong();
    std::unique_ptr<char[]> buf(new char[size]);
    (&result)->SerializeWithCachedSizesToArray(reinterpret_cast<uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), size);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1addConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  {
    operations_research::Solver* const solver = arg1;
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->AddConstraint(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1addCastConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::CastConstraint *arg2 = (operations_research::CastConstraint *) (operations_research::CastConstraint *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *arg4 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::CastConstraint **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = *(operations_research::IntExpr **)&jarg4; 
  (arg1)->AddCastConstraint(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  std::vector< operations_research::SearchMonitor * > *arg3 = 0 ;
  std::vector< operations_research::SearchMonitor * > result3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SearchMonitor";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SearchMonitor*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (bool)(arg1)->Solve(arg2,(std::vector< operations_research::SearchMonitor * > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  result = (bool)(arg1)->Solve(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  result = (bool)(arg1)->Solve(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solve_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  result = (bool)(arg1)->Solve(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solve_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  arg5 = *(operations_research::SearchMonitor **)&jarg5; 
  result = (bool)(arg1)->Solve(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solve_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  arg5 = *(operations_research::SearchMonitor **)&jarg5; 
  arg6 = *(operations_research::SearchMonitor **)&jarg6; 
  result = (bool)(arg1)->Solve(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1newSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  std::vector< operations_research::SearchMonitor * > *arg3 = 0 ;
  std::vector< operations_research::SearchMonitor * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SearchMonitor";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SearchMonitor*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  (arg1)->NewSearch(arg2,(std::vector< operations_research::SearchMonitor * > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1newSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  (arg1)->NewSearch(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1newSearch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  (arg1)->NewSearch(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1newSearch_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  (arg1)->NewSearch(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1newSearch_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  arg5 = *(operations_research::SearchMonitor **)&jarg5; 
  (arg1)->NewSearch(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1newSearch_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  arg5 = *(operations_research::SearchMonitor **)&jarg5; 
  arg6 = *(operations_research::SearchMonitor **)&jarg6; 
  (arg1)->NewSearch(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1nextSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (bool)(arg1)->NextSolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1restartSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->RestartSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1endSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->EndSearch();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solveAndCommit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  std::vector< operations_research::SearchMonitor * > *arg3 = 0 ;
  std::vector< operations_research::SearchMonitor * > result3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SearchMonitor";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SearchMonitor*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (bool)(arg1)->SolveAndCommit(arg2,(std::vector< operations_research::SearchMonitor * > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solveAndCommit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  result = (bool)(arg1)->SolveAndCommit(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solveAndCommit_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  result = (bool)(arg1)->SolveAndCommit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solveAndCommit_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  result = (bool)(arg1)->SolveAndCommit(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solveAndCommit_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  arg5 = *(operations_research::SearchMonitor **)&jarg5; 
  result = (bool)(arg1)->SolveAndCommit(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1checkAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (bool)(arg1)->CheckAssignment(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1checkConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  result = (bool)(arg1)->CheckConstraint(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::SolverState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Solver::SolverState)((operations_research::Solver const *)arg1)->state();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1fail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    operations_research::Solver* const solver = arg1;
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->Fail();
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = ((operations_research::Solver const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1memoryUsage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  result = (int64)operations_research::Solver::MemoryUsage();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1wallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int64)((operations_research::Solver const *)arg1)->wall_time();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1branches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int64)((operations_research::Solver const *)arg1)->branches();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solutions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int64)((operations_research::Solver const *)arg1)->solutions();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1unchecked_1solutions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int64)((operations_research::Solver const *)arg1)->unchecked_solutions();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1demon_1runs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::DemonPriority arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (operations_research::Solver::DemonPriority)jarg2; 
  result = (int64)((operations_research::Solver const *)arg1)->demon_runs(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1failures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int64)((operations_research::Solver const *)arg1)->failures();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1neighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int64)((operations_research::Solver const *)arg1)->neighbors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1filteredNeighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int64)((operations_research::Solver const *)arg1)->filtered_neighbors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1acceptedNeighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int64)((operations_research::Solver const *)arg1)->accepted_neighbors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1stamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  uint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (uint64)((operations_research::Solver const *)arg1)->stamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1fail_1stamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  uint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (uint64)((operations_research::Solver const *)arg1)->fail_stamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1optimization_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::OptimizationDirection result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Solver::OptimizationDirection)((operations_research::Solver const *)arg1)->optimization_direction();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1set_1optimization_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::OptimizationDirection arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (operations_research::Solver::OptimizationDirection)jarg2; 
  (arg1)->set_optimization_direction(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntVar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  std::string *arg4 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (operations_research::IntVar *)(arg1)->MakeIntVar(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntVar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (operations_research::IntVar *)(arg1)->MakeIntVar((std::vector< int64 > const &)*arg2,(std::string const &)*arg3);
  *(operations_research::IntVar **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntVar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (operations_research::IntVar *)(arg1)->MakeIntVar((std::vector< int > const &)*arg2,(std::string const &)*arg3);
  *(operations_research::IntVar **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntVar_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIntVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntVar_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::IntVar *)(arg1)->MakeIntVar((std::vector< int64 > const &)*arg2);
  *(operations_research::IntVar **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntVar_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::IntVar *)(arg1)->MakeIntVar((std::vector< int > const &)*arg2);
  *(operations_research::IntVar **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeBoolVar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::IntVar *)(arg1)->MakeBoolVar((std::string const &)*arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeBoolVar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::IntVar *)(arg1)->MakeBoolVar();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntConst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  std::string *arg3 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (operations_research::IntVar *)(arg1)->MakeIntConst(arg2,(std::string const &)*arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntConst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->MakeIntConst(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSum_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeSum(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSum_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeSum(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSum_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::IntExpr *)(arg1)->MakeSum((std::vector< operations_research::IntVar * > const &)*arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::IntExpr *)(arg1)->MakeScalProd((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::IntExpr *)(arg1)->MakeScalProd((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDifference_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeDifference(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDifference_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeDifference(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeOpposite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  result = (operations_research::IntExpr *)(arg1)->MakeOpposite(arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeProd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeProd(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeProd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeProd(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDiv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeDiv(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDiv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeDiv(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAbs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  result = (operations_research::IntExpr *)(arg1)->MakeAbs(arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSquare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  result = (operations_research::IntExpr *)(arg1)->MakeSquare(arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakePower(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeElement((std::vector< int64 > const &)*arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeElement((std::vector< int > const &)*arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::IndexEvaluator1 arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(J)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t);
  };
  
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeElement(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMonotonicElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::IndexEvaluator1 arg2 ;
  bool arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(J)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t);
  };
  
  arg3 = jarg3 ? true : false; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::IntExpr *)(arg1)->MakeMonotonicElement(arg2,arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElement_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(JJ)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t,(jlong)u);
  };
  
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::IntExpr *)(arg1)->MakeElement(arg2,arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElement_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeElement((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIndexExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeIndexExpression((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIfThenElseCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg4 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *arg5 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntExpr **)&jarg4; 
  arg5 = *(operations_research::IntVar **)&jarg5; 
  result = (operations_research::Constraint *)(arg1)->MakeIfThenElseCt(arg2,arg3,arg4,arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::IntExpr *)(arg1)->MakeMin((std::vector< operations_research::IntVar * > const &)*arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeMin(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMin_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeMin(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMin_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeMin(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::IntExpr *)(arg1)->MakeMax((std::vector< operations_research::IntVar * > const &)*arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeMax(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMax_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeMax(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMax_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeMax(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeConvexPiecewiseExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  int64 arg6 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  arg6 = (int64)jarg6; 
  result = (operations_research::IntExpr *)(arg1)->MakeConvexPiecewiseExpr(arg2,arg3,arg4,arg5,arg6);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSemiContinuousExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::IntExpr *)(arg1)->MakeSemiContinuousExpr(arg2,arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeModulo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeModulo(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeModulo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntExpr *)(arg1)->MakeModulo(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeConditionalExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg4 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::IntExpr *)(arg1)->MakeConditionalExpression(arg2,arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeTrueConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Constraint *)(arg1)->MakeTrueConstraint();
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFalseConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Constraint *)(arg1)->MakeFalseConstraint();
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFalseConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::Constraint *)(arg1)->MakeFalseConstraint((std::string const &)*arg2);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsEqualCstCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsEqualCstCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsEqualCstVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsEqualCstVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsEqualVar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsEqualCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsEqualVar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsEqualVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeEquality_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeEquality(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeEquality_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeEquality(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeEquality_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeEquality(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsDifferentCstCt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsDifferentCstCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsDifferentCstVar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsDifferentCstVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsDifferentCstVar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsDifferentVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsDifferentCstCt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsDifferentCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonEquality_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeNonEquality(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonEquality_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeNonEquality(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonEquality_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeNonEquality(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsLessOrEqualCstCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsLessOrEqualCstCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsLessOrEqualCstVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsLessOrEqualCstVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsLessOrEqualVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsLessOrEqualVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsLessOrEqualCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsLessOrEqualCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLessOrEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeLessOrEqual(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLessOrEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeLessOrEqual(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLessOrEqual_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeLessOrEqual(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsGreaterOrEqualCstCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsGreaterOrEqualCstCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsGreaterOrEqualCstVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsGreaterOrEqualCstVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsGreaterOrEqualVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsGreaterOrEqualVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsGreaterOrEqualCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsGreaterOrEqualCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGreaterOrEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeGreaterOrEqual(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGreaterOrEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeGreaterOrEqual(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGreaterOrEqual_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeGreaterOrEqual(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsGreaterCstCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsGreaterCstCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsGreaterCstVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsGreaterCstVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsGreaterVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsGreaterVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsGreaterCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsGreaterCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGreater_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeGreater(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGreater_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeGreater(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGreater_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeGreater(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsLessCstCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsLessCstCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsLessCstVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsLessCstVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsLessVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::IntVar *)(arg1)->MakeIsLessVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsLessCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsLessCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLess_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeLess(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLess_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeLess(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLess_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int arg3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeLess(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSumLessOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeSumLessOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSumGreaterOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeSumGreaterOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSumEquality_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeSumEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSumEquality_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeSumEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProdEquality_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeScalProdEquality((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProdEquality_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeScalProdEquality((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProdEquality_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeScalProdEquality((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProdEquality_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeScalProdEquality((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProdGreaterOrEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeScalProdGreaterOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProdGreaterOrEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeScalProdGreaterOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProdLessOrEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeScalProdLessOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScalProdLessOrEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeScalProdLessOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMinEquality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeMinEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMaxEquality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeMaxEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElementEquality_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeElementEquality((std::vector< int64 > const &)*arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElementEquality_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeElementEquality((std::vector< int > const &)*arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElementEquality_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeElementEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeElementEquality_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeElementEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAbsEquality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeAbsEquality(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIndexOfConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIndexOfConstraint((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeConstraintInitialPropagateCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::Demon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  result = (operations_research::Demon *)(arg1)->MakeConstraintInitialPropagateCallback(arg2);
  *(operations_research::Demon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDelayedConstraintInitialPropagateCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::Demon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  result = (operations_research::Demon *)(arg1)->MakeDelayedConstraintInitialPropagateCallback(arg2);
  *(operations_research::Demon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeClosureDemon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::Closure arg2 ;
  operations_research::Demon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  result = (operations_research::Demon *)(arg1)->MakeClosureDemon(arg2);
  *(operations_research::Demon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeBetweenCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeBetweenCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNotBetweenCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeNotBetweenCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsBetweenCt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::IntVar *arg5 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = *(operations_research::IntVar **)&jarg5; 
  result = (operations_research::Constraint *)(arg1)->MakeIsBetweenCt(arg2,arg3,arg4,arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsBetweenVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::IntVar *)(arg1)->MakeIsBetweenVar(arg2,arg3,arg4);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMemberCt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int64 > *arg3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeMemberCt(arg2,(std::vector< int64 > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMemberCt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeMemberCt(arg2,(std::vector< int > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNotMemberCt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int64 > *arg3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeNotMemberCt(arg2,(std::vector< int64 > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNotMemberCt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeNotMemberCt(arg2,(std::vector< int > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNotMemberCt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3, jlongArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int64 > arg3 ;
  std::vector< int64 > arg4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    const int size = jenv->GetArrayLength(jarg3);
    (&arg3)->clear();
    (&arg3)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg3)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg4) {
    const int size = jenv->GetArrayLength(jarg4);
    (&arg4)->clear();
    (&arg4)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg4)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeNotMemberCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNotMemberCt_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int > arg3 ;
  std::vector< int > arg4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    const int size = jenv->GetArrayLength(jarg3);
    (&arg3)->clear();
    (&arg3)->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg3)->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg4) {
    const int size = jenv->GetArrayLength(jarg4);
    (&arg4)->clear();
    (&arg4)->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg4)->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeNotMemberCt(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsMemberCt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int64 > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsMemberCt(arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsMemberCt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIsMemberCt(arg2,(std::vector< int > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsMemberVar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int64 > *arg3 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::IntVar *)(arg1)->MakeIsMemberVar(arg2,(std::vector< int64 > const &)*arg3);
  *(operations_research::IntVar **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIsMemberVar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::IntVar *)(arg1)->MakeIsMemberVar(arg2,(std::vector< int > const &)*arg3);
  *(operations_research::IntVar **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeCount((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeCount((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDistribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jobjectArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDistribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jobjectArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDistribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDistribute_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDistribute_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlongArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  std::vector< int64 > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,(std::vector< int64 > const &)*arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDistribute_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDistribute_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlongArray jarg4, jlongArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  std::vector< int64 > *arg4 = 0 ;
  std::vector< int64 > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg5) {
    arg5 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,(std::vector< int64 > const &)*arg4,(std::vector< int64 > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDistribute_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jintArray jarg4, jintArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg5) {
    arg5 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDeviation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeDeviation((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAllDifferent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::Constraint *)(arg1)->MakeAllDifferent((std::vector< operations_research::IntVar * > const &)*arg2);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAllDifferent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  bool arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = jarg3 ? true : false; 
  result = (operations_research::Constraint *)(arg1)->MakeAllDifferent((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAllDifferentExcept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeAllDifferentExcept((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSortingConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeSortingConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLexicalLess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeLexicalLess((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLexicalLessOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeLexicalLessOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeInversePermutationConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeInversePermutationConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIndexOfFirstMaxValueConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeIndexOfFirstMaxValueConstraint(arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIndexOfFirstMinValueConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeIndexOfFirstMinValueConstraint(arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNullIntersect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeNullIntersect((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNullIntersectExcept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeNullIntersectExcept((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNoCycle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::IndexFilter1 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "test", "(J)Z");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t) -> bool {
    return jenv->CallBooleanMethod(jarg4_object, jarg4_method_id, (jlong)t);
  };
  
  result = (operations_research::Constraint *)(arg1)->MakeNoCycle((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNoCycle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeNoCycle((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNoCycle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobject jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::IndexFilter1 arg4 ;
  bool arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "test", "(J)Z");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t) -> bool {
    return jenv->CallBooleanMethod(jarg4_object, jarg4_method_id, (jlong)t);
  };
  
  arg5 = jarg5 ? true : false; 
  result = (operations_research::Constraint *)(arg1)->MakeNoCycle((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCircuit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::Constraint *)(arg1)->MakeCircuit((std::vector< operations_research::IntVar * > const &)*arg2);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSubCircuit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::Constraint *)(arg1)->MakeSubCircuit((std::vector< operations_research::IntVar * > const &)*arg2);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePathCumul_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobjectArray jarg4, jobjectArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  std::vector< operations_research::IntVar * > result4 ;
  std::vector< operations_research::IntVar * > result5 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg5); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg5, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result5.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg5 = &result5;
  }
  result = (operations_research::Constraint *)(arg1)->MakePathCumul((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDelayedPathCumul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobjectArray jarg4, jobjectArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  std::vector< operations_research::IntVar * > result4 ;
  std::vector< operations_research::IntVar * > result5 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg5); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg5, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result5.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg5 = &result5;
  }
  result = (operations_research::Constraint *)(arg1)->MakeDelayedPathCumul((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePathCumul_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobjectArray jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  std::vector< operations_research::IntVar * > result4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  
  jclass jarg5_object_class = jenv->GetObjectClass(jarg5);
  if (nullptr == jarg5_object_class) return 0;
  jmethodID jarg5_method_id = jenv->GetMethodID(
    jarg5_object_class, "applyAsLong", "(JJ)J");
  assert(jarg5_method_id != nullptr);
  // jarg5 will be deleted once this function return.
  jobject jarg5_object = jenv->NewGlobalRef(jarg5);
  
  // Global JNI reference deleter
  auto jarg5_guard = std::make_shared<GlobalRefGuard>(jenv, jarg5_object);
  arg5 = [jenv, jarg5_object, jarg5_method_id, jarg5_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg5_object, jarg5_method_id, (jlong)t,(jlong)u);
  };
  
  result = (operations_research::Constraint *)(arg1)->MakePathCumul((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePathCumul_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobjectArray jarg4, jobjectArray jarg5, jobject jarg6) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg6 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  std::vector< operations_research::IntVar * > result4 ;
  std::vector< operations_research::IntVar * > result5 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg5); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg5, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result5.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg5 = &result5;
  }
  
  jclass jarg6_object_class = jenv->GetObjectClass(jarg6);
  if (nullptr == jarg6_object_class) return 0;
  jmethodID jarg6_method_id = jenv->GetMethodID(
    jarg6_object_class, "applyAsLong", "(JJ)J");
  assert(jarg6_method_id != nullptr);
  // jarg6 will be deleted once this function return.
  jobject jarg6_object = jenv->NewGlobalRef(jarg6);
  
  // Global JNI reference deleter
  auto jarg6_guard = std::make_shared<GlobalRefGuard>(jenv, jarg6_object);
  arg6 = [jenv, jarg6_object, jarg6_method_id, jarg6_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg6_object, jarg6_method_id, (jlong)t,(jlong)u);
  };
  
  result = (operations_research::Constraint *)(arg1)->MakePathCumul((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5,arg6);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePathConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlongArray jarg4, jobjectArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  SwigValueWrapper< std::vector< operations_research::IntVar * > > arg2 ;
  std::vector< int64 > arg3 ;
  std::vector< int64 > arg4 ;
  SwigValueWrapper< std::vector< operations_research::IntVar * > > arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result5 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(object_class,
      "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = result2;
  }
  
  if(jarg3) {
    const int size = jenv->GetArrayLength(jarg3);
    (&arg3)->clear();
    (&arg3)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg3)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg4) {
    const int size = jenv->GetArrayLength(jarg4);
    (&arg4)->clear();
    (&arg4)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg4)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(object_class,
      "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg5); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg5, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result5.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg5 = result5;
  }
  result = (operations_research::Constraint *)(arg1)->MakePathConnected(arg2,arg3,arg4,arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMapDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::Constraint *)(arg1)->MakeMapDomain(arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAllowedAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntTupleSet *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntTupleSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::IntTupleSet const & reference is null");
    return 0;
  } 
  result = (operations_research::Constraint *)(arg1)->MakeAllowedAssignments((std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::IntTupleSet const &)*arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeTransitionConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlongArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntTupleSet *arg3 = 0 ;
  int64 arg4 ;
  std::vector< int64 > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntTupleSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::IntTupleSet const & reference is null");
    return 0;
  } 
  arg4 = (int64)jarg4; 
  
  if(jarg5) {
    arg5 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeTransitionConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::IntTupleSet const &)*arg3,arg4,(std::vector< int64 > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg5;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeTransitionConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jintArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntTupleSet *arg3 = 0 ;
  int64 arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntTupleSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::IntTupleSet const & reference is null");
    return 0;
  } 
  arg4 = (int64)jarg4; 
  
  if(jarg5) {
    arg5 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeTransitionConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::IntTupleSet const &)*arg3,arg4,(std::vector< int > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg5;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonOverlappingBoxesConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobjectArray jarg4, jobjectArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  std::vector< operations_research::IntVar * > result4 ;
  std::vector< operations_research::IntVar * > result5 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg5); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg5, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result5.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg5 = &result5;
  }
  result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonOverlappingBoxesConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jlongArray jarg4, jlongArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int64 > *arg4 = 0 ;
  std::vector< int64 > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  if(jarg4) {
    arg4 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg5) {
    arg5 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int64 > const &)*arg4,(std::vector< int64 > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonOverlappingBoxesConstraint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jintArray jarg4, jintArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg5) {
    arg5 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonOverlappingNonStrictBoxesConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobjectArray jarg4, jobjectArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  std::vector< operations_research::IntVar * > result4 ;
  std::vector< operations_research::IntVar * > result5 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg5); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg5, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result5.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg5 = &result5;
  }
  result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingNonStrictBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonOverlappingNonStrictBoxesConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jlongArray jarg4, jlongArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int64 > *arg4 = 0 ;
  std::vector< int64 > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  if(jarg4) {
    arg4 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg5) {
    arg5 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingNonStrictBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int64 > const &)*arg4,(std::vector< int64 > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNonOverlappingNonStrictBoxesConstraint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jintArray jarg4, jintArray jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg5) {
    arg5 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingNonStrictBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Pack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int)jarg3; 
  result = (operations_research::Pack *)(arg1)->MakePack((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Pack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFixedDurationIntervalVar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationIntervalVar(arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFixedDurationIntervalVar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  std::string *arg4 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationIntervalVar(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFixedDurationIntervalVar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::string *arg5 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationIntervalVar(arg2,arg3,arg4,(std::string const &)*arg5);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFixedInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  std::string *arg4 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (operations_research::IntervalVar *)(arg1)->MakeFixedInterval(arg2,arg3,(std::string const &)*arg4);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntervalVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jboolean jarg8, jstring jarg9) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  int64 arg6 ;
  int64 arg7 ;
  bool arg8 ;
  std::string *arg9 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  arg6 = (int64)jarg6; 
  arg7 = (int64)jarg7; 
  arg8 = jarg8 ? true : false; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  result = (operations_research::IntervalVar *)(arg1)->MakeIntervalVar(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(std::string const &)*arg9);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMirrorInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVar *)(arg1)->MakeMirrorInterval(arg2);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFixedDurationStartSyncedOnStartIntervalVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationStartSyncedOnStartIntervalVar(arg2,arg3,arg4);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFixedDurationStartSyncedOnEndIntervalVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationStartSyncedOnEndIntervalVar(arg2,arg3,arg4);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFixedDurationEndSyncedOnStartIntervalVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationEndSyncedOnStartIntervalVar(arg2,arg3,arg4);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFixedDurationEndSyncedOnEndIntervalVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationEndSyncedOnEndIntervalVar(arg2,arg3,arg4);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntervalRelaxedMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVar *)(arg1)->MakeIntervalRelaxedMin(arg2);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntervalRelaxedMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVar *)(arg1)->MakeIntervalRelaxedMax(arg2);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntervalVarRelation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::Solver::UnaryIntervalRelation arg3 ;
  int64 arg4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (operations_research::Solver::UnaryIntervalRelation)jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIntervalVarRelation(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntervalVarRelation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::Solver::BinaryIntervalRelation arg3 ;
  operations_research::IntervalVar *arg4 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (operations_research::Solver::BinaryIntervalRelation)jarg3; 
  arg4 = *(operations_research::IntervalVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeIntervalVarRelation(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeIntervalVarRelationWithDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::Solver::BinaryIntervalRelation arg3 ;
  operations_research::IntervalVar *arg4 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg5 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (operations_research::Solver::BinaryIntervalRelation)jarg3; 
  arg4 = *(operations_research::IntervalVar **)&jarg4; 
  arg5 = (int64)jarg5; 
  result = (operations_research::Constraint *)(arg1)->MakeIntervalVarRelationWithDelay(arg2,arg3,arg4,arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeTemporalDisjunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  result = (operations_research::Constraint *)(arg1)->MakeTemporalDisjunction(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeTemporalDisjunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeTemporalDisjunction(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDisjunctiveConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  operations_research::DisjunctiveConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (operations_research::DisjunctiveConstraint *)(arg1)->MakeDisjunctiveConstraint((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::string const &)*arg3);
  *(operations_research::DisjunctiveConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeStrictDisjunctiveConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  operations_research::DisjunctiveConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (operations_research::DisjunctiveConstraint *)(arg1)->MakeStrictDisjunctiveConstraint((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::string const &)*arg3);
  *(operations_research::DisjunctiveConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCumulative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlong jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  int64 arg4 ;
  std::string *arg5 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4,(std::string const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCumulative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jlong jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64 arg4 ;
  std::string *arg5 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4,(std::string const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCumulative_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::string *arg5 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = *(operations_research::IntVar **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4,(std::string const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCumulative_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::string *arg5 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = *(operations_research::IntVar **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4,(std::string const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCumulative_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jlong jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  int64 arg4 ;
  std::string *arg5 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  arg4 = (int64)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,(std::string const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCumulative_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::string *arg5 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  arg4 = *(operations_research::IntVar **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,(std::string const &)*arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeCover((std::vector< operations_research::IntervalVar * > const &)*arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeEquality_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  result = (operations_research::Constraint *)(arg1)->MakeEquality(arg2,arg3);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAssignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Assignment *)(arg1)->MakeAssignment();
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAssignment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (operations_research::Assignment *)(arg1)->MakeAssignment((operations_research::Assignment const *)arg2);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFirstSolutionCollector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeFirstSolutionCollector((operations_research::Assignment const *)arg2);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFirstSolutionCollector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeFirstSolutionCollector();
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLastSolutionCollector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeLastSolutionCollector((operations_research::Assignment const *)arg2);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLastSolutionCollector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeLastSolutionCollector();
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeBestValueSolutionCollector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool arg3 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeBestValueSolutionCollector((operations_research::Assignment const *)arg2,arg3);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeBestValueSolutionCollector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeBestValueSolutionCollector(arg2);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNBestValueSolutionCollector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  int arg3 ;
  bool arg4 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeNBestValueSolutionCollector((operations_research::Assignment const *)arg2,arg3,arg4);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNBestValueSolutionCollector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  bool arg3 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeNBestValueSolutionCollector(arg2,arg3);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAllSolutionCollector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeAllSolutionCollector((operations_research::Assignment const *)arg2);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAllSolutionCollector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::SolutionCollector *)(arg1)->MakeAllSolutionCollector();
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMinimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeMinimize(arg2,arg3);
  *(operations_research::OptimizeVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMaximize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeMaximize(arg2,arg3);
  *(operations_research::OptimizeVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeOptimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeOptimize(arg2,arg3,arg4);
  *(operations_research::OptimizeVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeWeightedMinimize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedMinimize((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::OptimizeVar **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeWeightedMinimize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedMinimize((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  *(operations_research::OptimizeVar **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeWeightedMaximize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedMaximize((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::OptimizeVar **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeWeightedMaximize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jintArray jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (int64)jarg4; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedMaximize((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  *(operations_research::OptimizeVar **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeWeightedOptimize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jobjectArray jarg3, jlongArray jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int64 > *arg4 = 0 ;
  int64 arg5 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  if(jarg4) {
    arg4 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg5 = (int64)jarg5; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedOptimize(arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int64 > const &)*arg4,arg5);
  *(operations_research::OptimizeVar **)&jresult = result; 
  {
    delete arg4;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeWeightedOptimize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jobjectArray jarg3, jintArray jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  int64 arg5 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg5 = (int64)jarg5; 
  result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedOptimize(arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int > const &)*arg4,arg5);
  *(operations_research::OptimizeVar **)&jresult = result; 
  {
    delete arg4;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeTabuSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobjectArray jarg5, jlong jarg6, jlong jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  int64 arg6 ;
  int64 arg7 ;
  double arg8 ;
  std::vector< operations_research::IntVar * > result5 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg5); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg5, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result5.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg5 = &result5;
  }
  arg6 = (int64)jarg6; 
  arg7 = (int64)jarg7; 
  arg8 = (double)jarg8; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeTabuSearch(arg2,arg3,arg4,(std::vector< operations_research::IntVar * > const &)*arg5,arg6,arg7,arg8);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGenericTabuSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobjectArray jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  int64 arg6 ;
  std::vector< operations_research::IntVar * > result5 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg5); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg5, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result5.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg5 = &result5;
  }
  arg6 = (int64)jarg6; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeGenericTabuSearch(arg2,arg3,arg4,(std::vector< operations_research::IntVar * > const &)*arg5,arg6);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSimulatedAnnealing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  int64 arg5 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSimulatedAnnealing(arg2,arg3,arg4,arg5);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGuidedLocalSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jobject jarg4, jlong jarg5, jobjectArray jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  int64 arg5 ;
  std::vector< operations_research::IntVar * > *arg6 = 0 ;
  double arg7 ;
  std::vector< operations_research::IntVar * > result6 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(JJ)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u);
  };
  
  arg5 = (int64)jarg5; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg6); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg6, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result6.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg6 = &result6;
  }
  arg7 = (double)jarg7; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeGuidedLocalSearch(arg2,arg3,arg4,arg5,(std::vector< operations_research::IntVar * > const &)*arg6,arg7);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeGuidedLocalSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jobject jarg4, jlong jarg5, jobjectArray jarg6, jobjectArray jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Solver::IndexEvaluator3 arg4 ;
  int64 arg5 ;
  std::vector< operations_research::IntVar * > *arg6 = 0 ;
  std::vector< operations_research::IntVar * > *arg7 = 0 ;
  double arg8 ;
  std::vector< operations_research::IntVar * > result6 ;
  std::vector< operations_research::IntVar * > result7 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(JJJ)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u,long v) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u,(jlong)v);
  };
  
  arg5 = (int64)jarg5; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg6); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg6, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result6.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg6 = &result6;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg7); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg7, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result7.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg7 = &result7;
  }
  arg8 = (double)jarg8; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeGuidedLocalSearch(arg2,arg3,arg4,arg5,(std::vector< operations_research::IntVar * > const &)*arg6,(std::vector< operations_research::IntVar * > const &)*arg7,arg8);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLubyRestart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeLubyRestart(arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeConstantRestart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeConstantRestart(arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeTimeLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::RegularLimit *)(arg1)->MakeTimeLimit(arg2);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeBranchesLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::RegularLimit *)(arg1)->MakeBranchesLimit(arg2);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFailuresLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::RegularLimit *)(arg1)->MakeFailuresLimit(arg2);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSolutionsLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::RegularLimit *)(arg1)->MakeSolutionsLimit(arg2);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLimit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLimit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  bool arg6 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5,arg6);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLimit_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  bool arg6 ;
  bool arg7 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5,arg6,arg7);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLimit_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::RegularLimitParameters *arg2 = 0 ;
  operations_research::RegularLimitParameters temp2 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RegularLimitParameters protocol message.");
    }
    arg2 = &temp2;
  }
  result = (operations_research::RegularLimit *)(arg1)->MakeLimit((operations_research::RegularLimitParameters const &)*arg2);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDefaultRegularLimitParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::RegularLimitParameters result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = ((operations_research::Solver const *)arg1)->MakeDefaultRegularLimitParameters();
  {
    const long size = (&result)->ByteSizeLong();
    std::unique_ptr<char[]> buf(new char[size]);
    (&result)->SerializeWithCachedSizesToArray(reinterpret_cast<uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), size);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLimit_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SearchLimit *arg2 = (operations_research::SearchLimit *) (operations_research::SearchLimit *)0 ;
  operations_research::SearchLimit *arg3 = (operations_research::SearchLimit *) (operations_research::SearchLimit *)0 ;
  operations_research::SearchLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::SearchLimit **)&jarg2; 
  arg3 = *(operations_research::SearchLimit **)&jarg3; 
  result = (operations_research::SearchLimit *)(arg1)->MakeLimit(arg2,arg3);
  *(operations_research::SearchLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeCustomLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::function< bool () > arg2 ;
  operations_research::SearchLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "getAsBoolean", "()Z");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> bool {
    return jenv->CallBooleanMethod(jarg2_object, jarg2_method_id);
  };
  
  result = (operations_research::SearchLimit *)(arg1)->MakeCustomLimit(arg2);
  *(operations_research::SearchLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSearchLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSearchLog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSearchLog_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::function< std::string () > > arg3 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "get", "()Ljava/lang/Object;");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard]() -> std::string {
    jstring js = (jstring) jenv->CallObjectMethod(jarg3_object, jarg3_method_id);
    // convert the Java String to const char* C string.
    const char* c_str(jenv->GetStringUTFChars(js, 0));
    // copy the C string to std::string
    std::string str(c_str);
    // release the C string.
    jenv->ReleaseStringUTFChars(js, c_str);
    return str;
  };
  
  result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSearchLog_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  SwigValueWrapper< std::function< std::string () > > arg4 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "get", "()Ljava/lang/Object;");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard]() -> std::string {
    jstring js = (jstring) jenv->CallObjectMethod(jarg4_object, jarg4_method_id);
    // convert the Java String to const char* C string.
    const char* c_str(jenv->GetStringUTFChars(js, 0));
    // copy the C string to std::string
    std::string str(c_str);
    // release the C string.
    jenv->ReleaseStringUTFChars(js, c_str);
    return str;
  };
  
  result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3,arg4);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSearchLog_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::OptimizeVar *arg3 = (operations_research::OptimizeVar *) (operations_research::OptimizeVar *)0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::OptimizeVar **)&jarg3; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSearchLog_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::OptimizeVar *arg3 = (operations_research::OptimizeVar *) (operations_research::OptimizeVar *)0 ;
  SwigValueWrapper< std::function< std::string () > > arg4 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::OptimizeVar **)&jarg3; 
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "get", "()Ljava/lang/Object;");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard]() -> std::string {
    jstring js = (jstring) jenv->CallObjectMethod(jarg4_object, jarg4_method_id);
    // convert the Java String to const char* C string.
    const char* c_str(jenv->GetStringUTFChars(js, 0));
    // copy the C string to std::string
    std::string str(c_str);
    // release the C string.
    jenv->ReleaseStringUTFChars(js, c_str);
    return str;
  };
  
  result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3,arg4);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSearchTrace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSearchTrace((std::string const &)*arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeEnterSearchCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::function< void () > arg2 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  result = (operations_research::SearchMonitor *)(arg1)->MakeEnterSearchCallback(arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeExitSearchCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::function< void () > arg2 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  result = (operations_research::SearchMonitor *)(arg1)->MakeExitSearchCallback(arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAtSolutionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::function< void () > arg2 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  result = (operations_research::SearchMonitor *)(arg1)->MakeAtSolutionCallback(arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePrintModelVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::ModelVisitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::ModelVisitor *)(arg1)->MakePrintModelVisitor();
  *(operations_research::ModelVisitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeStatisticsModelVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::ModelVisitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::ModelVisitor *)(arg1)->MakeStatisticsModelVisitor();
  *(operations_research::ModelVisitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSymmetryManager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::SymmetryBreaker * > *arg2 = 0 ;
  std::vector< operations_research::SymmetryBreaker * > result2 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SymmetryBreaker";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SymmetryBreaker*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::SearchMonitor *)(arg1)->MakeSymmetryManager((std::vector< operations_research::SymmetryBreaker * > const &)*arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSymmetryManager_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SymmetryBreaker *arg2 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::SymmetryBreaker **)&jarg2; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSymmetryManager(arg2);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSymmetryManager_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SymmetryBreaker *arg2 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SymmetryBreaker *arg3 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::SymmetryBreaker **)&jarg2; 
  arg3 = *(operations_research::SymmetryBreaker **)&jarg3; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSymmetryManager(arg2,arg3);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSymmetryManager_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SymmetryBreaker *arg2 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SymmetryBreaker *arg3 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SymmetryBreaker *arg4 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::SymmetryBreaker **)&jarg2; 
  arg3 = *(operations_research::SymmetryBreaker **)&jarg3; 
  arg4 = *(operations_research::SymmetryBreaker **)&jarg4; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSymmetryManager(arg2,arg3,arg4);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSymmetryManager_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SymmetryBreaker *arg2 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SymmetryBreaker *arg3 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SymmetryBreaker *arg4 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SymmetryBreaker *arg5 = (operations_research::SymmetryBreaker *) (operations_research::SymmetryBreaker *)0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::SymmetryBreaker **)&jarg2; 
  arg3 = *(operations_research::SymmetryBreaker **)&jarg3; 
  arg4 = *(operations_research::SymmetryBreaker **)&jarg4; 
  arg5 = *(operations_research::SymmetryBreaker **)&jarg5; 
  result = (operations_research::SearchMonitor *)(arg1)->MakeSymmetryManager(arg2,arg3,arg4,arg5);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAssignVariableValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Decision *)(arg1)->MakeAssignVariableValue(arg2,arg3);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeVariableLessOrEqualValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Decision *)(arg1)->MakeVariableLessOrEqualValue(arg2,arg3);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeVariableGreaterOrEqualValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Decision *)(arg1)->MakeVariableGreaterOrEqualValue(arg2,arg3);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSplitVariableDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  bool arg4 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (operations_research::Decision *)(arg1)->MakeSplitVariableDomain(arg2,arg3,arg4);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAssignVariableValueOrFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Decision *)(arg1)->MakeAssignVariableValueOrFail(arg2,arg3);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1MakeAssignVariableValueOrDoNothing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::Decision *)(arg1)->MakeAssignVariableValueOrDoNothing(arg2,arg3);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeAssignVariablesValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::Decision *)(arg1)->MakeAssignVariablesValues((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3);
  *(operations_research::Decision **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeFailDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Decision *)(arg1)->MakeFailDecision();
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  SwigValueWrapper< std::function< void (operations_research::Solver *) > > arg2 ;
  SwigValueWrapper< std::function< void (operations_research::Solver *) > > arg3 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "accept", "(Ljava/lang/Object;)V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id,
  jarg2_guard](operations_research::Solver* solver) -> void {
    jclass solver_class = jenv->FindClass(
      "com/google/ortools/constraintsolver/Solver");
    assert(nullptr != solver_class);
    jmethodID solver_constructor = jenv->GetMethodID(solver_class, "<init>", "(JZ)V");
    assert(nullptr != solver_constructor);
    
    // Create a Java Solver class from the C++ Solver*
    jobject solver_object = jenv->NewObject(
      solver_class, solver_constructor, solver, /*OwnMemory=*/false);
    
    // Call the java Callback passing the Java Solver object.
    jenv->CallVoidMethod(jarg2_object, jarg2_method_id, solver_object);
  };
  
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "accept", "(Ljava/lang/Object;)V");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id,
  jarg3_guard](operations_research::Solver* solver) -> void {
    jclass solver_class = jenv->FindClass(
      "com/google/ortools/constraintsolver/Solver");
    assert(nullptr != solver_class);
    jmethodID solver_constructor = jenv->GetMethodID(solver_class, "<init>", "(JZ)V");
    assert(nullptr != solver_constructor);
    
    // Create a Java Solver class from the C++ Solver*
    jobject solver_object = jenv->NewObject(
      solver_class, solver_constructor, solver, /*OwnMemory=*/false);
    
    // Call the java Callback passing the Java Solver object.
    jenv->CallVoidMethod(jarg3_object, jarg3_method_id, solver_object);
  };
  
  result = (operations_research::Decision *)(arg1)->MakeDecision(arg2,arg3);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1compose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  result = (operations_research::DecisionBuilder *)(arg1)->Compose(arg2,arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1compose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  arg4 = *(operations_research::DecisionBuilder **)&jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->Compose(arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1compose_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg5 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  arg4 = *(operations_research::DecisionBuilder **)&jarg4; 
  arg5 = *(operations_research::DecisionBuilder **)&jarg5; 
  result = (operations_research::DecisionBuilder *)(arg1)->Compose(arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1compose_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::DecisionBuilder * > *arg2 = 0 ;
  std::vector< operations_research::DecisionBuilder * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""DecisionBuilder";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::DecisionBuilder*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::DecisionBuilder *)(arg1)->Compose((std::vector< operations_research::DecisionBuilder * > const &)*arg2);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1tryDecisions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  result = (operations_research::DecisionBuilder *)(arg1)->Try(arg2,arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1tryDecisions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  arg4 = *(operations_research::DecisionBuilder **)&jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->Try(arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1tryDecisions_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg5 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  arg4 = *(operations_research::DecisionBuilder **)&jarg4; 
  arg5 = *(operations_research::DecisionBuilder **)&jarg5; 
  result = (operations_research::DecisionBuilder *)(arg1)->Try(arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1tryDecisions_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::DecisionBuilder * > *arg2 = 0 ;
  std::vector< operations_research::DecisionBuilder * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""DecisionBuilder";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::DecisionBuilder*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::DecisionBuilder *)(arg1)->Try((std::vector< operations_research::DecisionBuilder * > const &)*arg2);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IntVarStrategy arg3 ;
  operations_research::Solver::IntValueStrategy arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (operations_research::Solver::IntVarStrategy)jarg3; 
  arg4 = (operations_research::Solver::IntValueStrategy)jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobject jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator1 arg3 ;
  operations_research::Solver::IntValueStrategy arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(J)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](long t) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jlong)t);
  };
  
  arg4 = (operations_research::Solver::IntValueStrategy)jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IntVarStrategy arg3 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (operations_research::Solver::IntVarStrategy)jarg3; 
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(JJ)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u);
  };
  
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IntVarStrategy arg3 ;
  operations_research::Solver::VariableValueComparator arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (operations_research::Solver::IntVarStrategy)jarg3; 
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "test", "(JJJ)Z");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u,long v) -> bool {
    return jenv->CallBooleanMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u,(jlong)v);
  };
  
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobject jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator1 arg3 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(J)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](long t) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jlong)t);
  };
  
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(JJ)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u);
  };
  
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3, jobject jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IntVarStrategy arg3 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  operations_research::Solver::IndexEvaluator1 arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (operations_research::Solver::IntVarStrategy)jarg3; 
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(JJ)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u);
  };
  
  
  jclass jarg5_object_class = jenv->GetObjectClass(jarg5);
  if (nullptr == jarg5_object_class) return 0;
  jmethodID jarg5_method_id = jenv->GetMethodID(
    jarg5_object_class, "applyAsLong", "(J)J");
  assert(jarg5_method_id != nullptr);
  // jarg5 will be deleted once this function return.
  jobject jarg5_object = jenv->NewGlobalRef(jarg5);
  
  // Global JNI reference deleter
  auto jarg5_guard = std::make_shared<GlobalRefGuard>(jenv, jarg5_object);
  arg5 = [jenv, jarg5_object, jarg5_method_id, jarg5_guard](long t) -> long {
    return jenv->CallLongMethod(jarg5_object, jarg5_method_id, (jlong)t);
  };
  
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobject jarg3, jobject jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator1 arg3 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  operations_research::Solver::IndexEvaluator1 arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(J)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](long t) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jlong)t);
  };
  
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(JJ)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u);
  };
  
  
  jclass jarg5_object_class = jenv->GetObjectClass(jarg5);
  if (nullptr == jarg5_object_class) return 0;
  jmethodID jarg5_method_id = jenv->GetMethodID(
    jarg5_object_class, "applyAsLong", "(J)J");
  assert(jarg5_method_id != nullptr);
  // jarg5 will be deleted once this function return.
  jobject jarg5_object = jenv->NewGlobalRef(jarg5);
  
  // Global JNI reference deleter
  auto jarg5_guard = std::make_shared<GlobalRefGuard>(jenv, jarg5_object);
  arg5 = [jenv, jarg5_object, jarg5_method_id, jarg5_guard](long t) -> long {
    return jenv->CallLongMethod(jarg5_object, jarg5_method_id, (jlong)t);
  };
  
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDefaultPhase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::DecisionBuilder *)(arg1)->MakeDefaultPhase((std::vector< operations_research::IntVar * > const &)*arg2);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDefaultPhase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::DefaultPhaseParameters *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::DefaultPhaseParameters **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::DefaultPhaseParameters const & reference is null");
    return 0;
  } 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeDefaultPhase((std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::DefaultPhaseParameters const &)*arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Solver::IntVarStrategy arg3 ;
  operations_research::Solver::IntValueStrategy arg4 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (operations_research::Solver::IntVarStrategy)jarg3; 
  arg4 = (operations_research::Solver::IntValueStrategy)jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase(arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Solver::IntVarStrategy arg4 ;
  operations_research::Solver::IntValueStrategy arg5 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (operations_research::Solver::IntVarStrategy)jarg4; 
  arg5 = (operations_research::Solver::IntValueStrategy)jarg5; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase(arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Solver::IntVarStrategy arg5 ;
  operations_research::Solver::IntValueStrategy arg6 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  arg5 = (operations_research::Solver::IntVarStrategy)jarg5; 
  arg6 = (operations_research::Solver::IntValueStrategy)jarg6; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase(arg2,arg3,arg4,arg5,arg6);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jint jarg6, jint jarg7) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *arg5 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Solver::IntVarStrategy arg6 ;
  operations_research::Solver::IntValueStrategy arg7 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = *(operations_research::IntVar **)&jarg4; 
  arg5 = *(operations_research::IntVar **)&jarg5; 
  arg6 = (operations_research::Solver::IntVarStrategy)jarg6; 
  arg7 = (operations_research::Solver::IntValueStrategy)jarg7; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase(arg2,arg3,arg4,arg5,arg6,arg7);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScheduleOrPostpone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 *arg4 = (int64 *) (int64 *)0 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg4 = (int64 *) jenv->GetIntArrayElements(jarg4, 0); 
  }
  result = (operations_research::Decision *)(arg1)->MakeScheduleOrPostpone(arg2,arg3,arg4);
  *(operations_research::Decision **)&jresult = result; 
  {
    jenv->ReleaseIntArrayElements(jarg4, (jint *)arg4, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeScheduleOrExpedite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 *arg4 = (int64 *) (int64 *)0 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg4 = (int64 *) jenv->GetIntArrayElements(jarg4, 0); 
  }
  result = (operations_research::Decision *)(arg1)->MakeScheduleOrExpedite(arg2,arg3,arg4);
  *(operations_research::Decision **)&jresult = result; 
  {
    jenv->ReleaseIntArrayElements(jarg4, (jint *)arg4, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeRankFirstInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::Decision *)(arg1)->MakeRankFirstInterval(arg2,arg3);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeRankLastInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::Decision *)(arg1)->MakeRankLastInterval(arg2,arg3);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobject jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg3 ;
  operations_research::Solver::EvaluatorStrategy arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(JJ)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jlong)t,(jlong)u);
  };
  
  arg4 = (operations_research::Solver::EvaluatorStrategy)jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobject jarg3, jobject jarg4, jint jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg3 ;
  operations_research::Solver::IndexEvaluator1 arg4 ;
  operations_research::Solver::EvaluatorStrategy arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(JJ)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jlong)t,(jlong)u);
  };
  
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(J)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t);
  };
  
  arg5 = (operations_research::Solver::EvaluatorStrategy)jarg5; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  operations_research::Solver::IntervalStrategy arg3 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (operations_research::Solver::IntervalStrategy)jarg3; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntervalVar * > const &)*arg2,arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makePhase_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  operations_research::Solver::SequenceStrategy arg3 ;
  std::vector< operations_research::SequenceVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SequenceVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SequenceVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (operations_research::Solver::SequenceStrategy)jarg3; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::SequenceVar * > const &)*arg2,arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDecisionBuilderFromAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobjectArray jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > result4 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  result = (operations_research::DecisionBuilder *)(arg1)->MakeDecisionBuilderFromAssignment(arg2,arg3,(std::vector< operations_research::IntVar * > const &)*arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeConstraintAdder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeConstraintAdder(arg2);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSolveOnce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeSolveOnce(arg2);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSolveOnce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeSolveOnce(arg2,arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSolveOnce_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeSolveOnce(arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSolveOnce_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  arg5 = *(operations_research::SearchMonitor **)&jarg5; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeSolveOnce(arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSolveOnce_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::SearchMonitor **)&jarg3; 
  arg4 = *(operations_research::SearchMonitor **)&jarg4; 
  arg5 = *(operations_research::SearchMonitor **)&jarg5; 
  arg6 = *(operations_research::SearchMonitor **)&jarg6; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeSolveOnce(arg2,arg3,arg4,arg5,arg6);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSolveOnce_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  std::vector< operations_research::SearchMonitor * > *arg3 = 0 ;
  std::vector< operations_research::SearchMonitor * > result3 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SearchMonitor";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SearchMonitor*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  result = (operations_research::DecisionBuilder *)(arg1)->MakeSolveOnce(arg2,(std::vector< operations_research::SearchMonitor * > const &)*arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNestedOptimize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool arg4 ;
  int64 arg5 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int64)jarg5; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNestedOptimize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool arg4 ;
  int64 arg5 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int64)jarg5; 
  arg6 = *(operations_research::SearchMonitor **)&jarg6; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,arg6);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNestedOptimize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool arg4 ;
  int64 arg5 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg7 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int64)jarg5; 
  arg6 = *(operations_research::SearchMonitor **)&jarg6; 
  arg7 = *(operations_research::SearchMonitor **)&jarg7; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,arg6,arg7);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNestedOptimize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool arg4 ;
  int64 arg5 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg7 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg8 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int64)jarg5; 
  arg6 = *(operations_research::SearchMonitor **)&jarg6; 
  arg7 = *(operations_research::SearchMonitor **)&jarg7; 
  arg8 = *(operations_research::SearchMonitor **)&jarg8; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNestedOptimize_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool arg4 ;
  int64 arg5 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg7 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg8 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::SearchMonitor *arg9 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int64)jarg5; 
  arg6 = *(operations_research::SearchMonitor **)&jarg6; 
  arg7 = *(operations_research::SearchMonitor **)&jarg7; 
  arg8 = *(operations_research::SearchMonitor **)&jarg8; 
  arg9 = *(operations_research::SearchMonitor **)&jarg9; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNestedOptimize_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobjectArray jarg6) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool arg4 ;
  int64 arg5 ;
  std::vector< operations_research::SearchMonitor * > *arg6 = 0 ;
  std::vector< operations_research::SearchMonitor * > result6 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int64)jarg5; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SearchMonitor";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg6); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg6, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result6.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SearchMonitor*>(ptr_value)
        /*@SWIG@*/);
    }
    arg6 = &result6;
  }
  result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,(std::vector< operations_research::SearchMonitor * > const &)*arg6);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeRestoreAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeRestoreAssignment(arg2);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeStoreAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeStoreAssignment(arg2);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::LocalSearchOperators arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (operations_research::Solver::LocalSearchOperators)jarg3; 
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::LocalSearchOperators arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  arg4 = (operations_research::Solver::LocalSearchOperators)jarg4; 
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobject jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator3 arg3 ;
  operations_research::Solver::EvaluatorLocalSearchOperators arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(JJJ)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](long t,long u,long v) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jlong)t,(jlong)u,(jlong)v);
  };
  
  arg4 = (operations_research::Solver::EvaluatorLocalSearchOperators)jarg4; 
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobject jarg4, jint jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::IndexEvaluator3 arg4 ;
  operations_research::Solver::EvaluatorLocalSearchOperators arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(JJJ)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u,long v) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u,(jlong)v);
  };
  
  arg5 = (operations_research::Solver::EvaluatorLocalSearchOperators)jarg5; 
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,arg5);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeRandomLnsOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int)jarg3; 
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeRandomLnsOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeRandomLnsOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int arg3 ;
  int32 arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int)jarg3; 
  arg4 = (int32)jarg4; 
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeRandomLnsOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMoveTowardTargetOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeMoveTowardTargetOperator((operations_research::Assignment const &)*arg2);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeMoveTowardTargetOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeMoveTowardTargetOperator((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1concatenateOperators_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  std::vector< operations_research::LocalSearchOperator * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""LocalSearchOperator";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::LocalSearchOperator*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::LocalSearchOperator *)(arg1)->ConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1concatenateOperators_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  bool arg3 ;
  std::vector< operations_research::LocalSearchOperator * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""LocalSearchOperator";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::LocalSearchOperator*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = jarg3 ? true : false; 
  result = (operations_research::LocalSearchOperator *)(arg1)->ConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2,arg3);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1concatenateOperators_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  std::function< int64 (int,int) > arg3 ;
  std::vector< operations_research::LocalSearchOperator * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""LocalSearchOperator";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::LocalSearchOperator*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(II)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](int t,int u) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jint)t,(jint)u);
  };
  
  result = (operations_research::LocalSearchOperator *)(arg1)->ConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2,arg3);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1randomConcatenateOperators_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  std::vector< operations_research::LocalSearchOperator * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""LocalSearchOperator";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::LocalSearchOperator*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  result = (operations_research::LocalSearchOperator *)(arg1)->RandomConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1randomConcatenateOperators_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  int32 arg3 ;
  std::vector< operations_research::LocalSearchOperator * > result2 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""LocalSearchOperator";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::LocalSearchOperator*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int32)jarg3; 
  result = (operations_research::LocalSearchOperator *)(arg1)->RandomConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2,arg3);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeNeighborhoodLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) (operations_research::LocalSearchOperator *)0 ;
  int64 arg3 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::LocalSearchOperator **)&jarg2; 
  arg3 = (int64)jarg3; 
  result = (operations_research::LocalSearchOperator *)(arg1)->MakeNeighborhoodLimit(arg2,arg3);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  operations_research::LocalSearchPhaseParameters *arg3 = (operations_research::LocalSearchPhaseParameters *) (operations_research::LocalSearchPhaseParameters *)0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::LocalSearchPhaseParameters **)&jarg3; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeLocalSearchPhase(arg2,arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::LocalSearchPhaseParameters *arg4 = (operations_research::LocalSearchPhaseParameters *) (operations_research::LocalSearchPhaseParameters *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  arg4 = *(operations_research::LocalSearchPhaseParameters **)&jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeLocalSearchPhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::LocalSearchPhaseParameters *arg5 = (operations_research::LocalSearchPhaseParameters *) (operations_research::LocalSearchPhaseParameters *)0 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  arg4 = *(operations_research::DecisionBuilder **)&jarg4; 
  arg5 = *(operations_research::LocalSearchPhaseParameters **)&jarg5; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeLocalSearchPhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhase_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::LocalSearchPhaseParameters *arg4 = (operations_research::LocalSearchPhaseParameters *) (operations_research::LocalSearchPhaseParameters *)0 ;
  std::vector< operations_research::SequenceVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SequenceVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SequenceVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::DecisionBuilder **)&jarg3; 
  arg4 = *(operations_research::LocalSearchPhaseParameters **)&jarg4; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeLocalSearchPhase((std::vector< operations_research::SequenceVar * > const &)*arg2,arg3,arg4);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeDefaultSolutionPool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SolutionPool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::SolutionPool *)(arg1)->MakeDefaultSolutionPool();
  *(operations_research::SolutionPool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhaseParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::LocalSearchOperator *arg3 = (operations_research::LocalSearchOperator *) (operations_research::LocalSearchOperator *)0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::LocalSearchOperator **)&jarg3; 
  arg4 = *(operations_research::DecisionBuilder **)&jarg4; 
  result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4);
  *(operations_research::LocalSearchPhaseParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhaseParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::LocalSearchOperator *arg3 = (operations_research::LocalSearchOperator *) (operations_research::LocalSearchOperator *)0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::RegularLimit *arg5 = (operations_research::RegularLimit *) (operations_research::RegularLimit *)0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::LocalSearchOperator **)&jarg3; 
  arg4 = *(operations_research::DecisionBuilder **)&jarg4; 
  arg5 = *(operations_research::RegularLimit **)&jarg5; 
  result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5);
  *(operations_research::LocalSearchPhaseParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhaseParameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jobjectArray jarg6) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::LocalSearchOperator *arg3 = (operations_research::LocalSearchOperator *) (operations_research::LocalSearchOperator *)0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::RegularLimit *arg5 = (operations_research::RegularLimit *) (operations_research::RegularLimit *)0 ;
  std::vector< operations_research::LocalSearchFilter * > *arg6 = 0 ;
  std::vector< operations_research::LocalSearchFilter * > result6 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::LocalSearchOperator **)&jarg3; 
  arg4 = *(operations_research::DecisionBuilder **)&jarg4; 
  arg5 = *(operations_research::RegularLimit **)&jarg5; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""LocalSearchFilter";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg6); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg6, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result6.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::LocalSearchFilter*>(ptr_value)
        /*@SWIG@*/);
    }
    arg6 = &result6;
  }
  result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5,(std::vector< operations_research::LocalSearchFilter * > const &)*arg6);
  *(operations_research::LocalSearchPhaseParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhaseParameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::SolutionPool *arg3 = (operations_research::SolutionPool *) (operations_research::SolutionPool *)0 ;
  operations_research::LocalSearchOperator *arg4 = (operations_research::LocalSearchOperator *) (operations_research::LocalSearchOperator *)0 ;
  operations_research::DecisionBuilder *arg5 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::SolutionPool **)&jarg3; 
  arg4 = *(operations_research::LocalSearchOperator **)&jarg4; 
  arg5 = *(operations_research::DecisionBuilder **)&jarg5; 
  result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5);
  *(operations_research::LocalSearchPhaseParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhaseParameters_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::SolutionPool *arg3 = (operations_research::SolutionPool *) (operations_research::SolutionPool *)0 ;
  operations_research::LocalSearchOperator *arg4 = (operations_research::LocalSearchOperator *) (operations_research::LocalSearchOperator *)0 ;
  operations_research::DecisionBuilder *arg5 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::RegularLimit *arg6 = (operations_research::RegularLimit *) (operations_research::RegularLimit *)0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::SolutionPool **)&jarg3; 
  arg4 = *(operations_research::LocalSearchOperator **)&jarg4; 
  arg5 = *(operations_research::DecisionBuilder **)&jarg5; 
  arg6 = *(operations_research::RegularLimit **)&jarg6; 
  result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5,arg6);
  *(operations_research::LocalSearchPhaseParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeLocalSearchPhaseParameters_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jobjectArray jarg7) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::SolutionPool *arg3 = (operations_research::SolutionPool *) (operations_research::SolutionPool *)0 ;
  operations_research::LocalSearchOperator *arg4 = (operations_research::LocalSearchOperator *) (operations_research::LocalSearchOperator *)0 ;
  operations_research::DecisionBuilder *arg5 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::RegularLimit *arg6 = (operations_research::RegularLimit *) (operations_research::RegularLimit *)0 ;
  std::vector< operations_research::LocalSearchFilter * > *arg7 = 0 ;
  std::vector< operations_research::LocalSearchFilter * > result7 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::SolutionPool **)&jarg3; 
  arg4 = *(operations_research::LocalSearchOperator **)&jarg4; 
  arg5 = *(operations_research::DecisionBuilder **)&jarg5; 
  arg6 = *(operations_research::RegularLimit **)&jarg6; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""LocalSearchFilter";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg7); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg7, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result7.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::LocalSearchFilter*>(ptr_value)
        /*@SWIG@*/);
    }
    arg7 = &result7;
  }
  result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5,arg6,(std::vector< operations_research::LocalSearchFilter * > const &)*arg7);
  *(operations_research::LocalSearchPhaseParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1MakeAcceptFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::LocalSearchFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::LocalSearchFilter *)(arg1)->MakeAcceptFilter();
  *(operations_research::LocalSearchFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1MakeRejectFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::LocalSearchFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::LocalSearchFilter *)(arg1)->MakeRejectFilter();
  *(operations_research::LocalSearchFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeVariableDomainFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::LocalSearchFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::LocalSearchFilter *)(arg1)->MakeVariableDomainFilter();
  *(operations_research::LocalSearchFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSumObjectiveFilter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobject jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg3 ;
  operations_research::Solver::LocalSearchFilterBound arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntVarLocalSearchFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(JJ)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jlong)t,(jlong)u);
  };
  
  arg4 = (operations_research::Solver::LocalSearchFilterBound)jarg4; 
  result = (operations_research::IntVarLocalSearchFilter *)(arg1)->MakeSumObjectiveFilter((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::IntVarLocalSearchFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1makeSumObjectiveFilter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jobject jarg4, jint jarg5) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::IndexEvaluator3 arg4 ;
  operations_research::Solver::LocalSearchFilterBound arg5 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::IntVarLocalSearchFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  jclass jarg4_object_class = jenv->GetObjectClass(jarg4);
  if (nullptr == jarg4_object_class) return 0;
  jmethodID jarg4_method_id = jenv->GetMethodID(
    jarg4_object_class, "applyAsLong", "(JJJ)J");
  assert(jarg4_method_id != nullptr);
  // jarg4 will be deleted once this function return.
  jobject jarg4_object = jenv->NewGlobalRef(jarg4);
  
  // Global JNI reference deleter
  auto jarg4_guard = std::make_shared<GlobalRefGuard>(jenv, jarg4_object);
  arg4 = [jenv, jarg4_object, jarg4_method_id, jarg4_guard](long t,long u,long v) -> long {
    return jenv->CallLongMethod(jarg4_object, jarg4_method_id, (jlong)t,(jlong)u,(jlong)v);
  };
  
  arg5 = (operations_research::Solver::LocalSearchFilterBound)jarg5; 
  result = (operations_research::IntVarLocalSearchFilter *)(arg1)->MakeSumObjectiveFilter((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,arg5);
  *(operations_research::IntVarLocalSearchFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1topPeriodicCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->TopPeriodicCheck();
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1topProgressPercent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int)(arg1)->TopProgressPercent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1pushState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->PushState();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1popState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->PopState();
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1searchDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int)((operations_research::Solver const *)arg1)->SearchDepth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1searchLeftDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int)((operations_research::Solver const *)arg1)->SearchLeftDepth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1solveDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int)((operations_research::Solver const *)arg1)->SolveDepth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1rand64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)(arg1)->Rand64(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1rand32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int32 arg2 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int32)jarg2; 
  result = (int32)(arg1)->Rand32(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1reSeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->ReSeed(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1exportProfilingOverview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ExportProfilingOverview((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1localSearchProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = ((operations_research::Solver const *)arg1)->LocalSearchProfile();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1currentlyInSolve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (bool)((operations_research::Solver const *)arg1)->CurrentlyInSolve();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1constraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (int)((operations_research::Solver const *)arg1)->constraints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::Solver const *)arg1)->Accept(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1balancing_1decision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Decision *)((operations_research::Solver const *)arg1)->balancing_decision();
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1clear_1fail_1intercept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->clear_fail_intercept();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1SetUseFastLocalSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUseFastLocalSearch(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1UseFastLocalSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (bool)((operations_research::Solver const *)arg1)->UseFastLocalSearch();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1hasName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::PropagationBaseObject *arg2 = (operations_research::PropagationBaseObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::PropagationBaseObject **)&jarg2; 
  result = (bool)((operations_research::Solver const *)arg1)->HasName((operations_research::PropagationBaseObject const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1registerDemon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  operations_research::Demon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  result = (operations_research::Demon *)(arg1)->RegisterDemon(arg2);
  *(operations_research::Demon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1registerIntExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  result = (operations_research::IntExpr *)(arg1)->RegisterIntExpr(arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1registerIntVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (operations_research::IntVar *)(arg1)->RegisterIntVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1registerIntervalVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVar *)(arg1)->RegisterIntervalVar(arg2);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1cache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::ModelCache *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::ModelCache *)((operations_research::Solver const *)arg1)->Cache();
  *(operations_research::ModelCache **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1instrumentsDemons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (bool)((operations_research::Solver const *)arg1)->InstrumentsDemons();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1isProfilingEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (bool)((operations_research::Solver const *)arg1)->IsProfilingEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1isLocalSearchProfilingEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (bool)((operations_research::Solver const *)arg1)->IsLocalSearchProfilingEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1instrumentsVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (bool)((operations_research::Solver const *)arg1)->InstrumentsVariables();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1nameAllVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (bool)((operations_research::Solver const *)arg1)->NameAllVariables();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1model_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = ((operations_research::Solver const *)arg1)->model_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1getPropagationMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::PropagationMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::PropagationMonitor *)((operations_research::Solver const *)arg1)->GetPropagationMonitor();
  *(operations_research::PropagationMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1addPropagationMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::PropagationMonitor *arg2 = (operations_research::PropagationMonitor *) (operations_research::PropagationMonitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::PropagationMonitor **)&jarg2; 
  (arg1)->AddPropagationMonitor(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1getLocalSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::LocalSearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::LocalSearchMonitor *)((operations_research::Solver const *)arg1)->GetLocalSearchMonitor();
  *(operations_research::LocalSearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1addLocalSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::LocalSearchMonitor *arg2 = (operations_research::LocalSearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::LocalSearchMonitor **)&jarg2; 
  (arg1)->AddLocalSearchMonitor(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1GetOrCreateLocalSearchState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Assignment *)(arg1)->GetOrCreateLocalSearchState();
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1ClearLocalSearchState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->ClearLocalSearchState();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1tmp_1vector_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64 > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  
  if(jarg2) {
    const int size = jenv->GetArrayLength(jarg2);
    (&arg2)->clear();
    (&arg2)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg2)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  if (arg1) (arg1)->tmp_vector_ = arg2;
}


SWIGEXPORT jlongArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1tmp_1vector_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result =  ((arg1)->tmp_vector_);
  
  const std::vector<int64>& vec = result;
  jresult = jenv->NewLongArray(vec.size());
  jenv->SetLongArrayRegion(jresult, 0, vec.size(), reinterpret_cast<const jlong*>(vec.data()));
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1castExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (operations_research::IntExpr *)((operations_research::Solver const *)arg1)->CastExpression((operations_research::IntVar const *)arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1finishCurrentSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->FinishCurrentSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1restartCurrentSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->RestartCurrentSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1shouldFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->ShouldFail();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Solver_1checkFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  (arg1)->CheckFail();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_zero(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  result = (int64)operations_research::Zero();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_One(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  result = (int64)operations_research::One();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1BaseObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::BaseObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::BaseObject *)new operations_research::BaseObject();
  *(operations_research::BaseObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1BaseObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::BaseObject *arg1 = (operations_research::BaseObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::BaseObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseObject_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::BaseObject *arg1 = (operations_research::BaseObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseObject **)&jarg1; 
  result = ((operations_research::BaseObject const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1PropagationBaseObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  operations_research::PropagationBaseObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::PropagationBaseObject *)new operations_research::PropagationBaseObject(arg1);
  *(operations_research::PropagationBaseObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1PropagationBaseObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  result = ((operations_research::PropagationBaseObject const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1solver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  operations_research::Solver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  result = (operations_research::Solver *)((operations_research::PropagationBaseObject const *)arg1)->solver();
  *(operations_research::Solver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1freezeQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  (arg1)->FreezeQueue();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1unfreezeQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  (arg1)->UnfreezeQueue();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1enqueueDelayedDemon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->EnqueueDelayedDemon(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1enqueueVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->EnqueueVar(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1reset_1action_1on_1fail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  (arg1)->reset_action_on_fail();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1set_1variable_1to_1clean_1on_1fail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->set_variable_to_clean_on_fail(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  result = ((operations_research::PropagationBaseObject const *)arg1)->name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1hasName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  result = (bool)((operations_research::PropagationBaseObject const *)arg1)->HasName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1baseName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationBaseObject **)&jarg1; 
  result = ((operations_research::PropagationBaseObject const *)arg1)->BaseName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1Decision(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::Decision *)new SwigDirector_Decision(jenv);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1Decision(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Decision **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Decision **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  (arg1)->Apply(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1refute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Decision **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  (arg1)->Refute(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Decision **)&jarg1; 
  result = ((operations_research::Decision const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1toStringSwigExplicitDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Decision **)&jarg1; 
  result = ((operations_research::Decision const *)arg1)->operations_research::Decision::DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  operations_research::DecisionVisitor *arg2 = (operations_research::DecisionVisitor *) (operations_research::DecisionVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Decision **)&jarg1; 
  arg2 = *(operations_research::DecisionVisitor **)&jarg2; 
  ((operations_research::Decision const *)arg1)->Accept(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1acceptSwigExplicitDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  operations_research::DecisionVisitor *arg2 = (operations_research::DecisionVisitor *) (operations_research::DecisionVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Decision **)&jarg1; 
  arg2 = *(operations_research::DecisionVisitor **)&jarg2; 
  ((operations_research::Decision const *)arg1)->operations_research::Decision::Accept(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::Decision *obj = *((operations_research::Decision **)&objarg);
  (void)jcls;
  SwigDirector_Decision *director = dynamic_cast<SwigDirector_Decision *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::Decision *obj = *((operations_research::Decision **)&objarg);
  SwigDirector_Decision *director = dynamic_cast<SwigDirector_Decision *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1DecisionVisitor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::DecisionVisitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DecisionVisitor *)new SwigDirector_DecisionVisitor(jenv);
  *(operations_research::DecisionVisitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1DecisionVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitSetVariableValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->VisitSetVariableValue(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitSetVariableValueSwigExplicitDecisionVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->operations_research::DecisionVisitor::VisitSetVariableValue(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitSplitVariableDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->VisitSplitVariableDomain(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitSplitVariableDomainSwigExplicitDecisionVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->operations_research::DecisionVisitor::VisitSplitVariableDomain(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitScheduleOrPostpone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->VisitScheduleOrPostpone(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitScheduleOrPostponeSwigExplicitDecisionVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->operations_research::DecisionVisitor::VisitScheduleOrPostpone(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitScheduleOrExpedite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->VisitScheduleOrExpedite(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitScheduleOrExpediteSwigExplicitDecisionVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->operations_research::DecisionVisitor::VisitScheduleOrExpedite(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitRankFirstInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->VisitRankFirstInterval(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitRankFirstIntervalSwigExplicitDecisionVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->operations_research::DecisionVisitor::VisitRankFirstInterval(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitRankLastInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->VisitRankLastInterval(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitRankLastIntervalSwigExplicitDecisionVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->operations_research::DecisionVisitor::VisitRankLastInterval(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitUnknownDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  (arg1)->VisitUnknownDecision();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1visitUnknownDecisionSwigExplicitDecisionVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::DecisionVisitor *arg1 = (operations_research::DecisionVisitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DecisionVisitor **)&jarg1; 
  (arg1)->operations_research::DecisionVisitor::VisitUnknownDecision();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::DecisionVisitor *obj = *((operations_research::DecisionVisitor **)&objarg);
  (void)jcls;
  SwigDirector_DecisionVisitor *director = dynamic_cast<SwigDirector_DecisionVisitor *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::DecisionVisitor *obj = *((operations_research::DecisionVisitor **)&objarg);
  SwigDirector_DecisionVisitor *director = dynamic_cast<SwigDirector_DecisionVisitor *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1DecisionBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::DecisionBuilder *)new SwigDirector_DecisionBuilder(jenv);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1DecisionBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::DecisionBuilder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionBuilder_1nextWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  operations_research::Decision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::DecisionBuilder **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  result = (operations_research::Decision *)(arg1)->Next(arg2);
  *(operations_research::Decision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionBuilder_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DecisionBuilder **)&jarg1; 
  result = ((operations_research::DecisionBuilder const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionBuilder_1toStringSwigExplicitDecisionBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DecisionBuilder **)&jarg1; 
  result = ((operations_research::DecisionBuilder const *)arg1)->operations_research::DecisionBuilder::DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionBuilder_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::DecisionBuilder *obj = *((operations_research::DecisionBuilder **)&objarg);
  (void)jcls;
  SwigDirector_DecisionBuilder *director = dynamic_cast<SwigDirector_DecisionBuilder *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionBuilder_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::DecisionBuilder *obj = *((operations_research::DecisionBuilder **)&objarg);
  SwigDirector_DecisionBuilder *director = dynamic_cast<SwigDirector_DecisionBuilder *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1Demon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Demon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Demon_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Demon **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  (arg1)->Run(arg2);
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Demon_1priority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  operations_research::Solver::DemonPriority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Demon **)&jarg1; 
  result = (operations_research::Solver::DemonPriority)((operations_research::Demon const *)arg1)->priority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Demon_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Demon **)&jarg1; 
  result = ((operations_research::Demon const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Demon_1inhibit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Demon **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  (arg1)->inhibit(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Demon_1desinhibit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Demon **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  (arg1)->desinhibit(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kAbs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kAbs;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kAbsEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kAbsEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kAllDifferent_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kAllDifferent;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kAllowedAssignments_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kAllowedAssignments;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kAtMost_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kAtMost;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIndexOf_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIndexOf;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kBetween_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kBetween;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kConditionalExpr_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kConditionalExpr;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCircuit_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCircuit;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kConvexPiecewise_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kConvexPiecewise;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCountEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCountEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCover_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCover;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCumulative_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCumulative;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDeviation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDeviation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDifference_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDifference;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDisjunctive_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDisjunctive;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDistribute_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDistribute;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDivide_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDivide;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDurationExpr_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDurationExpr;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kElement_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kElement;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kElementEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kElementEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kEndExpr_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kEndExpr;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kEquality_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kEquality;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kFalseConstraint_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kFalseConstraint;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kGlobalCardinality_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kGlobalCardinality;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kGreater_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kGreater;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kGreaterOrEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kGreaterOrEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIntegerVariable_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIntegerVariable;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIntervalBinaryRelation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIntervalBinaryRelation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIntervalDisjunction_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIntervalDisjunction;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIntervalUnaryRelation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIntervalUnaryRelation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIntervalVariable_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIntervalVariable;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kInversePermutation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kInversePermutation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIsBetween_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIsBetween;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIsDifferent_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIsDifferent;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIsEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIsEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIsGreater_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIsGreater;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIsGreaterOrEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIsGreaterOrEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIsLess_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIsLess;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIsLessOrEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIsLessOrEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIsMember_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIsMember;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kLess_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kLess;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kLessOrEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kLessOrEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kLexLess_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kLexLess;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kLinkExprVar_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kLinkExprVar;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMapDomain_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMapDomain;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMax_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMax;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMaxEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMaxEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMember_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMember;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMin_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMin;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMinEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMinEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kModulo_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kModulo;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kNoCycle_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kNoCycle;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kNonEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kNonEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kNotBetween_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kNotBetween;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kNotMember_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kNotMember;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kNullIntersect_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kNullIntersect;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kOpposite_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kOpposite;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kPack_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kPack;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kPathCumul_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kPathCumul;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDelayedPathCumul_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDelayedPathCumul;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kPerformedExpr_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kPerformedExpr;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kPower_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kPower;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kProduct_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kProduct;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kScalProd_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kScalProd;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kScalProdEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kScalProdEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kScalProdGreaterOrEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kScalProdGreaterOrEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kScalProdLessOrEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kScalProdLessOrEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSemiContinuous_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSemiContinuous;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSequenceVariable_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSequenceVariable;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSortingConstraint_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSortingConstraint;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSquare_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSquare;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kStartExpr_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kStartExpr;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSum_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSum;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSumEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSumEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSumGreaterOrEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSumGreaterOrEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSumLessOrEqual_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSumLessOrEqual;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kTrace_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kTrace;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kTransition_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kTransition;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kTrueConstraint_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kTrueConstraint;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kVarBoundWatcher_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kVarBoundWatcher;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kVarValueWatcher_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kVarValueWatcher;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCountAssignedItemsExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCountAssignedItemsExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCountUsedBinsExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCountUsedBinsExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kInt64ToBoolExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kInt64ToBoolExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kInt64ToInt64Extension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kInt64ToInt64Extension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kObjectiveExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kObjectiveExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSearchLimitExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSearchLimitExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kUsageEqualVariableExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kUsageEqualVariableExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kUsageLessConstantExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kUsageLessConstantExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kVariableGroupExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kVariableGroupExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kVariableUsageLessConstantExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kVariableUsageLessConstantExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kWeightedSumOfAssignedEqualVariableExtension_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kWeightedSumOfAssignedEqualVariableExtension;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kActiveArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kActiveArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kAssumePathsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kAssumePathsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kBranchesLimitArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kBranchesLimitArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCapacityArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCapacityArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCardsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCardsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCoefficientsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCoefficientsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCountArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCountArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCumulativeArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCumulativeArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kCumulsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kCumulsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDemandsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDemandsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDurationMaxArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDurationMaxArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDurationMinArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDurationMinArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kEarlyCostArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kEarlyCostArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kEarlyDateArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kEarlyDateArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kEndMaxArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kEndMaxArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kEndMinArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kEndMinArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kEndsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kEndsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kExpressionArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kExpressionArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kFailuresLimitArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kFailuresLimitArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kFinalStatesArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kFinalStatesArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kFixedChargeArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kFixedChargeArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIndex2Argument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIndex2Argument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIndexArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIndexArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kInitialState_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kInitialState;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIntervalArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIntervalArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kIntervalsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kIntervalsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kLateCostArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kLateCostArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kLateDateArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kLateDateArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kLeftArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kLeftArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMaxArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMaxArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMaximizeArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMaximizeArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMinArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMinArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kModuloArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kModuloArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kNextsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kNextsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kOptionalArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kOptionalArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kPartialArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kPartialArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kPositionXArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kPositionXArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kPositionYArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kPositionYArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kRangeArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kRangeArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kRelationArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kRelationArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kRightArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kRightArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSequenceArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSequenceArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSequencesArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSequencesArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSizeArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSizeArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSizeXArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSizeXArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSizeYArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSizeYArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSmartTimeCheckArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSmartTimeCheckArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSolutionLimitArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSolutionLimitArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kStartMaxArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kStartMaxArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kStartMinArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kStartMinArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kStartsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kStartsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kStepArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kStepArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kTargetArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kTargetArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kTimeLimitArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kTimeLimitArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kTransitsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kTransitsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kTuplesArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kTuplesArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kValueArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kValueArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kValuesArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kValuesArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kVariableArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kVariableArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kVarsArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kVarsArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kEvaluatorArgument_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kEvaluatorArgument;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kMirrorOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kMirrorOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kRelaxedMaxOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kRelaxedMaxOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kRelaxedMinOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kRelaxedMinOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kSumOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kSumOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kDifferenceOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kDifferenceOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kProductOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kProductOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kStartSyncOnStartOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kStartSyncOnStartOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kStartSyncOnEndOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kStartSyncOnEndOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1kTraceOperation_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::ModelVisitor::kTraceOperation;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1ModelVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1beginVisitModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->BeginVisitModel((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1endVisitModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->EndVisitModel((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1beginVisitConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::Constraint *arg3 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(operations_research::Constraint **)&jarg3; 
  (arg1)->BeginVisitConstraint((std::string const &)*arg2,(operations_research::Constraint const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1endVisitConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::Constraint *arg3 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(operations_research::Constraint **)&jarg3; 
  (arg1)->EndVisitConstraint((std::string const &)*arg2,(operations_research::Constraint const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1beginVisitExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->BeginVisitExtension((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1endVisitExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->EndVisitExtension((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1beginVisitIntegerExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  (arg1)->BeginVisitIntegerExpression((std::string const &)*arg2,(operations_research::IntExpr const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1endVisitIntegerExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  (arg1)->EndVisitIntegerExpression((std::string const &)*arg2,(operations_research::IntExpr const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntegerVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  (arg1)->VisitIntegerVariable((operations_research::IntVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntegerVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::string *arg3 = 0 ;
  int64 arg4 ;
  operations_research::IntVar *arg5 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int64)jarg4; 
  arg5 = *(operations_research::IntVar **)&jarg5; 
  (arg1)->VisitIntegerVariable((operations_research::IntVar const *)arg2,(std::string const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntervalVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  std::string *arg3 = 0 ;
  int64 arg4 ;
  operations_research::IntervalVar *arg5 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int64)jarg4; 
  arg5 = *(operations_research::IntervalVar **)&jarg5; 
  (arg1)->VisitIntervalVariable((operations_research::IntervalVar const *)arg2,(std::string const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitSequenceVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  (arg1)->VisitSequenceVariable((operations_research::SequenceVar const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntegerArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64)jarg3; 
  (arg1)->VisitIntegerArgument((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntegerArrayArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlongArray jarg3) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->VisitIntegerArrayArgument((std::string const &)*arg2,(std::vector< int64 > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntegerMatrixArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::IntTupleSet *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(operations_research::IntTupleSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::IntTupleSet const & reference is null");
    return ;
  } 
  (arg1)->VisitIntegerMatrixArgument((std::string const &)*arg2,(operations_research::IntTupleSet const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntegerExpressionArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  (arg1)->VisitIntegerExpressionArgument((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntegerVariableArrayArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobjectArray jarg3) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  (arg1)->VisitIntegerVariableArrayArgument((std::string const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntervalArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  (arg1)->VisitIntervalArgument((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitIntervalArrayArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobjectArray jarg3) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< operations_research::IntervalVar * > *arg3 = 0 ;
  std::vector< operations_research::IntervalVar * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  (arg1)->VisitIntervalArrayArgument((std::string const &)*arg2,(std::vector< operations_research::IntervalVar * > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitSequenceArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::SequenceVar *arg3 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(operations_research::SequenceVar **)&jarg3; 
  (arg1)->VisitSequenceArgument((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1visitSequenceArrayArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobjectArray jarg3) {
  operations_research::ModelVisitor *arg1 = (operations_research::ModelVisitor *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< operations_research::SequenceVar * > *arg3 = 0 ;
  std::vector< operations_research::SequenceVar * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelVisitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SequenceVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SequenceVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  (arg1)->VisitSequenceArrayArgument((std::string const &)*arg2,(std::vector< operations_research::SequenceVar * > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1ModelVisitor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::ModelVisitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelVisitor *)new operations_research::ModelVisitor();
  *(operations_research::ModelVisitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1Constraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Constraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Constraint_1post(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Constraint **)&jarg1; 
  (arg1)->Post();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Constraint_1initialPropagate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Constraint **)&jarg1; 
  (arg1)->InitialPropagate();
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Constraint_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Constraint **)&jarg1; 
  result = ((operations_research::Constraint const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Constraint_1postAndPropagate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Constraint **)&jarg1; 
  (arg1)->PostAndPropagate();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Constraint_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Constraint **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::Constraint const *)arg1)->Accept(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Constraint_1isCastConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Constraint **)&jarg1; 
  result = (bool)((operations_research::Constraint const *)arg1)->IsCastConstraint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Constraint_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Constraint **)&jarg1; 
  result = (operations_research::IntVar *)(arg1)->Var();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1CastConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::CastConstraint *arg1 = (operations_research::CastConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::CastConstraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CastConstraint_1target_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::CastConstraint *arg1 = (operations_research::CastConstraint *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::CastConstraint **)&jarg1; 
  result = (operations_research::IntVar *)((operations_research::CastConstraint const *)arg1)->target_var();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1kNoProgress_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)operations_research::SearchMonitor::kNoProgress;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::SearchMonitor *)new SwigDirector_SearchMonitor(jenv,arg1);
  *(operations_research::SearchMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1enterSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->EnterSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1enterSearchSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::EnterSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1restartSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->RestartSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1restartSearchSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::RestartSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1exitSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->ExitSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1exitSearchSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::ExitSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1beginNextDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  (arg1)->BeginNextDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1beginNextDecisionSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  (arg1)->operations_research::SearchMonitor::BeginNextDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1endNextDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::Decision *arg3 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::Decision **)&jarg3; 
  (arg1)->EndNextDecision(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1endNextDecisionSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  operations_research::Decision *arg3 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  arg3 = *(operations_research::Decision **)&jarg3; 
  (arg1)->operations_research::SearchMonitor::EndNextDecision(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1applyDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  (arg1)->ApplyDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1applyDecisionSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  (arg1)->operations_research::SearchMonitor::ApplyDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1refuteDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  (arg1)->RefuteDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1refuteDecisionSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  (arg1)->operations_research::SearchMonitor::RefuteDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1afterDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AfterDecision(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1afterDecisionSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->operations_research::SearchMonitor::AfterDecision(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1beginFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->BeginFail();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1beginFailSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::BeginFail();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1endFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->EndFail();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1endFailSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::EndFail();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1beginInitialPropagation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->BeginInitialPropagation();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1beginInitialPropagationSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::BeginInitialPropagation();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1endInitialPropagation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->EndInitialPropagation();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1endInitialPropagationSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::EndInitialPropagation();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1acceptSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (bool)(arg1)->AcceptSolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1acceptSolutionSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (bool)(arg1)->operations_research::SearchMonitor::AcceptSolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1atSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (bool)(arg1)->AtSolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1atSolutionSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (bool)(arg1)->operations_research::SearchMonitor::AtSolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1noMoreSolutions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->NoMoreSolutions();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1noMoreSolutionsSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::NoMoreSolutions();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1localOptimum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (bool)(arg1)->LocalOptimum();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1localOptimumSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (bool)(arg1)->operations_research::SearchMonitor::LocalOptimum();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1acceptDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  result = (bool)(arg1)->AcceptDelta(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1acceptDeltaSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  result = (bool)(arg1)->operations_research::SearchMonitor::AcceptDelta(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1acceptNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->AcceptNeighbor();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1acceptNeighborSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::AcceptNeighbor();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1AcceptUncheckedNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->AcceptUncheckedNeighbor();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1AcceptUncheckedNeighborSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::AcceptUncheckedNeighbor();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1IsUncheckedSolutionLimitReached(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (bool)(arg1)->IsUncheckedSolutionLimitReached();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1IsUncheckedSolutionLimitReachedSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (bool)(arg1)->operations_research::SearchMonitor::IsUncheckedSolutionLimitReached();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1solver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Solver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (operations_research::Solver *)((operations_research::SearchMonitor const *)arg1)->solver();
  *(operations_research::Solver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1periodicCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->PeriodicCheck();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1periodicCheckSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::PeriodicCheck();
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1progressPercent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (int)(arg1)->ProgressPercent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1progressPercentSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  result = (int)(arg1)->operations_research::SearchMonitor::ProgressPercent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::SearchMonitor const *)arg1)->Accept(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1acceptSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::SearchMonitor const *)arg1)->operations_research::SearchMonitor::Accept(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1install(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->Install();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1installSwigExplicitSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchMonitor **)&jarg1; 
  (arg1)->operations_research::SearchMonitor::Install();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::SearchMonitor *obj = *((operations_research::SearchMonitor **)&objarg);
  (void)jcls;
  SwigDirector_SearchMonitor *director = dynamic_cast<SwigDirector_SearchMonitor *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::SearchMonitor *obj = *((operations_research::SearchMonitor **)&objarg);
  SwigDirector_SearchMonitor *director = dynamic_cast<SwigDirector_SearchMonitor *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  result = (int64)((operations_research::IntExpr const *)arg1)->Min();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  result = (int64)((operations_research::IntExpr const *)arg1)->Max();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64 *arg2 = (int64 *) 0 ;
  int64 *arg3 = (int64 *) 0 ;
  int64 temp2 ;
  int64 temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (int64)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp3 = (int64)0;
    arg3 = &temp3; 
  }
  (arg1)->Range(arg2,arg3);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetValue(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1bound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  result = (bool)((operations_research::IntExpr const *)arg1)->Bound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1isVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  result = (bool)((operations_research::IntExpr const *)arg1)->IsVar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  result = (operations_research::IntVar *)(arg1)->Var();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1varWithName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::IntVar *)(arg1)->VarWithName((std::string const &)*arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1whenRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1whenRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntExpr **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::IntExpr const *)arg1)->Accept(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntVarIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntVarIterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarIterator_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarIterator **)&jarg1; 
  (arg1)->Init();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarIterator_1ok(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarIterator **)&jarg1; 
  result = (bool)((operations_research::IntVarIterator const *)arg1)->Ok();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarIterator_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarIterator **)&jarg1; 
  result = (int64)((operations_research::IntVarIterator const *)arg1)->Value();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarIterator **)&jarg1; 
  (arg1)->Next();
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarIterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarIterator **)&jarg1; 
  result = ((operations_research::IntVarIterator const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntVar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1isVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (bool)((operations_research::IntVar const *)arg1)->IsVar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (operations_research::IntVar *)(arg1)->Var();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (int64)((operations_research::IntVar const *)arg1)->Value();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1removeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->RemoveValue(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1removeInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->RemoveInterval(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1removeValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->RemoveValues((std::vector< int64 > const &)*arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetValues((std::vector< int64 > const &)*arg2);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1whenBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenBound(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1whenBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenBound(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1whenDomain_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenDomain(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1whenDomain_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenDomain(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  uint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (uint64)((operations_research::IntVar const *)arg1)->Size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::IntVar const *)arg1)->Contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1makeHoleIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  bool arg2 ;
  operations_research::IntVarIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (operations_research::IntVarIterator *)((operations_research::IntVar const *)arg1)->MakeHoleIterator(arg2);
  *(operations_research::IntVarIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1makeDomainIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  bool arg2 ;
  operations_research::IntVarIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (operations_research::IntVarIterator *)((operations_research::IntVar const *)arg1)->MakeDomainIterator(arg2);
  *(operations_research::IntVarIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1oldMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (int64)((operations_research::IntVar const *)arg1)->OldMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1oldMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (int64)((operations_research::IntVar const *)arg1)->OldMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1varType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (int)((operations_research::IntVar const *)arg1)->VarType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::IntVar const *)arg1)->Accept(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->IsEqual(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1isDifferent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->IsDifferent(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1isGreaterOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->IsGreaterOrEqual(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1isLessOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->IsLessOrEqual(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (int)((operations_research::IntVar const *)arg1)->index();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SolutionCollector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (operations_research::SolutionCollector *)new operations_research::SolutionCollector(arg1,(operations_research::Assignment const *)arg2);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SolutionCollector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::SolutionCollector *)new operations_research::SolutionCollector(arg1);
  *(operations_research::SolutionCollector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SolutionCollector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  result = ((operations_research::SolutionCollector const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->Add(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->Add((std::vector< operations_research::IntVar * > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  (arg1)->Add(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->Add((std::vector< operations_research::IntervalVar * > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  (arg1)->Add(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1add_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  std::vector< operations_research::SequenceVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SequenceVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SequenceVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->Add((std::vector< operations_research::SequenceVar * > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1addObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->AddObjective(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1enterSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  (arg1)->EnterSearch();
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1solutionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  result = (int)((operations_research::SolutionCollector const *)arg1)->solution_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1solution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::Assignment *)((operations_research::SolutionCollector const *)arg1)->solution(arg2);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1wallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->wall_time(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1branches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->branches(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1failures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->failures(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1objectiveValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->objective_value(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->Value(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1startValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->StartValue(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1endValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->EndValue(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1durationValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->DurationValue(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1performedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::IntervalVar **)&jarg3; 
  result = (int64)((operations_research::SolutionCollector const *)arg1)->PerformedValue(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1forwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jintArray jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::SequenceVar *arg3 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::SequenceVar **)&jarg3; 
  result = (std::vector< int > *) &((operations_research::SolutionCollector const *)arg1)->ForwardSequence(arg2,arg3);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1backwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jintArray jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::SequenceVar *arg3 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::SequenceVar **)&jarg3; 
  result = (std::vector< int > *) &((operations_research::SolutionCollector const *)arg1)->BackwardSequence(arg2,arg3);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1unperformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jintArray jresult = 0 ;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::SequenceVar *arg3 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::SolutionCollector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(operations_research::SequenceVar **)&jarg3; 
  result = (std::vector< int > *) &((operations_research::SolutionCollector const *)arg1)->Unperformed(arg2,arg3);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1OptimizeVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  operations_research::OptimizeVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  result = (operations_research::OptimizeVar *)new operations_research::OptimizeVar(arg1,arg2,arg3,arg4);
  *(operations_research::OptimizeVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1OptimizeVar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1best(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  result = (int64)((operations_research::OptimizeVar const *)arg1)->best();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  result = (operations_research::IntVar *)((operations_research::OptimizeVar const *)arg1)->Var();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1acceptDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  result = (bool)(arg1)->AcceptDelta(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1enterSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  (arg1)->EnterSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1beginNextDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  (arg1)->BeginNextDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1refuteDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  (arg1)->RefuteDecision(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1atSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  result = (bool)(arg1)->AtSolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1acceptSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  result = (bool)(arg1)->AcceptSolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  result = ((operations_research::OptimizeVar const *)arg1)->Print();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  result = ((operations_research::OptimizeVar const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::OptimizeVar const *)arg1)->Accept(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1applyBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::OptimizeVar **)&jarg1; 
  (arg1)->ApplyBound();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SearchLimit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1crossed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  result = (bool)((operations_research::SearchLimit const *)arg1)->crossed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  result = (bool)(arg1)->Check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  operations_research::SearchLimit *arg2 = (operations_research::SearchLimit *) (operations_research::SearchLimit *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  arg2 = *(operations_research::SearchLimit **)&jarg2; 
  (arg1)->Copy((operations_research::SearchLimit const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1makeClone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  operations_research::SearchLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  result = (operations_research::SearchLimit *)((operations_research::SearchLimit const *)arg1)->MakeClone();
  *(operations_research::SearchLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1enterSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  (arg1)->EnterSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1beginNextDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) (operations_research::DecisionBuilder *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  arg2 = *(operations_research::DecisionBuilder **)&jarg2; 
  (arg1)->BeginNextDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1periodicCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  (arg1)->PeriodicCheck();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1refuteDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  (arg1)->RefuteDecision(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLimit **)&jarg1; 
  result = ((operations_research::SearchLimit const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RegularLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  absl::Duration arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  bool arg6 ;
  bool arg7 ;
  absl::Duration *argp2 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  argp2 = *(absl::Duration **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null absl::Duration");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (operations_research::RegularLimit *)new operations_research::RegularLimit(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RegularLimit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  operations_research::SearchLimit *arg2 = (operations_research::SearchLimit *) (operations_research::SearchLimit *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  arg2 = *(operations_research::SearchLimit **)&jarg2; 
  (arg1)->Copy((operations_research::SearchLimit const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1makeClone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  operations_research::SearchLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (operations_research::SearchLimit *)((operations_research::RegularLimit const *)arg1)->MakeClone();
  *(operations_research::SearchLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1MakeIdenticalClone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (operations_research::RegularLimit *)((operations_research::RegularLimit const *)arg1)->MakeIdenticalClone();
  *(operations_research::RegularLimit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (bool)(arg1)->Check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1exitSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  (arg1)->ExitSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1UpdateLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  (arg1)->UpdateLimits(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1wall_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (int64)((operations_research::RegularLimit const *)arg1)->wall_time();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1branches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (int64)((operations_research::RegularLimit const *)arg1)->branches();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1failures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (int64)((operations_research::RegularLimit const *)arg1)->failures();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1solutions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (int64)((operations_research::RegularLimit const *)arg1)->solutions();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1IsUncheckedSolutionLimitReached(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (bool)(arg1)->IsUncheckedSolutionLimitReached();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1progressPercent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = (int)(arg1)->ProgressPercent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  result = ((operations_research::RegularLimit const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RegularLimit *arg1 = (operations_research::RegularLimit *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RegularLimit **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::RegularLimit const *)arg1)->Accept(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1kMinValidValue_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  result = (int64)(int64)operations_research::IntervalVar::kMinValidValue;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1kMaxValidValue_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  result = (int64)(int64)operations_research::IntervalVar::kMaxValidValue;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntervalVar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1startMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->StartMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1startMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->StartMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setStartMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetStartMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setStartMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetStartMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setStartRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetStartRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1oldStartMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->OldStartMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1oldStartMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->OldStartMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenStartRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenStartRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenStartRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenStartRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenStartBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenStartBound(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenStartBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenStartBound(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1durationMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->DurationMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1durationMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->DurationMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setDurationMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetDurationMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setDurationMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetDurationMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setDurationRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetDurationRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1oldDurationMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->OldDurationMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1oldDurationMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->OldDurationMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenDurationRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenDurationRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenDurationRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenDurationRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenDurationBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenDurationBound(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenDurationBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenDurationBound(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1endMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->EndMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1endMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->EndMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setEndMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetEndMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setEndMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetEndMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setEndRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetEndRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1oldEndMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->OldEndMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1oldEndMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (int64)((operations_research::IntervalVar const *)arg1)->OldEndMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenEndRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenEndRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenEndRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenEndRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenEndBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenEndBound(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenEndBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenEndBound(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1mustBePerformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (bool)((operations_research::IntervalVar const *)arg1)->MustBePerformed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1mayBePerformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (bool)((operations_research::IntervalVar const *)arg1)->MayBePerformed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1cannotBePerformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (bool)((operations_research::IntervalVar const *)arg1)->CannotBePerformed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1isPerformedBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (bool)((operations_research::IntervalVar const *)arg1)->IsPerformedBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1setPerformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetPerformed(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1wasPerformedBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (bool)((operations_research::IntervalVar const *)arg1)->WasPerformedBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenPerformedBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenPerformedBound(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenPerformedBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenPerformedBound(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenAnything_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenAnything(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1whenAnything_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->WhenAnything(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1startExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (operations_research::IntExpr *)(arg1)->StartExpr();
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1durationExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (operations_research::IntExpr *)(arg1)->DurationExpr();
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1endExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (operations_research::IntExpr *)(arg1)->EndExpr();
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1performedExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (operations_research::IntExpr *)(arg1)->PerformedExpr();
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1safeStartExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntExpr *)(arg1)->SafeStartExpr(arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1safeDurationExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntExpr *)(arg1)->SafeDurationExpr(arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1safeEndExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64 arg2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntExpr *)(arg1)->SafeEndExpr(arg2);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::IntervalVar const *)arg1)->Accept(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SequenceVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jobjectArray jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  std::vector< operations_research::IntVar * > result3 ;
  operations_research::SequenceVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (operations_research::SequenceVar *)new operations_research::SequenceVar(arg1,(std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::string const &)*arg4);
  *(operations_research::SequenceVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SequenceVar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  result = ((operations_research::SequenceVar const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1rankFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RankFirst(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1rankNotFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RankNotFirst(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1rankLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RankLast(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1rankNotLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RankNotLast(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1rankSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jintArray jarg4) {
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->RankSequence((std::vector< int > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1interval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::IntervalVar *)((operations_research::SequenceVar const *)arg1)->Interval(arg2);
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::IntVar *)((operations_research::SequenceVar const *)arg1)->Next(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  result = (int64)((operations_research::SequenceVar const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::SequenceVar const *)arg1)->Accept(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1AssignmentElement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::AssignmentElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::AssignmentElement *)new operations_research::AssignmentElement();
  *(operations_research::AssignmentElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentElement_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentElement *arg1 = (operations_research::AssignmentElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentElement **)&jarg1; 
  (arg1)->Activate();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentElement_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentElement *arg1 = (operations_research::AssignmentElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentElement **)&jarg1; 
  (arg1)->Deactivate();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentElement_1activated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentElement *arg1 = (operations_research::AssignmentElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentElement **)&jarg1; 
  result = (bool)((operations_research::AssignmentElement const *)arg1)->Activated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1AssignmentElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::AssignmentElement *arg1 = (operations_research::AssignmentElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::AssignmentElement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::IntVarElement *)new operations_research::IntVarElement();
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVar **)&jarg1; 
  result = (operations_research::IntVarElement *)new operations_research::IntVarElement(arg1);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->Reset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  result = (operations_research::IntVarElement *)(arg1)->Clone();
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  operations_research::IntVarElement *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  arg2 = *(operations_research::IntVarElement **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::IntVarElement const & reference is null");
    return ;
  } 
  (arg1)->Copy((operations_research::IntVarElement const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  result = (operations_research::IntVar *)((operations_research::IntVarElement const *)arg1)->Var();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  (arg1)->Store();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  (arg1)->Restore();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  result = (int64)((operations_research::IntVarElement const *)arg1)->Min();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetMin(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  result = (int64)((operations_research::IntVarElement const *)arg1)->Max();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetMax(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  result = (int64)((operations_research::IntVarElement const *)arg1)->Value();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1bound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  result = (bool)((operations_research::IntVarElement const *)arg1)->Bound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetRange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  result = ((operations_research::IntVarElement const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntVarElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntVarElement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntervalVarElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::IntervalVarElement *)new operations_research::IntervalVarElement();
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntervalVarElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVar **)&jarg1; 
  result = (operations_research::IntervalVarElement *)new operations_research::IntervalVarElement(arg1);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  (arg1)->Reset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (operations_research::IntervalVarElement *)(arg1)->Clone();
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  operations_research::IntervalVarElement *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = *(operations_research::IntervalVarElement **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::IntervalVarElement const & reference is null");
    return ;
  } 
  (arg1)->Copy((operations_research::IntervalVarElement const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (operations_research::IntervalVar *)((operations_research::IntervalVarElement const *)arg1)->Var();
  *(operations_research::IntervalVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  (arg1)->Store();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  (arg1)->Restore();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1startMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->StartMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1startMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->StartMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1startValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->StartValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1durationMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->DurationMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1durationMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->DurationMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1durationValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->DurationValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1endMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->EndMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1endMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->EndMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1endValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->EndValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1performedMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->PerformedMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1performedMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->PerformedMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1performedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (int64)((operations_research::IntervalVarElement const *)arg1)->PerformedValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setStartMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetStartMin(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setStartMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetStartMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setStartRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetStartRange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setStartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetStartValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setDurationMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetDurationMin(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setDurationMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetDurationMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setDurationRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetDurationRange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setDurationValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetDurationValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setEndMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetEndMin(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setEndMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetEndMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setEndRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetEndRange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setEndValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetEndValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setPerformedMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetPerformedMin(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setPerformedMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetPerformedMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setPerformedRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetPerformedRange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1setPerformedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetPerformedValue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1bound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = (bool)((operations_research::IntervalVarElement const *)arg1)->Bound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  result = ((operations_research::IntervalVarElement const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntervalVarElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntervalVarElement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SequenceVarElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::SequenceVarElement *)new operations_research::SequenceVarElement();
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SequenceVarElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVar **)&jarg1; 
  result = (operations_research::SequenceVarElement *)new operations_research::SequenceVarElement(arg1);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  (arg1)->Reset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  result = (operations_research::SequenceVarElement *)(arg1)->Clone();
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  operations_research::SequenceVarElement *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  arg2 = *(operations_research::SequenceVarElement **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::SequenceVarElement const & reference is null");
    return ;
  } 
  (arg1)->Copy((operations_research::SequenceVarElement const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  operations_research::SequenceVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  result = (operations_research::SequenceVar *)((operations_research::SequenceVarElement const *)arg1)->Var();
  *(operations_research::SequenceVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  (arg1)->Store();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  (arg1)->Restore();
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1forwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  result = (std::vector< int > *) &((operations_research::SequenceVarElement const *)arg1)->ForwardSequence();
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1backwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  result = (std::vector< int > *) &((operations_research::SequenceVarElement const *)arg1)->BackwardSequence();
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1unperformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  result = (std::vector< int > *) &((operations_research::SequenceVarElement const *)arg1)->Unperformed();
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1setSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jintArray jarg4) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetSequence((std::vector< int > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1setForwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetForwardSequence((std::vector< int > const &)*arg2);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1setBackwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetBackwardSequence((std::vector< int > const &)*arg2);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1setUnperformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetUnperformed((std::vector< int > const &)*arg2);
  {
    delete arg2;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1bound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  result = (bool)((operations_research::SequenceVarElement const *)arg1)->Bound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  result = ((operations_research::SequenceVarElement const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SequenceVarElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SequenceVarElement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1Assignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  result = (operations_research::Assignment *)new operations_research::Assignment(arg1);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1Assignment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (operations_research::Assignment *)new operations_research::Assignment((operations_research::Assignment const *)arg1);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1Assignment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (bool)((operations_research::Assignment const *)arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (int)((operations_research::Assignment const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1numIntVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (int)((operations_research::Assignment const *)arg1)->NumIntVars();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1numIntervalVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (int)((operations_research::Assignment const *)arg1)->NumIntervalVars();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1numSequenceVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (int)((operations_research::Assignment const *)arg1)->NumSequenceVars();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  (arg1)->Store();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  (arg1)->Restore();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->Load((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((operations_research::Assignment const *)arg1)->Save((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1addObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->AddObjective(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1ClearObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  (arg1)->ClearObjective();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1objective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (operations_research::IntVar *)((operations_research::Assignment const *)arg1)->Objective();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1hasObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (bool)((operations_research::Assignment const *)arg1)->HasObjective();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1objectiveMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (int64)((operations_research::Assignment const *)arg1)->ObjectiveMin();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1objectiveMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (int64)((operations_research::Assignment const *)arg1)->ObjectiveMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1objectiveValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (int64)((operations_research::Assignment const *)arg1)->ObjectiveValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1objectiveBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (bool)((operations_research::Assignment const *)arg1)->ObjectiveBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setObjectiveMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetObjectiveMin(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setObjectiveMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetObjectiveMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setObjectiveValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetObjectiveValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setObjectiveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetObjectiveRange(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (operations_research::IntVarElement *)(arg1)->Add(arg2);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->Add((std::vector< operations_research::IntVar * > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1fastAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (operations_research::IntVarElement *)(arg1)->FastAdd(arg2);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->Min((operations_research::IntVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->Max((operations_research::IntVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->Value((operations_research::IntVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1bound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (bool)((operations_research::Assignment const *)arg1)->Bound((operations_research::IntVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetMin((operations_research::IntVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetMax((operations_research::IntVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetRange((operations_research::IntVar const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetValue((operations_research::IntVar const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVarElement *)(arg1)->Add(arg2);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->Add((std::vector< operations_research::IntervalVar * > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1fastAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVarElement *)(arg1)->FastAdd(arg2);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1startMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->StartMin((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1startMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->StartMax((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1startValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->StartValue((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1durationMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->DurationMin((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1durationMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->DurationMax((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1durationValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->DurationValue((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1endMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->EndMin((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1endMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->EndMax((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1endValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->EndValue((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1performedMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->PerformedMin((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1performedMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->PerformedMax((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1performedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (int64)((operations_research::Assignment const *)arg1)->PerformedValue((operations_research::IntervalVar const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setStartMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetStartMin((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setStartMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetStartMax((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setStartRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetStartRange((operations_research::IntervalVar const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setStartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetStartValue((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setDurationMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetDurationMin((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setDurationMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetDurationMax((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setDurationRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetDurationRange((operations_research::IntervalVar const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setDurationValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetDurationValue((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setEndMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetEndMin((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setEndMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetEndMax((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setEndRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetEndRange((operations_research::IntervalVar const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setEndValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetEndValue((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setPerformedMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetPerformedMin((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setPerformedMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetPerformedMax((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setPerformedRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetPerformedRange((operations_research::IntervalVar const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setPerformedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetPerformedValue((operations_research::IntervalVar const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (operations_research::SequenceVarElement *)(arg1)->Add(arg2);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1add_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  std::vector< operations_research::SequenceVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SequenceVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SequenceVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->Add((std::vector< operations_research::SequenceVar * > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1fastAdd_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (operations_research::SequenceVarElement *)(arg1)->FastAdd(arg2);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1forwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jintArray jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (std::vector< int > *) &((operations_research::Assignment const *)arg1)->ForwardSequence((operations_research::SequenceVar const *)arg2);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1backwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jintArray jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (std::vector< int > *) &((operations_research::Assignment const *)arg1)->BackwardSequence((operations_research::SequenceVar const *)arg2);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1unperformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jintArray jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (std::vector< int > *) &((operations_research::Assignment const *)arg1)->Unperformed((operations_research::SequenceVar const *)arg2);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3, jintArray jarg4, jintArray jarg5) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg5) {
    arg5 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetSequence((operations_research::SequenceVar const *)arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setForwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetForwardSequence((operations_research::SequenceVar const *)arg2,(std::vector< int > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setBackwardSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetBackwardSequence((operations_research::SequenceVar const *)arg2,(std::vector< int > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1setUnperformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetUnperformed((operations_research::SequenceVar const *)arg2,(std::vector< int > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1activate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->Activate((operations_research::IntVar const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1deactivate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->Deactivate((operations_research::IntVar const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1activated_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (bool)((operations_research::Assignment const *)arg1)->Activated((operations_research::IntVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1activate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  (arg1)->Activate((operations_research::IntervalVar const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1deactivate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  (arg1)->Deactivate((operations_research::IntervalVar const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1activated_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (bool)((operations_research::Assignment const *)arg1)->Activated((operations_research::IntervalVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1activate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  (arg1)->Activate((operations_research::SequenceVar const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1deactivate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  (arg1)->Deactivate((operations_research::SequenceVar const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1activated_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (bool)((operations_research::Assignment const *)arg1)->Activated((operations_research::SequenceVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1activateObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  (arg1)->ActivateObjective();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1deactivateObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  (arg1)->DeactivateObjective();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1activatedObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (bool)((operations_research::Assignment const *)arg1)->ActivatedObjective();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = ((operations_research::Assignment const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1AreAllElementsBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (bool)((operations_research::Assignment const *)arg1)->AreAllElementsBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1contains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (bool)((operations_research::Assignment const *)arg1)->Contains((operations_research::IntVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1contains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (bool)((operations_research::Assignment const *)arg1)->Contains((operations_research::IntervalVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1contains_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (bool)((operations_research::Assignment const *)arg1)->Contains((operations_research::SequenceVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1copyIntersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  (arg1)->CopyIntersection((operations_research::Assignment const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  (arg1)->Copy((operations_research::Assignment const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1intVarContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment::IntContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (operations_research::Assignment::IntContainer *) &((operations_research::Assignment const *)arg1)->IntVarContainer();
  *(operations_research::Assignment::IntContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1mutableIntVarContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment::IntContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (operations_research::Assignment::IntContainer *)(arg1)->MutableIntVarContainer();
  *(operations_research::Assignment::IntContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1intervalVarContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment::IntervalContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (operations_research::Assignment::IntervalContainer *) &((operations_research::Assignment const *)arg1)->IntervalVarContainer();
  *(operations_research::Assignment::IntervalContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1mutableIntervalVarContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment::IntervalContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (operations_research::Assignment::IntervalContainer *)(arg1)->MutableIntervalVarContainer();
  *(operations_research::Assignment::IntervalContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1sequenceVarContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment::SequenceContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (operations_research::Assignment::SequenceContainer *) &((operations_research::Assignment const *)arg1)->SequenceVarContainer();
  *(operations_research::Assignment::SequenceContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1mutableSequenceVarContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment::SequenceContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  result = (operations_research::Assignment::SequenceContainer *)(arg1)->MutableSequenceVarContainer();
  *(operations_research::Assignment::SequenceContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_setAssignmentFromAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jobject jarg3_, jobjectArray jarg4) {
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  std::vector< operations_research::IntVar * > result4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Assignment **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = *(operations_research::Assignment **)&jarg3; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = &result4;
  }
  operations_research::SetAssignmentFromAssignment(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::Assignment const *)arg3,(std::vector< operations_research::IntVar * > const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1Pack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::Pack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int)jarg3; 
  result = (operations_research::Pack *)new operations_research::Pack(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::Pack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1Pack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Pack **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addWeightedSumLessOrEqualConstantDimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlongArray jarg3) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->AddWeightedSumLessOrEqualConstantDimension((std::vector< int64 > const &)*arg2,(std::vector< int64 > const &)*arg3);
  {
    delete arg2;
  }
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addWeightedSumLessOrEqualConstantDimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlongArray jarg3) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::Solver::IndexEvaluator1 arg2 ;
  std::vector< int64 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(J)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t);
  };
  
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->AddWeightedSumLessOrEqualConstantDimension(arg2,(std::vector< int64 > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addWeightedSumLessOrEqualConstantDimension_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlongArray jarg3) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  std::vector< int64 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(JJ)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t,(jlong)u);
  };
  
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->AddWeightedSumLessOrEqualConstantDimension(arg2,(std::vector< int64 > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addWeightedSumEqualVarDimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jobjectArray jarg3) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  (arg1)->AddWeightedSumEqualVarDimension((std::vector< int64 > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addWeightedSumEqualVarDimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobjectArray jarg3) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(JJ)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t,(jlong)u);
  };
  
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  (arg1)->AddWeightedSumEqualVarDimension(arg2,(std::vector< operations_research::IntVar * > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addSumVariableWeightsLessOrEqualConstantDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->AddSumVariableWeightsLessOrEqualConstantDimension((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addWeightedSumOfAssignedDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jobject jarg3_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  arg3 = *(operations_research::IntVar **)&jarg3; 
  (arg1)->AddWeightedSumOfAssignedDimension((std::vector< int64 > const &)*arg2,arg3);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addCountUsedBinDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->AddCountUsedBinDimension(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1addCountAssignedItemsDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->AddCountAssignedItemsDimension(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1post(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  (arg1)->Post();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1clearAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  (arg1)->ClearAll();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1propagateDelayed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  (arg1)->PropagateDelayed();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1initialPropagate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  (arg1)->InitialPropagate();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1propagate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  (arg1)->Propagate();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1oneDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OneDomain(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  result = ((operations_research::Pack const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1isUndecided(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((operations_research::Pack const *)arg1)->IsUndecided(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1setImpossible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetImpossible(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Assign(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1isAssignedStatusKnown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((operations_research::Pack const *)arg1)->IsAssignedStatusKnown(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1isPossible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((operations_research::Pack const *)arg1)->IsPossible(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1assignVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  int arg3 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::IntVar *)((operations_research::Pack const *)arg1)->AssignVar(arg2,arg3);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1setAssigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAssigned(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1setUnassigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetUnassigned(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1removeAllPossibleFromBin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveAllPossibleFromBin(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1assignAllPossibleToBin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AssignAllPossibleToBin(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1assignFirstPossibleToBin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AssignFirstPossibleToBin(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1assignAllRemainingItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  (arg1)->AssignAllRemainingItems();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1unassignAllRemainingItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  (arg1)->UnassignAllRemainingItems();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) (operations_research::ModelVisitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Pack **)&jarg1; 
  arg2 = *(operations_research::ModelVisitor **)&jarg2; 
  ((operations_research::Pack const *)arg1)->Accept(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1DisjunctiveConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::DisjunctiveConstraint *arg1 = (operations_research::DisjunctiveConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::DisjunctiveConstraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DisjunctiveConstraint_1makeSequenceVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::DisjunctiveConstraint *arg1 = (operations_research::DisjunctiveConstraint *) 0 ;
  operations_research::SequenceVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DisjunctiveConstraint **)&jarg1; 
  result = (operations_research::SequenceVar *)(arg1)->MakeSequenceVar();
  *(operations_research::SequenceVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DisjunctiveConstraint_1setTransitionTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::DisjunctiveConstraint *arg1 = (operations_research::DisjunctiveConstraint *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DisjunctiveConstraint **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(JJ)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t,(jlong)u);
  };
  
  (arg1)->SetTransitionTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DisjunctiveConstraint_1transitionTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::DisjunctiveConstraint *arg1 = (operations_research::DisjunctiveConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::DisjunctiveConstraint **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->TransitionTime(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SolutionPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SolutionPool *arg1 = (operations_research::SolutionPool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SolutionPool **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionPool_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SolutionPool *arg1 = (operations_research::SolutionPool *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SolutionPool **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  (arg1)->Initialize(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionPool_1registerNewSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SolutionPool *arg1 = (operations_research::SolutionPool *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SolutionPool **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  (arg1)->RegisterNewSolution(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionPool_1getNextSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SolutionPool *arg1 = (operations_research::SolutionPool *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SolutionPool **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  (arg1)->GetNextSolution(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionPool_1syncNeeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::SolutionPool *arg1 = (operations_research::SolutionPool *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SolutionPool **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (bool)(arg1)->SyncNeeded(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1BaseIntExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::BaseIntExpr *arg1 = (operations_research::BaseIntExpr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::BaseIntExpr **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseIntExpr_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::BaseIntExpr *arg1 = (operations_research::BaseIntExpr *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseIntExpr **)&jarg1; 
  result = (operations_research::IntVar *)(arg1)->Var();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseIntExpr_1castToVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::BaseIntExpr *arg1 = (operations_research::BaseIntExpr *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseIntExpr **)&jarg1; 
  result = (operations_research::IntVar *)(arg1)->CastToVar();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_UNSPECIFIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::UNSPECIFIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DOMAIN_1INT_1VAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::DOMAIN_INT_VAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BOOLEAN_1VAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::BOOLEAN_VAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CONST_1VAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::CONST_VAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_VAR_1ADD_1CST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::VAR_ADD_CST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_VAR_1TIMES_1CST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::VAR_TIMES_CST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CST_1SUB_1VAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::CST_SUB_VAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OPP_1VAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::OPP_VAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_TRACE_1VAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::VarTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::VarTypes)operations_research::TRACE_VAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1LocalSearchOperator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::LocalSearchOperator *)new SwigDirector_LocalSearchOperator(jenv);
  *(operations_research::LocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1LocalSearchOperator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1nextNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  result = (bool)(arg1)->MakeNextNeighbor(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  (arg1)->Start((operations_research::Assignment const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1resetSwigExplicitLocalSearchOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  (arg1)->operations_research::LocalSearchOperator::Reset();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1HasFragments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  result = (bool)((operations_research::LocalSearchOperator const *)arg1)->HasFragments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1HasFragmentsSwigExplicitLocalSearchOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  result = (bool)((operations_research::LocalSearchOperator const *)arg1)->operations_research::LocalSearchOperator::HasFragments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1HoldsDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  result = (bool)((operations_research::LocalSearchOperator const *)arg1)->HoldsDelta();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1HoldsDeltaSwigExplicitLocalSearchOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchOperator **)&jarg1; 
  result = (bool)((operations_research::LocalSearchOperator const *)arg1)->operations_research::LocalSearchOperator::HoldsDelta();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::LocalSearchOperator *obj = *((operations_research::LocalSearchOperator **)&objarg);
  (void)jcls;
  SwigDirector_LocalSearchOperator *director = dynamic_cast<SwigDirector_LocalSearchOperator *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::LocalSearchOperator *obj = *((operations_research::LocalSearchOperator **)&objarg);
  SwigDirector_LocalSearchOperator *director = dynamic_cast<SwigDirector_LocalSearchOperator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarLocalSearchHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::IntVarLocalSearchHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::IntVarLocalSearchHandler *)new operations_research::IntVarLocalSearchHandler();
  *(operations_research::IntVarLocalSearchHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarLocalSearchHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVarLocalSearchHandler *arg1 = 0 ;
  operations_research::IntVarLocalSearchHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::IntVarLocalSearchHandler const & reference is null");
    return 0;
  } 
  result = (operations_research::IntVarLocalSearchHandler *)new operations_research::IntVarLocalSearchHandler((operations_research::IntVarLocalSearchHandler const &)*arg1);
  *(operations_research::IntVarLocalSearchHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarLocalSearchHandler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  operations_research::IntVarLocalSearchHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchOperator **)&jarg1; 
  result = (operations_research::IntVarLocalSearchHandler *)new operations_research::IntVarLocalSearchHandler(arg1);
  *(operations_research::IntVarLocalSearchHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchHandler_1addToAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  operations_research::IntVarLocalSearchHandler *arg1 = (operations_research::IntVarLocalSearchHandler *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64 arg3 ;
  bool arg4 ;
  std::vector< int > *arg5 = (std::vector< int > *) 0 ;
  int64 arg6 ;
  operations_research::Assignment *arg7 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(operations_research::IntVarLocalSearchHandler **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(std::vector< int > **)&jarg5; 
  arg6 = (int64)jarg6; 
  arg7 = *(operations_research::Assignment **)&jarg7; 
  ((operations_research::IntVarLocalSearchHandler const *)arg1)->AddToAssignment(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchHandler_1ValueFromAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jintArray jarg5) {
  jboolean jresult = 0 ;
  operations_research::IntVarLocalSearchHandler *arg1 = (operations_research::IntVarLocalSearchHandler *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  int64 arg4 ;
  int64 *arg5 = (int64 *) 0 ;
  int64 temp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::IntVarLocalSearchHandler **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp5 = (int64)0;
    arg5 = &temp5; 
  }
  result = (bool)(arg1)->ValueFromAssignment((operations_research::Assignment const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  {
    jint jvalue = (jint)temp5;
    jenv->SetIntArrayRegion(jarg5, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchHandler_1onRevertChanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::IntVarLocalSearchHandler *arg1 = (operations_research::IntVarLocalSearchHandler *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchHandler **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->OnRevertChanges(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchHandler_1onAddVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::IntVarLocalSearchHandler *arg1 = (operations_research::IntVarLocalSearchHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchHandler **)&jarg1; 
  (arg1)->OnAddVars();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntVarLocalSearchHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntVarLocalSearchHandler *arg1 = (operations_research::IntVarLocalSearchHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntVarLocalSearchHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntVarLocalSearchOperatorTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1HoldsDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  result = (bool)((operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > const *)arg1)->HoldsDelta();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1isIncremental(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  result = (bool)((operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > const *)arg1)->IsIncremental();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  result = (int)((operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (long *) &((operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > const *)arg1)->Value(arg2);
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)((operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > const *)arg1)->Var(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1oldValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (long *) &((operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > const *)arg1)->OldValue(arg2);
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  (arg1)->SetValue(arg2,(long const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1activated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > const *)arg1)->Activated(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->Activate(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->Deactivate(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1addVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->AddVars((std::vector< operations_research::IntVar * > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1onStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1; 
  (arg1)->OnStart();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarLocalSearchOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::IntVarLocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::IntVarLocalSearchOperator *)new SwigDirector_IntVarLocalSearchOperator(jenv);
  *(operations_research::IntVarLocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarLocalSearchOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  bool arg2 ;
  std::vector< operations_research::IntVar * > result1 ;
  operations_research::IntVarLocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  arg2 = jarg2 ? true : false; 
  result = (operations_research::IntVarLocalSearchOperator *)new SwigDirector_IntVarLocalSearchOperator(jenv,(std::vector< operations_research::IntVar * > const &)*arg1,arg2);
  *(operations_research::IntVarLocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarLocalSearchOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > result1 ;
  operations_research::IntVarLocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (operations_research::IntVarLocalSearchOperator *)new SwigDirector_IntVarLocalSearchOperator(jenv,(std::vector< operations_research::IntVar * > const &)*arg1);
  *(operations_research::IntVarLocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntVarLocalSearchOperator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntVarLocalSearchOperator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperator_1oneNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  SwigDirector_IntVarLocalSearchOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_IntVarLocalSearchOperator *>(arg1);
  result = (bool)(darg)->MakeOneNeighbor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperator_1oneNeighborSwigExplicitIntVarLocalSearchOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  SwigDirector_IntVarLocalSearchOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_IntVarLocalSearchOperator *>(arg1);
  result = (bool)(darg)->MakeOneNeighborSwigPublic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::IntVarLocalSearchOperator *obj = *((operations_research::IntVarLocalSearchOperator **)&objarg);
  (void)jcls;
  SwigDirector_IntVarLocalSearchOperator *director = dynamic_cast<SwigDirector_IntVarLocalSearchOperator *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::IntVarLocalSearchOperator *obj = *((operations_research::IntVarLocalSearchOperator **)&objarg);
  SwigDirector_IntVarLocalSearchOperator *director = dynamic_cast<SwigDirector_IntVarLocalSearchOperator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SequenceVarLocalSearchHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::SequenceVarLocalSearchHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::SequenceVarLocalSearchHandler *)new operations_research::SequenceVarLocalSearchHandler();
  *(operations_research::SequenceVarLocalSearchHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SequenceVarLocalSearchHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SequenceVarLocalSearchHandler *arg1 = 0 ;
  operations_research::SequenceVarLocalSearchHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarLocalSearchHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::SequenceVarLocalSearchHandler const & reference is null");
    return 0;
  } 
  result = (operations_research::SequenceVarLocalSearchHandler *)new operations_research::SequenceVarLocalSearchHandler((operations_research::SequenceVarLocalSearchHandler const &)*arg1);
  *(operations_research::SequenceVarLocalSearchHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SequenceVarLocalSearchHandler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::SequenceVarLocalSearchOperator *arg1 = (operations_research::SequenceVarLocalSearchOperator *) 0 ;
  operations_research::SequenceVarLocalSearchHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarLocalSearchOperator **)&jarg1; 
  result = (operations_research::SequenceVarLocalSearchHandler *)new operations_research::SequenceVarLocalSearchHandler(arg1);
  *(operations_research::SequenceVarLocalSearchHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchHandler_1addToAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3, jboolean jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  operations_research::SequenceVarLocalSearchHandler *arg1 = (operations_research::SequenceVarLocalSearchHandler *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  std::vector< int > *arg3 = 0 ;
  bool arg4 ;
  std::vector< int > *arg5 = (std::vector< int > *) 0 ;
  int64 arg6 ;
  operations_research::Assignment *arg7 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(operations_research::SequenceVarLocalSearchHandler **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  arg4 = jarg4 ? true : false; 
  arg5 = *(std::vector< int > **)&jarg5; 
  arg6 = (int64)jarg6; 
  arg7 = *(operations_research::Assignment **)&jarg7; 
  ((operations_research::SequenceVarLocalSearchHandler const *)arg1)->AddToAssignment(arg2,(std::vector< int > const &)*arg3,arg4,arg5,arg6,arg7);
  {
    delete arg3;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchHandler_1ValueFromAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  operations_research::SequenceVarLocalSearchHandler *arg1 = (operations_research::SequenceVarLocalSearchHandler *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  operations_research::SequenceVar *arg3 = (operations_research::SequenceVar *) 0 ;
  int64 arg4 ;
  std::vector< int > *arg5 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::SequenceVarLocalSearchHandler **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  arg3 = *(operations_research::SequenceVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = *(std::vector< int > **)&jarg5; 
  result = (bool)(arg1)->ValueFromAssignment((operations_research::Assignment const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchHandler_1onRevertChanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3) {
  operations_research::SequenceVarLocalSearchHandler *arg1 = (operations_research::SequenceVarLocalSearchHandler *) 0 ;
  int64 arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarLocalSearchHandler **)&jarg1; 
  arg2 = (int64)jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->OnRevertChanges(arg2,(std::vector< int > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchHandler_1onAddVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SequenceVarLocalSearchHandler *arg1 = (operations_research::SequenceVarLocalSearchHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SequenceVarLocalSearchHandler **)&jarg1; 
  (arg1)->OnAddVars();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SequenceVarLocalSearchHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SequenceVarLocalSearchHandler *arg1 = (operations_research::SequenceVarLocalSearchHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SequenceVarLocalSearchHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SequenceVarLocalSearchOperatorTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1HoldsDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  result = (bool)((operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > const *)arg1)->HoldsDelta();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1isIncremental(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  result = (bool)((operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > const *)arg1)->IsIncremental();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  result = (int)((operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (std::vector< int > *) &((operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > const *)arg1)->Value(arg2);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  operations_research::SequenceVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::SequenceVar *)((operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > const *)arg1)->Var(arg2);
  *(operations_research::SequenceVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1oldValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (std::vector< int > *) &((operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > const *)arg1)->OldValue(arg2);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3) {
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetValue(arg2,(std::vector< int > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1activated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > const *)arg1)->Activated(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->Activate(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->Deactivate(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1addVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  std::vector< operations_research::SequenceVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SequenceVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SequenceVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->AddVars((std::vector< operations_research::SequenceVar * > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1onStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *arg1 = (operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1; 
  (arg1)->OnStart();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SequenceVarLocalSearchOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::SequenceVarLocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::SequenceVarLocalSearchOperator *)new SwigDirector_SequenceVarLocalSearchOperator(jenv);
  *(operations_research::SequenceVarLocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SequenceVarLocalSearchOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  std::vector< operations_research::SequenceVar * > *arg1 = 0 ;
  std::vector< operations_research::SequenceVar * > result1 ;
  operations_research::SequenceVarLocalSearchOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""SequenceVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::SequenceVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (operations_research::SequenceVarLocalSearchOperator *)new SwigDirector_SequenceVarLocalSearchOperator(jenv,(std::vector< operations_research::SequenceVar * > const &)*arg1);
  *(operations_research::SequenceVarLocalSearchOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SequenceVarLocalSearchOperator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SequenceVarLocalSearchOperator *arg1 = (operations_research::SequenceVarLocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SequenceVarLocalSearchOperator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::SequenceVarLocalSearchOperator *obj = *((operations_research::SequenceVarLocalSearchOperator **)&objarg);
  (void)jcls;
  SwigDirector_SequenceVarLocalSearchOperator *director = dynamic_cast<SwigDirector_SequenceVarLocalSearchOperator *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::SequenceVarLocalSearchOperator *obj = *((operations_research::SequenceVarLocalSearchOperator **)&objarg);
  SwigDirector_SequenceVarLocalSearchOperator *director = dynamic_cast<SwigDirector_SequenceVarLocalSearchOperator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1BaseLns(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > result1 ;
  operations_research::BaseLns *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (operations_research::BaseLns *)new SwigDirector_BaseLns(jenv,(std::vector< operations_research::IntVar * > const &)*arg1);
  *(operations_research::BaseLns **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1BaseLns(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::BaseLns **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1initFragments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseLns **)&jarg1; 
  (arg1)->InitFragments();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1initFragmentsSwigExplicitBaseLns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseLns **)&jarg1; 
  (arg1)->operations_research::BaseLns::InitFragments();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1nextFragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseLns **)&jarg1; 
  result = (bool)(arg1)->NextFragment();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1appendToFragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseLns **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AppendToFragment(arg2);
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1fragmentSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseLns **)&jarg1; 
  result = (int)((operations_research::BaseLns const *)arg1)->FragmentSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1HasFragments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseLns **)&jarg1; 
  result = (bool)((operations_research::BaseLns const *)arg1)->HasFragments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1HasFragmentsSwigExplicitBaseLns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BaseLns **)&jarg1; 
  result = (bool)((operations_research::BaseLns const *)arg1)->operations_research::BaseLns::HasFragments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::BaseLns *obj = *((operations_research::BaseLns **)&objarg);
  (void)jcls;
  SwigDirector_BaseLns *director = dynamic_cast<SwigDirector_BaseLns *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::BaseLns *obj = *((operations_research::BaseLns **)&objarg);
  SwigDirector_BaseLns *director = dynamic_cast<SwigDirector_BaseLns *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1ChangeValue(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > result1 ;
  operations_research::ChangeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (operations_research::ChangeValue *)new SwigDirector_ChangeValue(jenv,(std::vector< operations_research::IntVar * > const &)*arg1);
  *(operations_research::ChangeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1ChangeValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::ChangeValue *arg1 = (operations_research::ChangeValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::ChangeValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ChangeValue_1modifyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::ChangeValue *arg1 = (operations_research::ChangeValue *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ChangeValue **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  result = (int64)(arg1)->ModifyValue(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ChangeValue_1oneNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::ChangeValue *arg1 = (operations_research::ChangeValue *) 0 ;
  SwigDirector_ChangeValue *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ChangeValue **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ChangeValue *>(arg1);
  result = (bool)(darg)->MakeOneNeighbor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ChangeValue_1oneNeighborSwigExplicitChangeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::ChangeValue *arg1 = (operations_research::ChangeValue *) 0 ;
  SwigDirector_ChangeValue *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ChangeValue **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ChangeValue *>(arg1);
  result = (bool)(darg)->MakeOneNeighborSwigPublic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ChangeValue_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::ChangeValue *obj = *((operations_research::ChangeValue **)&objarg);
  (void)jcls;
  SwigDirector_ChangeValue *director = dynamic_cast<SwigDirector_ChangeValue *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ChangeValue_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::ChangeValue *obj = *((operations_research::ChangeValue **)&objarg);
  SwigDirector_ChangeValue *director = dynamic_cast<SwigDirector_ChangeValue *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1PathOperator(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jobjectArray jarg2, jint jarg3, jboolean jarg4, jboolean jarg5, jobject jarg6) {
  jlong jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  std::function< int (int64) > arg6 ;
  std::vector< operations_research::IntVar * > result1 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::PathOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  
  jclass jarg6_object_class = jenv->GetObjectClass(jarg6);
  if (nullptr == jarg6_object_class) return 0;
  jmethodID jarg6_method_id = jenv->GetMethodID(
    jarg6_object_class, "applyAsInt", "(J)I");
  assert(jarg6_method_id != nullptr);
  // jarg6 will be deleted once this function return.
  jobject jarg6_object = jenv->NewGlobalRef(jarg6);
  
  // Global JNI reference deleter
  auto jarg6_guard = std::make_shared<GlobalRefGuard>(jenv, jarg6_object);
  arg6 = [jenv, jarg6_object, jarg6_method_id, jarg6_guard](long t) -> int {
    return jenv->CallIntMethod(jarg6_object, jarg6_method_id, (jlong)t);
  };
  
  result = (operations_research::PathOperator *)new SwigDirector_PathOperator(jenv,(std::vector< operations_research::IntVar * > const &)*arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5,arg6);
  *(operations_research::PathOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1PathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1neighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  result = (bool)(arg1)->MakeNeighbor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1resetSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  (arg1)->operations_research::PathOperator::Reset();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1Prev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)((operations_research::PathOperator const *)arg1)->Prev(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1oneNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)(darg)->MakeOneNeighbor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1oneNeighborSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)(darg)->MakeOneNeighborSwigPublic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1OnNodeInitialization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  SwigDirector_PathOperator *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  (darg)->OnNodeInitialization();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1OnNodeInitializationSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  SwigDirector_PathOperator *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  (darg)->OnNodeInitializationSwigPublic();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1restartAtPathStartOnSynchronize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)(darg)->RestartAtPathStartOnSynchronize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1restartAtPathStartOnSynchronizeSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)(darg)->RestartAtPathStartOnSynchronizeSwigPublic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1onSamePathAsPreviousBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int64 arg2 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int64)jarg2; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)(darg)->OnSamePathAsPreviousBase(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1onSamePathAsPreviousBaseSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int64 arg2 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int64)jarg2; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)(darg)->OnSamePathAsPreviousBaseSwigPublic(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1getBaseNodeRestartPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int arg2 ;
  SwigDirector_PathOperator *darg = 0;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (int64)(darg)->GetBaseNodeRestartPosition(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1getBaseNodeRestartPositionSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int arg2 ;
  SwigDirector_PathOperator *darg = 0;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (int64)(darg)->GetBaseNodeRestartPositionSwigPublic(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1setNextBaseToIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int64 arg2 ;
  SwigDirector_PathOperator *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int64)jarg2; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  (darg)->SetNextBaseToIncrement(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1setNextBaseToIncrementSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int64 arg2 ;
  SwigDirector_PathOperator *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int64)jarg2; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  (darg)->SetNextBaseToIncrementSwigPublic(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1ConsiderAlternatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int64 arg2 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int64)jarg2; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)((SwigDirector_PathOperator const *)darg)->ConsiderAlternatives(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1ConsiderAlternativesSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  int64 arg2 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  arg2 = (int64)jarg2; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)((SwigDirector_PathOperator const *)darg)->ConsiderAlternativesSwigPublic(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1initPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)((SwigDirector_PathOperator const *)darg)->InitPosition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1initPositionSwigExplicitPathOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  SwigDirector_PathOperator *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PathOperator **)&jarg1; 
  darg = dynamic_cast<SwigDirector_PathOperator *>(arg1);
  result = (bool)((SwigDirector_PathOperator const *)darg)->InitPositionSwigPublic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::PathOperator *obj = *((operations_research::PathOperator **)&objarg);
  (void)jcls;
  SwigDirector_PathOperator *director = dynamic_cast<SwigDirector_PathOperator *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::PathOperator *obj = *((operations_research::PathOperator **)&objarg);
  SwigDirector_PathOperator *director = dynamic_cast<SwigDirector_PathOperator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1Relax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  (arg1)->Relax((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1RelaxSwigExplicitLocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  (arg1)->operations_research::LocalSearchFilter::Relax((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  int64 arg4 ;
  int64 arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  result = (bool)(arg1)->Accept((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1isIncremental(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  result = (bool)((operations_research::LocalSearchFilter const *)arg1)->IsIncremental();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1isIncrementalSwigExplicitLocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  result = (bool)((operations_research::LocalSearchFilter const *)arg1)->operations_research::LocalSearchFilter::IsIncremental();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1synchronize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  (arg1)->Synchronize((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1Revert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  (arg1)->Revert();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1RevertSwigExplicitLocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  (arg1)->operations_research::LocalSearchFilter::Revert();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1getSynchronizedObjectiveValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  result = (int64)((operations_research::LocalSearchFilter const *)arg1)->GetSynchronizedObjectiveValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1getSynchronizedObjectiveValueSwigExplicitLocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  result = (int64)((operations_research::LocalSearchFilter const *)arg1)->operations_research::LocalSearchFilter::GetSynchronizedObjectiveValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1getAcceptedObjectiveValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  result = (int64)((operations_research::LocalSearchFilter const *)arg1)->GetAcceptedObjectiveValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1getAcceptedObjectiveValueSwigExplicitLocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  result = (int64)((operations_research::LocalSearchFilter const *)arg1)->operations_research::LocalSearchFilter::GetAcceptedObjectiveValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1LocalSearchFilter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::LocalSearchFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::LocalSearchFilter *)new SwigDirector_LocalSearchFilter(jenv);
  *(operations_research::LocalSearchFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1LocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::LocalSearchFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::LocalSearchFilter *obj = *((operations_research::LocalSearchFilter **)&objarg);
  (void)jcls;
  SwigDirector_LocalSearchFilter *director = dynamic_cast<SwigDirector_LocalSearchFilter *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::LocalSearchFilter *obj = *((operations_research::LocalSearchFilter **)&objarg);
  SwigDirector_LocalSearchFilter *director = dynamic_cast<SwigDirector_LocalSearchFilter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1IntVarLocalSearchFilter(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > result1 ;
  operations_research::IntVarLocalSearchFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (operations_research::IntVarLocalSearchFilter *)new SwigDirector_IntVarLocalSearchFilter(jenv,(std::vector< operations_research::IntVar * > const &)*arg1);
  *(operations_research::IntVarLocalSearchFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1IntVarLocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1synchronize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  (arg1)->Synchronize((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1addVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  (arg1)->AddVars((std::vector< operations_research::IntVar * > const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  result = (int)((operations_research::IntVarLocalSearchFilter const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  int arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::IntVar *)((operations_research::IntVarLocalSearchFilter const *)arg1)->Var(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::IntVarLocalSearchFilter const *)arg1)->Value(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1onSynchronize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  SwigDirector_IntVarLocalSearchFilter *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  darg = dynamic_cast<SwigDirector_IntVarLocalSearchFilter *>(arg1);
  (darg)->OnSynchronize((operations_research::Assignment const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1onSynchronizeSwigExplicitIntVarLocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  SwigDirector_IntVarLocalSearchFilter *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  darg = dynamic_cast<SwigDirector_IntVarLocalSearchFilter *>(arg1);
  (darg)->OnSynchronizeSwigPublic((operations_research::Assignment const *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::IntVarLocalSearchFilter **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (int)operations_research_IntVarLocalSearchFilter_index(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::IntVarLocalSearchFilter *obj = *((operations_research::IntVarLocalSearchFilter **)&objarg);
  (void)jcls;
  SwigDirector_IntVarLocalSearchFilter *director = dynamic_cast<SwigDirector_IntVarLocalSearchFilter *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::IntVarLocalSearchFilter *obj = *((operations_research::IntVarLocalSearchFilter **)&objarg);
  SwigDirector_IntVarLocalSearchFilter *director = dynamic_cast<SwigDirector_IntVarLocalSearchFilter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1PropagationMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  result = ((operations_research::PropagationMonitor const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1beginConstraintInitialPropagation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  (arg1)->BeginConstraintInitialPropagation(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1endConstraintInitialPropagation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  (arg1)->EndConstraintInitialPropagation(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1beginNestedConstraintInitialPropagation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::Constraint *arg3 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  arg3 = *(operations_research::Constraint **)&jarg3; 
  (arg1)->BeginNestedConstraintInitialPropagation(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1endNestedConstraintInitialPropagation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::Constraint *arg3 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  arg3 = *(operations_research::Constraint **)&jarg3; 
  (arg1)->EndNestedConstraintInitialPropagation(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1registerDemon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->RegisterDemon(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1beginDemonRun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->BeginDemonRun(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1endDemonRun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) (operations_research::Demon *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->EndDemonRun(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1startProcessingIntegerVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->StartProcessingIntegerVariable(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1endProcessingIntegerVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->EndProcessingIntegerVariable(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1pushContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->PushContext((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1popContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  (arg1)->PopContext();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetMin(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetMax(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetRange(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetMin(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetMax(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetRange(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1removeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->RemoveValue(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetValue(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1removeInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->RemoveInterval(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< int64 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetValues(arg2,(std::vector< int64 > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1removeValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< int64 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->RemoveValues(arg2,(std::vector< int64 > const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setStartMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetStartMin(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setStartMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetStartMax(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setStartRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetStartRange(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setEndMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetEndMin(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setEndMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetEndMax(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setEndRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetEndRange(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setDurationMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetDurationMin(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setDurationMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetDurationMax(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setDurationRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetDurationRange(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1setPerformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetPerformed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1rankFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RankFirst(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1rankNotFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RankNotFirst(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1rankLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RankLast(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1rankNotLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RankNotLast(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1rankSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3, jintArray jarg4, jintArray jarg5) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  if(jarg5) {
    arg5 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg5);
    arg5->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg5, NULL);
    for (int i = 0; i < size; ++i) {
      arg5->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg5, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->RankSequence(arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1install(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::PropagationMonitor *arg1 = (operations_research::PropagationMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::PropagationMonitor **)&jarg1; 
  (arg1)->Install();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1LocalSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  result = ((operations_research::LocalSearchMonitor const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1beginOperatorStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  (arg1)->BeginOperatorStart();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1endOperatorStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  (arg1)->EndOperatorStart();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1beginMakeNextNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  arg2 = *(operations_research::LocalSearchOperator **)&jarg2; 
  (arg1)->BeginMakeNextNeighbor((operations_research::LocalSearchOperator const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1endMakeNextNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  bool arg3 ;
  operations_research::Assignment *arg4 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg5 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  arg2 = *(operations_research::LocalSearchOperator **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(operations_research::Assignment **)&jarg4; 
  arg5 = *(operations_research::Assignment **)&jarg5; 
  (arg1)->EndMakeNextNeighbor((operations_research::LocalSearchOperator const *)arg2,arg3,(operations_research::Assignment const *)arg4,(operations_research::Assignment const *)arg5);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1beginFilterNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  arg2 = *(operations_research::LocalSearchOperator **)&jarg2; 
  (arg1)->BeginFilterNeighbor((operations_research::LocalSearchOperator const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1endFilterNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  arg2 = *(operations_research::LocalSearchOperator **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->EndFilterNeighbor((operations_research::LocalSearchOperator const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1beginAcceptNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  arg2 = *(operations_research::LocalSearchOperator **)&jarg2; 
  (arg1)->BeginAcceptNeighbor((operations_research::LocalSearchOperator const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1endAcceptNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  arg2 = *(operations_research::LocalSearchOperator **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->EndAcceptNeighbor((operations_research::LocalSearchOperator const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1beginFiltering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::LocalSearchFilter *arg2 = (operations_research::LocalSearchFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  arg2 = *(operations_research::LocalSearchFilter **)&jarg2; 
  (arg1)->BeginFiltering((operations_research::LocalSearchFilter const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1endFiltering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::LocalSearchFilter *arg2 = (operations_research::LocalSearchFilter *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  arg2 = *(operations_research::LocalSearchFilter **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->EndFiltering((operations_research::LocalSearchFilter const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1install(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::LocalSearchMonitor *arg1 = (operations_research::LocalSearchMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::LocalSearchMonitor **)&jarg1; 
  (arg1)->Install();
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1kUnboundBooleanVarValue_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)operations_research::BooleanVar::kUnboundBooleanVarValue;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1BooleanVar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = (int64)((operations_research::BooleanVar const *)arg1)->Min();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = (int64)((operations_research::BooleanVar const *)arg1)->Max();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1bound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = (bool)((operations_research::BooleanVar const *)arg1)->Bound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = (int64)((operations_research::BooleanVar const *)arg1)->Value();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1removeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->RemoveValue(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      jclass fail_class = jenv->FindClass(
        "com/google/ortools/constraintsolver/"
        "Solver$FailException");
      jenv->ThrowNew(fail_class, "fail");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1removeInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->RemoveInterval(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1whenBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenBound(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1whenRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1whenDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = *(operations_research::Demon **)&jarg2; 
  (arg1)->WhenDomain(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  uint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = (uint64)((operations_research::BooleanVar const *)arg1)->Size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::BooleanVar const *)arg1)->Contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1makeHoleIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  bool arg2 ;
  operations_research::IntVarIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (operations_research::IntVarIterator *)((operations_research::BooleanVar const *)arg1)->MakeHoleIterator(arg2);
  *(operations_research::IntVarIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1makeDomainIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  bool arg2 ;
  operations_research::IntVarIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (operations_research::IntVarIterator *)((operations_research::BooleanVar const *)arg1)->MakeDomainIterator(arg2);
  *(operations_research::IntVarIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = ((operations_research::BooleanVar const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1varType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = (int)((operations_research::BooleanVar const *)arg1)->VarType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->IsEqual(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1isDifferent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->IsDifferent(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1isGreaterOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->IsGreaterOrEqual(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1isLessOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)(arg1)->IsLessOrEqual(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1restoreValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  (arg1)->RestoreValue();
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1baseName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = ((operations_research::BooleanVar const *)arg1)->BaseName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1rawValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::BooleanVar **)&jarg1; 
  result = (int)((operations_research::BooleanVar const *)arg1)->RawValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SymmetryBreaker(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::SymmetryBreaker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::SymmetryBreaker *)new SwigDirector_SymmetryBreaker(jenv);
  *(operations_research::SymmetryBreaker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SymmetryBreaker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SymmetryBreaker *arg1 = (operations_research::SymmetryBreaker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SymmetryBreaker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SymmetryBreaker_1addIntegerVariableEqualValueClause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::SymmetryBreaker *arg1 = (operations_research::SymmetryBreaker *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SymmetryBreaker **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->AddIntegerVariableEqualValueClause(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SymmetryBreaker_1addIntegerVariableGreaterOrEqualValueClause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::SymmetryBreaker *arg1 = (operations_research::SymmetryBreaker *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SymmetryBreaker **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->AddIntegerVariableGreaterOrEqualValueClause(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SymmetryBreaker_1addIntegerVariableLessOrEqualValueClause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::SymmetryBreaker *arg1 = (operations_research::SymmetryBreaker *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SymmetryBreaker **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->AddIntegerVariableLessOrEqualValueClause(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SymmetryBreaker_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  operations_research::SymmetryBreaker *obj = *((operations_research::SymmetryBreaker **)&objarg);
  (void)jcls;
  SwigDirector_SymmetryBreaker *director = dynamic_cast<SwigDirector_SymmetryBreaker *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SymmetryBreaker_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  operations_research::SymmetryBreaker *obj = *((operations_research::SymmetryBreaker **)&objarg);
  SwigDirector_SymmetryBreaker *director = dynamic_cast<SwigDirector_SymmetryBreaker *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1SearchLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jdouble jarg5, jobject jarg6, jint jarg7) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  operations_research::OptimizeVar *arg2 = (operations_research::OptimizeVar *) (operations_research::OptimizeVar *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  double arg4 ;
  double arg5 ;
  SwigValueWrapper< std::function< std::string () > > arg6 ;
  int arg7 ;
  operations_research::SearchLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  arg2 = *(operations_research::OptimizeVar **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  
  jclass jarg6_object_class = jenv->GetObjectClass(jarg6);
  if (nullptr == jarg6_object_class) return 0;
  jmethodID jarg6_method_id = jenv->GetMethodID(
    jarg6_object_class, "get", "()Ljava/lang/Object;");
  assert(jarg6_method_id != nullptr);
  // jarg6 will be deleted once this function return.
  jobject jarg6_object = jenv->NewGlobalRef(jarg6);
  
  // Global JNI reference deleter
  auto jarg6_guard = std::make_shared<GlobalRefGuard>(jenv, jarg6_object);
  arg6 = [jenv, jarg6_object, jarg6_method_id, jarg6_guard]() -> std::string {
    jstring js = (jstring) jenv->CallObjectMethod(jarg6_object, jarg6_method_id);
    // convert the Java String to const char* C string.
    const char* c_str(jenv->GetStringUTFChars(js, 0));
    // copy the C string to std::string
    std::string str(c_str);
    // release the C string.
    jenv->ReleaseStringUTFChars(js, c_str);
    return str;
  };
  
  arg7 = (int)jarg7; 
  result = (operations_research::SearchLog *)new operations_research::SearchLog(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(operations_research::SearchLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1SearchLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1enterSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->EnterSearch();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1exitSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->ExitSearch();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1atSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  result = (bool)(arg1)->AtSolution();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1beginFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->BeginFail();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1noMoreSolutions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->NoMoreSolutions();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1AcceptUncheckedNeighbor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->AcceptUncheckedNeighbor();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1applyDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  (arg1)->ApplyDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1refuteDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) (operations_research::Decision *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  arg2 = *(operations_research::Decision **)&jarg2; 
  (arg1)->RefuteDecision(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1outputDecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->OutputDecision();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1maintain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->Maintain();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1beginInitialPropagation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->BeginInitialPropagation();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1endInitialPropagation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  (arg1)->EndInitialPropagation();
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::SearchLog *arg1 = (operations_research::SearchLog *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::SearchLog **)&jarg1; 
  result = ((operations_research::SearchLog const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VOID_1FALSE_1CONSTRAINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VoidConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VoidConstraintType)operations_research::ModelCache::VOID_FALSE_CONSTRAINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VOID_1TRUE_1CONSTRAINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VoidConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VoidConstraintType)operations_research::ModelCache::VOID_TRUE_CONSTRAINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VOID_1CONSTRAINT_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VoidConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VoidConstraintType)operations_research::ModelCache::VOID_CONSTRAINT_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1EQUALITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstraintType)operations_research::ModelCache::VAR_CONSTANT_EQUALITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1GREATER_1OR_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstraintType)operations_research::ModelCache::VAR_CONSTANT_GREATER_OR_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1LESS_1OR_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstraintType)operations_research::ModelCache::VAR_CONSTANT_LESS_OR_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1NON_1EQUALITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstraintType)operations_research::ModelCache::VAR_CONSTANT_NON_EQUALITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1CONSTRAINT_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstraintType)operations_research::ModelCache::VAR_CONSTANT_CONSTRAINT_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1CONSTANT_1BETWEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstantConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstantConstraintType)operations_research::ModelCache::VAR_CONSTANT_CONSTANT_BETWEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1CONSTANT_1CONSTRAINT_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstantConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstantConstraintType)operations_research::ModelCache::VAR_CONSTANT_CONSTANT_CONSTRAINT_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1EQUALITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstraintType)operations_research::ModelCache::EXPR_EXPR_EQUALITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1GREATER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstraintType)operations_research::ModelCache::EXPR_EXPR_GREATER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1GREATER_1OR_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstraintType)operations_research::ModelCache::EXPR_EXPR_GREATER_OR_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1LESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstraintType)operations_research::ModelCache::EXPR_EXPR_LESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1LESS_1OR_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstraintType)operations_research::ModelCache::EXPR_EXPR_LESS_OR_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1NON_1EQUALITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstraintType)operations_research::ModelCache::EXPR_EXPR_NON_EQUALITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1CONSTRAINT_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstraintType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstraintType)operations_research::ModelCache::EXPR_EXPR_CONSTRAINT_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1OPPOSITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExpressionType)operations_research::ModelCache::EXPR_OPPOSITE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1ABS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExpressionType)operations_research::ModelCache::EXPR_ABS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1SQUARE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExpressionType)operations_research::ModelCache::EXPR_SQUARE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExpressionType)operations_research::ModelCache::EXPR_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1DIFFERENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_DIFFERENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1PROD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_PROD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1DIV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_DIV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1SUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_SUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1IS_1LESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_IS_LESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1IS_1LESS_1OR_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_IS_LESS_OR_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1IS_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_IS_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1IS_1NOT_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_IS_NOT_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprExpressionType)operations_research::ModelCache::EXPR_EXPR_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1CONSTANT_1CONDITIONAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstantExpressionType)operations_research::ModelCache::EXPR_EXPR_CONSTANT_CONDITIONAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1EXPR_1CONSTANT_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprExprConstantExpressionType)operations_research::ModelCache::EXPR_EXPR_CONSTANT_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1DIFFERENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_DIFFERENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1DIVIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_DIVIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1PROD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_PROD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1SUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_SUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1IS_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_IS_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1IS_1NOT_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_IS_NOT_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1IS_1GREATER_1OR_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_IS_GREATER_OR_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1IS_1LESS_1OR_1EQUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_IS_LESS_OR_EQUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1EXPR_1CONSTANT_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::ExprConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::ExprConstantExpressionType)operations_research::ModelCache::EXPR_CONSTANT_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1CONSTANT_1SEMI_1CONTINUOUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstantExpressionType)operations_research::ModelCache::VAR_CONSTANT_CONSTANT_SEMI_CONTINUOUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1CONSTANT_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantConstantExpressionType)operations_research::ModelCache::VAR_CONSTANT_CONSTANT_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1ARRAY_1ELEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantArrayExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantArrayExpressionType)operations_research::ModelCache::VAR_CONSTANT_ARRAY_ELEMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1CONSTANT_1ARRAY_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarConstantArrayExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarConstantArrayExpressionType)operations_research::ModelCache::VAR_CONSTANT_ARRAY_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1ARRAY_1CONSTANT_1ARRAY_1SCAL_1PROD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarArrayConstantArrayExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarArrayConstantArrayExpressionType)operations_research::ModelCache::VAR_ARRAY_CONSTANT_ARRAY_SCAL_PROD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1ARRAY_1CONSTANT_1ARRAY_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarArrayConstantArrayExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarArrayConstantArrayExpressionType)operations_research::ModelCache::VAR_ARRAY_CONSTANT_ARRAY_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1ARRAY_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarArrayExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarArrayExpressionType)operations_research::ModelCache::VAR_ARRAY_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1ARRAY_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarArrayExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarArrayExpressionType)operations_research::ModelCache::VAR_ARRAY_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1ARRAY_1SUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarArrayExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarArrayExpressionType)operations_research::ModelCache::VAR_ARRAY_SUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1ARRAY_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarArrayExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarArrayExpressionType)operations_research::ModelCache::VAR_ARRAY_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1ARRAY_1CONSTANT_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarArrayConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarArrayConstantExpressionType)operations_research::ModelCache::VAR_ARRAY_CONSTANT_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1VAR_1ARRAY_1CONSTANT_1EXPRESSION_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::ModelCache::VarArrayConstantExpressionType result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::ModelCache::VarArrayConstantExpressionType)operations_research::ModelCache::VAR_ARRAY_CONSTANT_EXPRESSION_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1ModelCache(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findVoidConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::ModelCache::VoidConstraintType arg2 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = (operations_research::ModelCache::VoidConstraintType)jarg2; 
  result = (operations_research::Constraint *)((operations_research::ModelCache const *)arg1)->FindVoidConstraint(arg2);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertVoidConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::ModelCache::VoidConstraintType arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  arg3 = (operations_research::ModelCache::VoidConstraintType)jarg3; 
  (arg1)->InsertVoidConstraint(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findVarConstantConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  operations_research::ModelCache::VarConstantConstraintType arg4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (operations_research::ModelCache::VarConstantConstraintType)jarg4; 
  result = (operations_research::Constraint *)((operations_research::ModelCache const *)arg1)->FindVarConstantConstraint(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertVarConstantConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jint jarg5) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  operations_research::ModelCache::VarConstantConstraintType arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (operations_research::ModelCache::VarConstantConstraintType)jarg5; 
  (arg1)->InsertVarConstantConstraint(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findVarConstantConstantConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::ModelCache::VarConstantConstantConstraintType arg5 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (operations_research::ModelCache::VarConstantConstantConstraintType)jarg5; 
  result = (operations_research::Constraint *)((operations_research::ModelCache const *)arg1)->FindVarConstantConstantConstraint(arg2,arg3,arg4,arg5);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertVarConstantConstantConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jint jarg6) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  int64 arg5 ;
  operations_research::ModelCache::VarConstantConstantConstraintType arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  arg6 = (operations_research::ModelCache::VarConstantConstantConstraintType)jarg6; 
  (arg1)->InsertVarConstantConstantConstraint(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findExprExprConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::ModelCache::ExprExprConstraintType arg4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = (operations_research::ModelCache::ExprExprConstraintType)jarg4; 
  result = (operations_research::Constraint *)((operations_research::ModelCache const *)arg1)->FindExprExprConstraint(arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertExprExprConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) (operations_research::Constraint *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg4 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::ModelCache::ExprExprConstraintType arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::Constraint **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntExpr **)&jarg4; 
  arg5 = (operations_research::ModelCache::ExprExprConstraintType)jarg5; 
  (arg1)->InsertExprExprConstraint(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findExprExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::ModelCache::ExprExpressionType arg3 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (operations_research::ModelCache::ExprExpressionType)jarg3; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindExprExpression(arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertExprExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::ModelCache::ExprExpressionType arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = (operations_research::ModelCache::ExprExpressionType)jarg4; 
  (arg1)->InsertExprExpression(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findExprConstantExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg3 ;
  operations_research::ModelCache::ExprConstantExpressionType arg4 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (operations_research::ModelCache::ExprConstantExpressionType)jarg4; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindExprConstantExpression(arg2,arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertExprConstantExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jint jarg5) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg4 ;
  operations_research::ModelCache::ExprConstantExpressionType arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (operations_research::ModelCache::ExprConstantExpressionType)jarg5; 
  (arg1)->InsertExprConstantExpression(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findExprExprExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::ModelCache::ExprExprExpressionType arg4 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = (operations_research::ModelCache::ExprExprExpressionType)jarg4; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindExprExprExpression(arg2,arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertExprExprExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg4 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::ModelCache::ExprExprExpressionType arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntExpr **)&jarg4; 
  arg5 = (operations_research::ModelCache::ExprExprExpressionType)jarg5; 
  (arg1)->InsertExprExprExpression(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findExprExprConstantExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg4 ;
  operations_research::ModelCache::ExprExprConstantExpressionType arg5 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (operations_research::ModelCache::ExprExprConstantExpressionType)jarg5; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindExprExprConstantExpression(arg2,arg3,arg4,arg5);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertExprExprConstantExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jint jarg6) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntExpr *arg4 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  int64 arg5 ;
  operations_research::ModelCache::ExprExprConstantExpressionType arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntExpr **)&jarg3; 
  arg4 = *(operations_research::IntExpr **)&jarg4; 
  arg5 = (int64)jarg5; 
  arg6 = (operations_research::ModelCache::ExprExprConstantExpressionType)jarg6; 
  (arg1)->InsertExprExprConstantExpression(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findVarConstantConstantExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::ModelCache::VarConstantConstantExpressionType arg5 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (operations_research::ModelCache::VarConstantConstantExpressionType)jarg5; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindVarConstantConstantExpression(arg2,arg3,arg4,arg5);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertVarConstantConstantExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jint jarg6) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  int64 arg4 ;
  int64 arg5 ;
  operations_research::ModelCache::VarConstantConstantExpressionType arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  arg6 = (operations_research::ModelCache::VarConstantConstantExpressionType)jarg6; 
  (arg1)->InsertVarConstantConstantExpression(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findVarConstantArrayExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< int64 > *arg3 = 0 ;
  operations_research::ModelCache::VarConstantArrayExpressionType arg4 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (operations_research::ModelCache::VarConstantArrayExpressionType)jarg4; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindVarConstantArrayExpression(arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertVarConstantArrayExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlongArray jarg4, jint jarg5) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  std::vector< int64 > *arg4 = 0 ;
  operations_research::ModelCache::VarConstantArrayExpressionType arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  arg3 = *(operations_research::IntVar **)&jarg3; 
  
  if(jarg4) {
    arg4 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  arg5 = (operations_research::ModelCache::VarConstantArrayExpressionType)jarg5; 
  (arg1)->InsertVarConstantArrayExpression(arg2,arg3,(std::vector< int64 > const &)*arg4,arg5);
  {
    delete arg4;
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findVarArrayExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::ModelCache::VarArrayExpressionType arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (operations_research::ModelCache::VarArrayExpressionType)jarg3; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindVarArrayExpression((std::vector< operations_research::IntVar * > const &)*arg2,arg3);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertVarArrayExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3, jint jarg4) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::ModelCache::VarArrayExpressionType arg4 ;
  std::vector< operations_research::IntVar * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  arg4 = (operations_research::ModelCache::VarArrayExpressionType)jarg4; 
  (arg1)->InsertVarArrayExpression(arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findVarArrayConstantArrayExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64 > *arg3 = 0 ;
  operations_research::ModelCache::VarArrayConstantArrayExpressionType arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  
  if(jarg3) {
    arg3 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg4 = (operations_research::ModelCache::VarArrayConstantArrayExpressionType)jarg4; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindVarArrayConstantArrayExpression((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64 > const &)*arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertVarArrayConstantArrayExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3, jlongArray jarg4, jint jarg5) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int64 > *arg4 = 0 ;
  operations_research::ModelCache::VarArrayConstantArrayExpressionType arg5 ;
  std::vector< operations_research::IntVar * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  
  if(jarg4) {
    arg4 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  arg5 = (operations_research::ModelCache::VarArrayConstantArrayExpressionType)jarg5; 
  (arg1)->InsertVarArrayConstantArrayExpression(arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int64 > const &)*arg4,arg5);
  {
    delete arg4;
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1findVarArrayConstantExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64 arg3 ;
  operations_research::ModelCache::VarArrayConstantExpressionType arg4 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::IntExpr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = &result2;
  }
  arg3 = (int64)jarg3; 
  arg4 = (operations_research::ModelCache::VarArrayConstantExpressionType)jarg4; 
  result = (operations_research::IntExpr *)((operations_research::ModelCache const *)arg1)->FindVarArrayConstantExpression((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4);
  *(operations_research::IntExpr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1insertVarArrayConstantExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3, jlong jarg4, jint jarg5) {
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) (operations_research::IntExpr *)0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  int64 arg4 ;
  operations_research::ModelCache::VarArrayConstantExpressionType arg5 ;
  std::vector< operations_research::IntVar * > result3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  arg2 = *(operations_research::IntExpr **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = &result3;
  }
  arg4 = (int64)jarg4; 
  arg5 = (operations_research::ModelCache::VarArrayConstantExpressionType)jarg5; 
  (arg1)->InsertVarArrayConstantExpression(arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelCache_1solver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::ModelCache *arg1 = (operations_research::ModelCache *) 0 ;
  operations_research::Solver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::ModelCache **)&jarg1; 
  result = (operations_research::Solver *)((operations_research::ModelCache const *)arg1)->solver();
  *(operations_research::Solver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RevPartialSequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  operations_research::RevPartialSequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  if(jarg1) {
    arg1 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg1);
    arg1->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg1, NULL);
    for (int i = 0; i < size; ++i) {
      arg1->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg1, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::RevPartialSequence *)new operations_research::RevPartialSequence((std::vector< int > const &)*arg1);
  *(operations_research::RevPartialSequence **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RevPartialSequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  operations_research::RevPartialSequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (operations_research::RevPartialSequence *)new operations_research::RevPartialSequence(arg1);
  *(operations_research::RevPartialSequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RevPartialSequence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::RevPartialSequence *arg1 = (operations_research::RevPartialSequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::RevPartialSequence **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevPartialSequence_1numFirstRanked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RevPartialSequence *arg1 = (operations_research::RevPartialSequence *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RevPartialSequence **)&jarg1; 
  result = (int)((operations_research::RevPartialSequence const *)arg1)->NumFirstRanked();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevPartialSequence_1numLastRanked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RevPartialSequence *arg1 = (operations_research::RevPartialSequence *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RevPartialSequence **)&jarg1; 
  result = (int)((operations_research::RevPartialSequence const *)arg1)->NumLastRanked();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevPartialSequence_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RevPartialSequence *arg1 = (operations_research::RevPartialSequence *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RevPartialSequence **)&jarg1; 
  result = (int)((operations_research::RevPartialSequence const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevPartialSequence_1rankFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::RevPartialSequence *arg1 = (operations_research::RevPartialSequence *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RevPartialSequence **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RankFirst(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevPartialSequence_1rankLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::RevPartialSequence *arg1 = (operations_research::RevPartialSequence *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RevPartialSequence **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RankLast(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevPartialSequence_1isRanked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  operations_research::RevPartialSequence *arg1 = (operations_research::RevPartialSequence *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RevPartialSequence **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((operations_research::RevPartialSequence const *)arg1)->IsRanked(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevPartialSequence_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::RevPartialSequence *arg1 = (operations_research::RevPartialSequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RevPartialSequence **)&jarg1; 
  result = ((operations_research::RevPartialSequence const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_areAllBound(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jboolean jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > result1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (bool)operations_research::AreAllBound((std::vector< operations_research::IntVar * > const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_areAllBooleans(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jboolean jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > result1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (bool)operations_research::AreAllBooleans((std::vector< operations_research::IntVar * > const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_areAllBoundTo(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  int64 arg2 ;
  std::vector< operations_research::IntVar * > result1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  arg2 = (int64)jarg2; 
  result = (bool)operations_research::AreAllBoundTo((std::vector< operations_research::IntVar * > const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_maxVarArray(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > result1 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (int64)operations_research::MaxVarArray((std::vector< operations_research::IntVar * > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_minVarArray(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  std::vector< operations_research::IntVar * > *arg1 = 0 ;
  std::vector< operations_research::IntVar * > result1 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(
      object_class, "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg1); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg1, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result1.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg1 = &result1;
  }
  result = (int64)operations_research::MinVarArray((std::vector< operations_research::IntVar * > const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_posIntDivUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64 arg1 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64)jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)operations_research::PosIntDivUp(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_posIntDivDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64 arg1 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64)jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)operations_research::PosIntDivDown(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1LocalSearchPhaseParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::LocalSearchPhaseParameters *)new operations_research::LocalSearchPhaseParameters();
  *(operations_research::LocalSearchPhaseParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1LocalSearchPhaseParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::LocalSearchPhaseParameters *arg1 = (operations_research::LocalSearchPhaseParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::LocalSearchPhaseParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RevInteger(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int temp1 ;
  operations_research::Rev< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (operations_research::Rev< int > *)new operations_research::Rev< int >((int const &)*arg1);
  *(operations_research::Rev< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevInteger_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::Rev< int > *arg1 = (operations_research::Rev< int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Rev< int > **)&jarg1; 
  result = (int *) &((operations_research::Rev< int > const *)arg1)->Value();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevInteger_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  operations_research::Rev< int > *arg1 = (operations_research::Rev< int > *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Rev< int > **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->SetValue(arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RevInteger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Rev< int > *arg1 = (operations_research::Rev< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Rev< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RevLong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long *arg1 = 0 ;
  long temp1 ;
  operations_research::Rev< int64 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (long)jarg1; 
  arg1 = &temp1; 
  result = (operations_research::Rev< int64 > *)new operations_research::Rev< int64 >((long const &)*arg1);
  *(operations_research::Rev< int64 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevLong_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::Rev< int64 > *arg1 = (operations_research::Rev< int64 > *) 0 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Rev< int64 > **)&jarg1; 
  result = (long *) &((operations_research::Rev< int64 > const *)arg1)->Value();
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevLong_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::Rev< int64 > *arg1 = (operations_research::Rev< int64 > *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Rev< int64 > **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  (arg1)->SetValue(arg2,(long const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RevLong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Rev< int64 > *arg1 = (operations_research::Rev< int64 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Rev< int64 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RevBool(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  bool temp1 ;
  operations_research::Rev< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (operations_research::Rev< bool > *)new operations_research::Rev< bool >((bool const &)*arg1);
  *(operations_research::Rev< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevBool_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::Rev< bool > *arg1 = (operations_research::Rev< bool > *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Rev< bool > **)&jarg1; 
  result = (bool *) &((operations_research::Rev< bool > const *)arg1)->Value();
  jresult = (jboolean)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RevBool_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  operations_research::Rev< bool > *arg1 = (operations_research::Rev< bool > *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::Rev< bool > **)&jarg1; 
  arg2 = *(operations_research::Solver **)&jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->SetValue(arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RevBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::Rev< bool > *arg1 = (operations_research::Rev< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::Rev< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1AssignmentIntContainer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *)new operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement >();
  *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (operations_research::IntVarElement *)(arg1)->Add(arg2);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1fastAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (operations_research::IntVarElement *)(arg1)->FastAdd(arg2);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1addAtPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int arg3 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::IntVarElement *)(arg1)->AddAtPosition(arg2,arg3);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Resize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1copyIntersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const & reference is null");
    return ;
  } 
  (arg1)->CopyIntersection((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const & reference is null");
    return ;
  } 
  (arg1)->Copy((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->Contains((operations_research::IntVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1mutableElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (operations_research::IntVarElement *)(arg1)->MutableElement((operations_research::IntVar const *)arg2);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1element_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  result = (operations_research::IntVarElement *) &((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->Element((operations_research::IntVar const *)arg2);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1mutableElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  int arg2 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::IntVarElement *)(arg1)->MutableElement(arg2);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  int arg2 ;
  operations_research::IntVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::IntVarElement *) &((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->Element(arg2);
  *(operations_research::IntVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  result = (int)((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  (arg1)->Store();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  (arg1)->Restore();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntContainer_1AreAllElementsBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->AreAllElementsBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1AssignmentIntContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1AssignmentIntervalContainer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *)new operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement >();
  *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVarElement *)(arg1)->Add(arg2);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1fastAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVarElement *)(arg1)->FastAdd(arg2);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1addAtPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int arg3 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::IntervalVarElement *)(arg1)->AddAtPosition(arg2,arg3);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Resize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1copyIntersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const & reference is null");
    return ;
  } 
  (arg1)->CopyIntersection((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const & reference is null");
    return ;
  } 
  (arg1)->Copy((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->Contains((operations_research::IntervalVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1mutableElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVarElement *)(arg1)->MutableElement((operations_research::IntervalVar const *)arg2);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1element_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  result = (operations_research::IntervalVarElement *) &((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->Element((operations_research::IntervalVar const *)arg2);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1mutableElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  int arg2 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::IntervalVarElement *)(arg1)->MutableElement(arg2);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  int arg2 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::IntervalVarElement *) &((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->Element(arg2);
  *(operations_research::IntervalVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  result = (int)((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  (arg1)->Store();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  (arg1)->Restore();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentIntervalContainer_1AreAllElementsBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->AreAllElementsBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1AssignmentIntervalContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1AssignmentSequenceContainer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *)new operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement >();
  *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (operations_research::SequenceVarElement *)(arg1)->Add(arg2);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1fastAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (operations_research::SequenceVarElement *)(arg1)->FastAdd(arg2);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1addAtPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  int arg3 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (operations_research::SequenceVarElement *)(arg1)->AddAtPosition(arg2,arg3);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Resize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1copyIntersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const & reference is null");
    return ;
  } 
  (arg1)->CopyIntersection((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const & reference is null");
    return ;
  } 
  (arg1)->Copy((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->Contains((operations_research::SequenceVar const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1mutableElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (operations_research::SequenceVarElement *)(arg1)->MutableElement((operations_research::SequenceVar const *)arg2);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1element_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = *(operations_research::SequenceVar **)&jarg2; 
  result = (operations_research::SequenceVarElement *) &((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->Element((operations_research::SequenceVar const *)arg2);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1mutableElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  int arg2 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::SequenceVarElement *)(arg1)->MutableElement(arg2);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  int arg2 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::SequenceVarElement *) &((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->Element(arg2);
  *(operations_research::SequenceVarElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  result = (int)((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  (arg1)->Store();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  (arg1)->Restore();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_AssignmentSequenceContainer_1AreAllElementsBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  result = (bool)((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->AreAllElementsBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1AssignmentSequenceContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RoutingIndexManager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  operations_research::RoutingIndexManager::NodeIndex arg3 ;
  operations_research::RoutingIndexManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  {
    arg3 = operations_research::RoutingNodeIndex(jarg3);
  }
  result = (operations_research::RoutingIndexManager *)new operations_research::RoutingIndexManager(arg1,arg2,arg3);
  *(operations_research::RoutingIndexManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RoutingIndexManager_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jintArray jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::vector< operations_research::RoutingIndexManager::NodeIndex > *arg3 = 0 ;
  std::vector< operations_research::RoutingIndexManager::NodeIndex > *arg4 = 0 ;
  operations_research::RoutingIndexManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  
  if(jarg3) {
    arg3 = new std::vector<operations_research::RoutingNodeIndex>;
    const int size = jenv->GetArrayLength(jarg3);
    arg3->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      arg3->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  
  if(jarg4) {
    arg4 = new std::vector<operations_research::RoutingNodeIndex>;
    const int size = jenv->GetArrayLength(jarg4);
    arg4->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      arg4->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::RoutingIndexManager *)new operations_research::RoutingIndexManager(arg1,arg2,(std::vector< operations_research::RoutingIndexManager::NodeIndex > const &)*arg3,(std::vector< operations_research::RoutingIndexManager::NodeIndex > const &)*arg4);
  *(operations_research::RoutingIndexManager **)&jresult = result; 
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RoutingIndexManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingIndexManager_1getNumberOfNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  result = (int)((operations_research::RoutingIndexManager const *)arg1)->num_nodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingIndexManager_1getNumberOfVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  result = (int)((operations_research::RoutingIndexManager const *)arg1)->num_vehicles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingIndexManager_1getNumberOfIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  result = (int)((operations_research::RoutingIndexManager const *)arg1)->num_indices();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingIndexManager_1getStartIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::RoutingIndexManager const *)arg1)->GetStartIndex(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingIndexManager_1getEndIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::RoutingIndexManager const *)arg1)->GetEndIndex(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingIndexManager_1nodeToIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  operations_research::RoutingIndexManager::NodeIndex arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  {
    arg2 = operations_research::RoutingNodeIndex(jarg2);
  }
  result = (int64)((operations_research::RoutingIndexManager const *)arg1)->NodeToIndex(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingIndexManager_1nodesToIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jlongArray jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  std::vector< operations_research::RoutingIndexManager::NodeIndex > *arg2 = 0 ;
  std::vector< int64 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<operations_research::RoutingNodeIndex>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = ((operations_research::RoutingIndexManager const *)arg1)->NodesToIndices((std::vector< operations_research::RoutingIndexManager::NodeIndex > const &)*arg2);
  
  const std::vector<int64>& vec = result;
  jresult = jenv->NewLongArray(vec.size());
  jenv->SetLongArrayRegion(jresult, 0, vec.size(), reinterpret_cast<const jlong*>(vec.data()));
  
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingIndexManager_1indexToNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int64 arg2 ;
  operations_research::RoutingIndexManager::NodeIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = ((operations_research::RoutingIndexManager const *)arg1)->IndexToNode(arg2);
  {
    jresult = (jint)(&result)->value();
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_defaultRoutingModelParameters(JNIEnv *jenv, jclass jcls) {
  jbyteArray jresult = 0 ;
  operations_research::RoutingModelParameters result;
  
  (void)jenv;
  (void)jcls;
  result = operations_research::DefaultRoutingModelParameters();
  {
    const long size = (&result)->ByteSizeLong();
    std::unique_ptr<char[]> buf(new char[size]);
    (&result)->SerializeWithCachedSizesToArray(reinterpret_cast<uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), size);
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_defaultRoutingSearchParameters(JNIEnv *jenv, jclass jcls) {
  jbyteArray jresult = 0 ;
  operations_research::RoutingSearchParameters result;
  
  (void)jenv;
  (void)jcls;
  result = operations_research::DefaultRoutingSearchParameters();
  {
    const long size = (&result)->ByteSizeLong();
    std::unique_ptr<char[]> buf(new char[size]);
    (&result)->SerializeWithCachedSizesToArray(reinterpret_cast<uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), size);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_findErrorInRoutingSearchParameters(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jstring jresult = 0 ;
  operations_research::RoutingSearchParameters *arg1 = 0 ;
  operations_research::RoutingSearchParameters temp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg1, &proto_size));
    bool parsed_ok = temp1.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RoutingSearchParameters protocol message.");
    }
    arg1 = &temp1;
  }
  result = operations_research::FindErrorInRoutingSearchParameters((operations_research::RoutingSearchParameters const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1ROUTING_1NOT_1SOLVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::Status)operations_research::RoutingModel::ROUTING_NOT_SOLVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1ROUTING_1SUCCESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::Status)operations_research::RoutingModel::ROUTING_SUCCESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1ROUTING_1FAIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::Status)operations_research::RoutingModel::ROUTING_FAIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1ROUTING_1FAIL_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::Status)operations_research::RoutingModel::ROUTING_FAIL_TIMEOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1ROUTING_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::Status)operations_research::RoutingModel::ROUTING_INVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1PICKUP_1AND_1DELIVERY_1NO_1ORDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::PickupAndDeliveryPolicy)operations_research::RoutingModel::PICKUP_AND_DELIVERY_NO_ORDER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1PICKUP_1AND_1DELIVERY_1LIFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::PickupAndDeliveryPolicy)operations_research::RoutingModel::PICKUP_AND_DELIVERY_LIFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1PICKUP_1AND_1DELIVERY_1FIFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::PickupAndDeliveryPolicy)operations_research::RoutingModel::PICKUP_AND_DELIVERY_FIFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1kNoPenalty_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  result = (int64)(int64)operations_research::RoutingModel::kNoPenalty;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1kNoDisjunction_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::DisjunctionIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::DisjunctionIndex)operations_research::RoutingModel::kNoDisjunction;
  {
    jresult = (jint)(&result)->value();
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1kNoDimension_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::DimensionIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::DimensionIndex)operations_research::RoutingModel::kNoDimension;
  {
    jresult = (jint)(&result)->value();
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RoutingModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = 0 ;
  operations_research::RoutingModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::RoutingIndexManager const & reference is null");
    return 0;
  } 
  result = (operations_research::RoutingModel *)new operations_research::RoutingModel((operations_research::RoutingIndexManager const &)*arg1);
  *(operations_research::RoutingModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RoutingModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingIndexManager *arg1 = 0 ;
  operations_research::RoutingModelParameters *arg2 = 0 ;
  operations_research::RoutingModelParameters temp2 ;
  operations_research::RoutingModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingIndexManager **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::RoutingIndexManager const & reference is null");
    return 0;
  } 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RoutingModelParameters protocol message.");
    }
    arg2 = &temp2;
  }
  result = (operations_research::RoutingModel *)new operations_research::RoutingModel((operations_research::RoutingIndexManager const &)*arg1,(operations_research::RoutingModelParameters const &)*arg2);
  *(operations_research::RoutingModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RoutingModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1registerUnaryTransitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::TransitCallback1 arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(J)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t);
  };
  
  result = (int)(arg1)->RegisterUnaryTransitCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1RegisterPositiveUnaryTransitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::TransitCallback1 arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(J)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t);
  };
  
  result = (int)(arg1)->RegisterPositiveUnaryTransitCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1registerTransitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::TransitCallback2 arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(JJ)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t,(jlong)u);
  };
  
  result = (int)(arg1)->RegisterTransitCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1registerPositiveTransitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::TransitCallback2 arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return 0;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(JJ)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t,(jlong)u);
  };
  
  result = (int)(arg1)->RegisterPositiveTransitCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jboolean jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (bool)(arg1)->AddDimension(arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addDimensionWithVehicleTransits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg3, jlong jarg4, jboolean jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (bool)(arg1)->AddDimensionWithVehicleTransits((std::vector< int > const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  jresult = (jboolean)result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addDimensionWithVehicleCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlongArray jarg4, jboolean jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64 arg3 ;
  std::vector< int64 > arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int64)jarg3; 
  
  if(jarg4) {
    const int size = jenv->GetArrayLength(jarg4);
    (&arg4)->clear();
    (&arg4)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg4)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg5 = jarg5 ? true : false; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (bool)(arg1)->AddDimensionWithVehicleCapacity(arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addDimensionWithVehicleTransitAndCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg3, jlongArray jarg4, jboolean jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int64 arg3 ;
  std::vector< int64 > arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = (int64)jarg3; 
  
  if(jarg4) {
    const int size = jenv->GetArrayLength(jarg4);
    (&arg4)->clear();
    (&arg4)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg4)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg5 = jarg5 ? true : false; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (bool)(arg1)->AddDimensionWithVehicleTransitAndCapacity((std::vector< int > const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  jresult = (jboolean)result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addConstantDimensionWithSlack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (bool)(arg1)->AddConstantDimensionWithSlack(arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addConstantDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = jarg4 ? true : false; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (bool)(arg1)->AddConstantDimension(arg2,arg3,arg4,(std::string const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addVectorDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jboolean jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64 > arg2 ;
  int64 arg3 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    const int size = jenv->GetArrayLength(jarg2);
    (&arg2)->clear();
    (&arg2)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg2)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = (int64)jarg3; 
  arg4 = jarg4 ? true : false; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (bool)(arg1)->AddVectorDimension(arg2,arg3,arg4,(std::string const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1MakePathSpansAndTotalSlacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3, jobjectArray jarg4) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = (operations_research::RoutingDimension *) 0 ;
  SwigValueWrapper< std::vector< operations_research::IntVar * > > arg3 ;
  SwigValueWrapper< std::vector< operations_research::IntVar * > > arg4 ;
  std::vector< operations_research::IntVar * > result3 ;
  std::vector< operations_research::IntVar * > result4 ;
  operations_research::Constraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::RoutingDimension **)&jarg2; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(object_class,
      "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg3); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg3, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result3.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg3 = result3;
  }
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(object_class,
      "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg4); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg4, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result4.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg4 = result4;
  }
  result = (operations_research::Constraint *)(arg1)->MakePathSpansAndTotalSlacks((operations_research::RoutingDimension const *)arg2,arg3,arg4);
  *(operations_research::Constraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1hasDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((operations_research::RoutingModel const *)arg1)->HasDimension((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getDimensionOrDie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::RoutingDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::RoutingDimension *) &((operations_research::RoutingModel const *)arg1)->GetDimensionOrDie((std::string const &)*arg2);
  *(operations_research::RoutingDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getMutableDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::RoutingDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::RoutingDimension *)((operations_research::RoutingModel const *)arg1)->GetMutableDimension((std::string const &)*arg2);
  *(operations_research::RoutingDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setPrimaryConstrainedDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetPrimaryConstrainedDimension((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getPrimaryConstrainedDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (std::string *) &((operations_research::RoutingModel const *)arg1)->GetPrimaryConstrainedDimension();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addDisjunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  int64 arg3 ;
  int64 arg4 ;
  operations_research::RoutingModel::DisjunctionIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (arg1)->AddDisjunction((std::vector< int64 > const &)*arg2,arg3,arg4);
  {
    jresult = (jint)(&result)->value();
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addDisjunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  int64 arg3 ;
  operations_research::RoutingModel::DisjunctionIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = (int64)jarg3; 
  result = (arg1)->AddDisjunction((std::vector< int64 > const &)*arg2,arg3);
  {
    jresult = (jint)(&result)->value();
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addDisjunction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  operations_research::RoutingModel::DisjunctionIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (arg1)->AddDisjunction((std::vector< int64 > const &)*arg2);
  {
    jresult = (jint)(&result)->value();
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getDisjunctionIndices_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  std::vector< operations_research::RoutingModel::DisjunctionIndex > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (std::vector< operations_research::RoutingModel::DisjunctionIndex > *) &((operations_research::RoutingModel const *)arg1)->GetDisjunctionIndices(arg2);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getDisjunctionIndices_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlongArray jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::DisjunctionIndex arg2 ;
  std::vector< int64 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    arg2 = operations_research::RoutingDisjunctionIndex(jarg2);
  }
  result = (std::vector< int64 > *) &((operations_research::RoutingModel const *)arg1)->GetDisjunctionIndices(arg2);
  
  jresult = jenv->NewLongArray(result->size());
  jenv->SetLongArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jlong*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getDisjunctionPenalty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::DisjunctionIndex arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    arg2 = operations_research::RoutingDisjunctionIndex(jarg2);
  }
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetDisjunctionPenalty(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getDisjunctionMaxCardinality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::DisjunctionIndex arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    arg2 = operations_research::RoutingDisjunctionIndex(jarg2);
  }
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetDisjunctionMaxCardinality(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getNumberOfDisjunctions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int)((operations_research::RoutingModel const *)arg1)->GetNumberOfDisjunctions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1ignoreDisjunctionsAlreadyForcedToZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  (arg1)->IgnoreDisjunctionsAlreadyForcedToZero();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addSoftSameVehicleConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  arg3 = (int64)jarg3; 
  (arg1)->AddSoftSameVehicleConstraint((std::vector< int64 > const &)*arg2,arg3);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setAllowedVehiclesForIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jint *values = jenv->GetIntArrayElements((jintArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseIntArrayElements((jintArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  arg3 = (int64)jarg3; 
  (arg1)->SetAllowedVehiclesForIndex((std::vector< int > const &)*arg2,arg3);
  {
    delete arg2;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1isVehicleAllowedForIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int64)jarg3; 
  result = (bool)(arg1)->IsVehicleAllowedForIndex(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addPickupAndDelivery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->AddPickupAndDelivery(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addPickupAndDeliverySets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::DisjunctionIndex arg2 ;
  operations_research::RoutingModel::DisjunctionIndex arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    arg2 = operations_research::RoutingDisjunctionIndex(jarg2);
  }
  {
    arg3 = operations_research::RoutingDisjunctionIndex(jarg3);
  }
  (arg1)->AddPickupAndDeliverySets(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setPickupAndDeliveryPolicyOfAllVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (operations_research::RoutingModel::PickupAndDeliveryPolicy)jarg2; 
  (arg1)->SetPickupAndDeliveryPolicyOfAllVehicles(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setPickupAndDeliveryPolicyOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (operations_research::RoutingModel::PickupAndDeliveryPolicy)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetPickupAndDeliveryPolicyOfVehicle(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getPickupAndDeliveryPolicyOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::RoutingModel::PickupAndDeliveryPolicy)((operations_research::RoutingModel const *)arg1)->GetPickupAndDeliveryPolicyOfVehicle(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getNumOfSingletonNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int)((operations_research::RoutingModel const *)arg1)->GetNumOfSingletonNodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1TYPE_1ADDED_1TO_1VEHICLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::VisitTypePolicy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::VisitTypePolicy)operations_research::RoutingModel::TYPE_ADDED_TO_VEHICLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1ADDED_1TYPE_1REMOVED_1FROM_1VEHICLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::VisitTypePolicy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::VisitTypePolicy)operations_research::RoutingModel::ADDED_TYPE_REMOVED_FROM_VEHICLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1TYPE_1ON_1VEHICLE_1UP_1TO_1VISIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::VisitTypePolicy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::VisitTypePolicy)operations_research::RoutingModel::TYPE_ON_VEHICLE_UP_TO_VISIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1TYPE_1SIMULTANEOUSLY_1ADDED_1AND_1REMOVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  operations_research::RoutingModel::VisitTypePolicy result;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModel::VisitTypePolicy)operations_research::RoutingModel::TYPE_SIMULTANEOUSLY_ADDED_AND_REMOVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setVisitType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int arg3 ;
  operations_research::RoutingModel::VisitTypePolicy arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (operations_research::RoutingModel::VisitTypePolicy)jarg4; 
  (arg1)->SetVisitType(arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getVisitType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int)((operations_research::RoutingModel const *)arg1)->GetVisitType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1GetVisitTypePolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  operations_research::RoutingModel::VisitTypePolicy result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::RoutingModel::VisitTypePolicy)((operations_research::RoutingModel const *)arg1)->GetVisitTypePolicy(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getNumberOfVisitTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int)((operations_research::RoutingModel const *)arg1)->GetNumberOfVisitTypes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1AddRequiredTypeAlternativesWhenAddingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  absl::flat_hash_set< int > arg3 ;
  absl::flat_hash_set< int > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(absl::flat_hash_set< int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null absl::flat_hash_set< int >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AddRequiredTypeAlternativesWhenAddingType(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1AddRequiredTypeAlternativesWhenRemovingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  absl::flat_hash_set< int > arg3 ;
  absl::flat_hash_set< int > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(absl::flat_hash_set< int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null absl::flat_hash_set< int >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AddRequiredTypeAlternativesWhenRemovingType(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1GetRequiredTypeAlternativesWhenAddingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  std::vector< absl::flat_hash_set< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::vector< absl::flat_hash_set< int > > *) &((operations_research::RoutingModel const *)arg1)->GetRequiredTypeAlternativesWhenAddingType(arg2);
  *(std::vector< absl::flat_hash_set< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1GetRequiredTypeAlternativesWhenRemovingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  std::vector< absl::flat_hash_set< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::vector< absl::flat_hash_set< int > > *) &((operations_research::RoutingModel const *)arg1)->GetRequiredTypeAlternativesWhenRemovingType(arg2);
  *(std::vector< absl::flat_hash_set< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1unperformedPenalty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->UnperformedPenalty(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1unperformedPenaltyOrValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->UnperformedPenaltyOrValue(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getDepot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetDepot();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setArcCostEvaluatorOfAllVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetArcCostEvaluatorOfAllVehicles(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setArcCostEvaluatorOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetArcCostEvaluatorOfVehicle(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setFixedCostOfAllVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetFixedCostOfAllVehicles(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setFixedCostOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetFixedCostOfVehicle(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getFixedCostOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetFixedCostOfVehicle(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setAmortizedCostFactorsOfAllVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetAmortizedCostFactorsOfAllVehicles(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setAmortizedCostFactorsOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetAmortizedCostFactorsOfVehicle(arg2,arg3,arg4);
}


SWIGEXPORT jlongArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getAmortizedLinearCostFactorOfVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (std::vector< int64 > *) &((operations_research::RoutingModel const *)arg1)->GetAmortizedLinearCostFactorOfVehicles();
  
  jresult = jenv->NewLongArray(result->size());
  jenv->SetLongArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jlong*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getAmortizedQuadraticCostFactorOfVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (std::vector< int64 > *) &((operations_research::RoutingModel const *)arg1)->GetAmortizedQuadraticCostFactorOfVehicles();
  
  jresult = jenv->NewLongArray(result->size());
  jenv->SetLongArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jlong*>(result->data()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1ConsiderEmptyRouteCostsForVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  (arg1)->ConsiderEmptyRouteCostsForVehicle(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1AreEmptyRouteCostsConsideredForVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((operations_research::RoutingModel const *)arg1)->AreEmptyRouteCostsConsideredForVehicle(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setFirstSolutionEvaluator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(JJ)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jlong)t,(jlong)u);
  };
  
  (arg1)->SetFirstSolutionEvaluator(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addLocalSearchOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::LocalSearchOperator **)&jarg2; 
  (arg1)->AddLocalSearchOperator(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addSearchMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::SearchMonitor *arg2 = (operations_research::SearchMonitor *) (operations_research::SearchMonitor *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::SearchMonitor **)&jarg2; 
  (arg1)->AddSearchMonitor(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addAtSolutionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::function< void () > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "run", "()V");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard]() -> void {
    return jenv->CallVoidMethod(jarg2_object, jarg2_method_id);
  };
  
  (arg1)->AddAtSolutionCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addVariableMinimizedByFinalizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->AddVariableMinimizedByFinalizer(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addVariableMaximizedByFinalizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->AddVariableMaximizedByFinalizer(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1AddWeightedVariableMinimizedByFinalizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->AddWeightedVariableMinimizedByFinalizer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1AddVariableTargetToFinalizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->AddVariableTargetToFinalizer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1closeModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  (arg1)->CloseModel();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1closeModelWithParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  operations_research::RoutingSearchParameters temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RoutingSearchParameters protocol message.");
    }
    arg2 = &temp2;
  }
  (arg1)->CloseModelWithParameters((operations_research::RoutingSearchParameters const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  result = (operations_research::Assignment *)(arg1)->Solve((operations_research::Assignment const *)arg2);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (operations_research::Assignment *)(arg1)->Solve();
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1solveWithParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  operations_research::RoutingSearchParameters temp2 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RoutingSearchParameters protocol message.");
    }
    arg2 = &temp2;
  }
  result = (operations_research::Assignment *)(arg1)->SolveWithParameters((operations_research::RoutingSearchParameters const &)*arg2);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1solveFromAssignmentWithParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::RoutingSearchParameters *arg3 = 0 ;
  operations_research::RoutingSearchParameters temp3 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg3, &proto_size));
    bool parsed_ok = temp3.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RoutingSearchParameters protocol message.");
    }
    arg3 = &temp3;
  }
  result = (operations_research::Assignment *)(arg1)->SolveFromAssignmentWithParameters((operations_research::Assignment const *)arg2,(operations_research::RoutingSearchParameters const &)*arg3);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1setAssignmentFromOtherModelAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::RoutingModel *arg3 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg4 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::RoutingModel **)&jarg3; 
  arg4 = *(operations_research::Assignment **)&jarg4; 
  (arg1)->SetAssignmentFromOtherModelAssignment(arg2,(operations_research::RoutingModel const *)arg3,(operations_research::Assignment const *)arg4);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1computeLowerBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int64)(arg1)->ComputeLowerBound();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (operations_research::RoutingModel::Status)((operations_research::RoutingModel const *)arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1applyLocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64 > *arg2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    arg2 = new std::vector<int64>;
    const int size = jenv->GetArrayLength(jarg2);
    arg2->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg2, NULL);
    for (int i = 0; i < size; ++i) {
      arg2->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg2, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::IntVar *)(arg1)->ApplyLocks((std::vector< int64 > const &)*arg2);
  *(operations_research::IntVar **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1applyLocksToAllVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64 > > *arg2 = 0 ;
  bool arg3 ;
  std::vector< std::vector< int64 > > result2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    const int size = jenv->GetArrayLength(jarg2);
    result2.clear();
    result2.resize(size);
    for (int index1 = 0; index1 < size; ++index1) {
      jlongArray inner_array =
      (jlongArray)jenv->GetObjectArrayElement(jarg2, index1);
      const int inner_size = jenv->GetArrayLength(inner_array);
      result2[index1].reserve(inner_size);
      jlong * const values =
      jenv->GetLongArrayElements((jlongArray)inner_array, NULL);
      for (int index2 = 0; index2 < inner_size; ++index2) {
        result2[index1].emplace_back(values[index2]);
      }
      jenv->ReleaseLongArrayElements((jlongArray)inner_array, values, JNI_ABORT);
      jenv->DeleteLocalRef(inner_array);
    }
    arg2 = &result2;
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->ApplyLocksToAllVehicles((std::vector< std::vector< int64 > > const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1preAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (operations_research::Assignment *)((operations_research::RoutingModel const *)arg1)->PreAssignment();
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1mutablePreAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (operations_research::Assignment *)(arg1)->MutablePreAssignment();
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1writeAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((operations_research::RoutingModel const *)arg1)->WriteAssignment((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1readAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (operations_research::Assignment *)(arg1)->ReadAssignment((std::string const &)*arg2);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1restoreAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  result = (operations_research::Assignment *)(arg1)->RestoreAssignment((operations_research::Assignment const &)*arg2);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1readAssignmentFromRoutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64 > > *arg2 = 0 ;
  bool arg3 ;
  std::vector< std::vector< int64 > > result2 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    const int size = jenv->GetArrayLength(jarg2);
    result2.clear();
    result2.resize(size);
    for (int index1 = 0; index1 < size; ++index1) {
      jlongArray inner_array =
      (jlongArray)jenv->GetObjectArrayElement(jarg2, index1);
      const int inner_size = jenv->GetArrayLength(inner_array);
      result2[index1].reserve(inner_size);
      jlong * const values =
      jenv->GetLongArrayElements((jlongArray)inner_array, NULL);
      for (int index2 = 0; index2 < inner_size; ++index2) {
        result2[index1].emplace_back(values[index2]);
      }
      jenv->ReleaseLongArrayElements((jlongArray)inner_array, values, JNI_ABORT);
      jenv->DeleteLocalRef(inner_array);
    }
    arg2 = &result2;
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = jarg3 ? true : false; 
  result = (operations_research::Assignment *)(arg1)->ReadAssignmentFromRoutes((std::vector< std::vector< int64 > > const &)*arg2,arg3);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1routesToAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64 > > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  operations_research::Assignment *arg5 = (operations_research::Assignment *) (operations_research::Assignment *)0 ;
  std::vector< std::vector< int64 > > result2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    const int size = jenv->GetArrayLength(jarg2);
    result2.clear();
    result2.resize(size);
    for (int index1 = 0; index1 < size; ++index1) {
      jlongArray inner_array =
      (jlongArray)jenv->GetObjectArrayElement(jarg2, index1);
      const int inner_size = jenv->GetArrayLength(inner_array);
      result2[index1].reserve(inner_size);
      jlong * const values =
      jenv->GetLongArrayElements((jlongArray)inner_array, NULL);
      for (int index2 = 0; index2 < inner_size; ++index2) {
        result2[index1].emplace_back(values[index2]);
      }
      jenv->ReleaseLongArrayElements((jlongArray)inner_array, values, JNI_ABORT);
      jenv->DeleteLocalRef(inner_array);
    }
    arg2 = &result2;
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(operations_research::Assignment **)&jarg5; 
  result = (bool)((operations_research::RoutingModel const *)arg1)->RoutesToAssignment((std::vector< std::vector< int64 > > const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1assignmentToRoutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  std::vector< std::vector< int64 > > *arg3 = (std::vector< std::vector< int64 > > *) (std::vector< std::vector< int64 > > *)0 ;
  std::vector< std::vector< int64 > > temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return ;
  } 
  
  if (!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
    return ;
  }
  arg3 = &temp3;
  
  ((operations_research::RoutingModel const *)arg1)->AssignmentToRoutes((operations_research::Assignment const &)*arg2,arg3);
  
  // Verify arg has enough inner array element(s) since we can't resize it.
  const int outer_size = arg3->size();
  if (jenv->GetArrayLength(jarg3) < outer_size) {
    std::string message("Array must contain at least ");
    message += std::to_string(outer_size);
    message += " inner array element(s), only contains ";
    message += std::to_string(outer_size);
    message += " element(s).";
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, message.c_str());
    return ;
  }
  
  for (int index1 = 0; index1 < outer_size; ++index1) {
    // Create inner array
    const int inner_size = (*arg3)[index1].size();
    jlongArray inner_array = jenv->NewLongArray(inner_size);
    // Copy data in it
    jenv->SetLongArrayRegion(inner_array, 0, inner_size, reinterpret_cast<const jlong*>((*arg3)[index1].data()))
    
    
    
    ;
    // Add innner_array to jarg3
    jenv->SetObjectArrayElement(jarg3, index1, inner_array);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1compactAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  result = (operations_research::Assignment *)((operations_research::RoutingModel const *)arg1)->CompactAssignment((operations_research::Assignment const &)*arg2);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1compactAndCheckAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  result = (operations_research::Assignment *)((operations_research::RoutingModel const *)arg1)->CompactAndCheckAssignment((operations_research::Assignment const &)*arg2);
  *(operations_research::Assignment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addToAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::IntVar **)&jarg2; 
  (arg1)->AddToAssignment(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addIntervalToAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::IntervalVar **)&jarg2; 
  (arg1)->AddIntervalToAssignment(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addLocalSearchFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::LocalSearchFilter *arg2 = (operations_research::LocalSearchFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::LocalSearchFilter **)&jarg2; 
  (arg1)->AddLocalSearchFilter(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->Start(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->End(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1isStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::RoutingModel const *)arg1)->IsStart(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1isEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::RoutingModel const *)arg1)->IsEnd(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1VehicleIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((operations_research::RoutingModel const *)arg1)->VehicleIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  int64 arg3 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  arg3 = (int64)jarg3; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->Next((operations_research::Assignment const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1isVehicleUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)((operations_research::RoutingModel const *)arg1)->IsVehicleUsed((operations_research::Assignment const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1nexts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< operations_research::IntVar * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (std::vector< operations_research::IntVar * > *) &((operations_research::RoutingModel const *)arg1)->Nexts();
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::IntVar **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1vehicleVars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< operations_research::IntVar * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (std::vector< operations_research::IntVar * > *) &((operations_research::RoutingModel const *)arg1)->VehicleVars();
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::IntVar **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1nextVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->NextVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1activeVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->ActiveVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1VehicleCostsConsideredVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->VehicleCostsConsideredVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1vehicleVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->VehicleVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1costVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->CostVar();
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getArcCostForVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetArcCostForVehicle(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1costsAreHomogeneousAcrossVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (bool)((operations_research::RoutingModel const *)arg1)->CostsAreHomogeneousAcrossVehicles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getHomogeneousCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetHomogeneousCost(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getArcCostForFirstSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetArcCostForFirstSolution(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getArcCostForClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetArcCostForClass(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getCostClassIndexOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  operations_research::RoutingModel::CostClassIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = ((operations_research::RoutingModel const *)arg1)->GetCostClassIndexOfVehicle(arg2);
  {
    jresult = (jint)(&result)->value();
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1hasVehicleWithCostClassIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::CostClassIndex arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    arg2 = operations_research::RoutingCostClassIndex(jarg2);
  }
  result = (bool)((operations_research::RoutingModel const *)arg1)->HasVehicleWithCostClassIndex(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getCostClassesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int)((operations_research::RoutingModel const *)arg1)->GetCostClassesCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getNonZeroCostClassesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int)((operations_research::RoutingModel const *)arg1)->GetNonZeroCostClassesCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getVehicleClassIndexOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  operations_research::RoutingModel::VehicleClassIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = ((operations_research::RoutingModel const *)arg1)->GetVehicleClassIndexOfVehicle(arg2);
  {
    jresult = (jint)(&result)->value();
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getVehicleClassesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int)((operations_research::RoutingModel const *)arg1)->GetVehicleClassesCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getSameVehicleIndicesOfIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jintArray jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::vector< int > *) &((operations_research::RoutingModel const *)arg1)->GetSameVehicleIndicesOfIndex(arg2);
  
  jresult = jenv->NewIntArray(result->size());
  jenv->SetIntArrayRegion(
    jresult, 0, result->size(), reinterpret_cast<const jint*>(result->data()));
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1arcIsMoreConstrainedThanArc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (bool)(arg1)->ArcIsMoreConstrainedThanArc(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1debugOutputAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jstring jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::Assignment const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((operations_research::RoutingModel const *)arg1)->DebugOutputAssignment((operations_research::Assignment const &)*arg2,(std::string const &)*arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1solver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Solver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (operations_research::Solver *)((operations_research::RoutingModel const *)arg1)->solver();
  *(operations_research::Solver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1checkLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (bool)(arg1)->CheckLimit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int)((operations_research::RoutingModel const *)arg1)->nodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1vehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int)((operations_research::RoutingModel const *)arg1)->vehicles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (int64)((operations_research::RoutingModel const *)arg1)->Size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getNumberOfDecisionsInFirstSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  operations_research::RoutingSearchParameters temp2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RoutingSearchParameters protocol message.");
    }
    arg2 = &temp2;
  }
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetNumberOfDecisionsInFirstSolution((operations_research::RoutingSearchParameters const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1getNumberOfRejectsInFirstSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  operations_research::RoutingSearchParameters temp2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RoutingSearchParameters protocol message.");
    }
    arg2 = &temp2;
  }
  result = (int64)((operations_research::RoutingModel const *)arg1)->GetNumberOfRejectsInFirstSolution((operations_research::RoutingSearchParameters const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1isMatchingModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (bool)((operations_research::RoutingModel const *)arg1)->IsMatchingModel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1makeGuidedSlackFinalizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = (operations_research::RoutingDimension *) 0 ;
  std::function< int64 (int64) > arg3 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::RoutingDimension **)&jarg2; 
  
  jclass jarg3_object_class = jenv->GetObjectClass(jarg3);
  if (nullptr == jarg3_object_class) return 0;
  jmethodID jarg3_method_id = jenv->GetMethodID(
    jarg3_object_class, "applyAsLong", "(J)J");
  assert(jarg3_method_id != nullptr);
  // jarg3 will be deleted once this function return.
  jobject jarg3_object = jenv->NewGlobalRef(jarg3);
  
  // Global JNI reference deleter
  auto jarg3_guard = std::make_shared<GlobalRefGuard>(jenv, jarg3_object);
  arg3 = [jenv, jarg3_object, jarg3_method_id, jarg3_guard](long t) -> long {
    return jenv->CallLongMethod(jarg3_object, jarg3_method_id, (jlong)t);
  };
  
  result = (operations_research::DecisionBuilder *)(arg1)->MakeGuidedSlackFinalizer((operations_research::RoutingDimension const *)arg2,arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1makeSelfDependentDimensionFinalizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = (operations_research::RoutingDimension *) 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  arg2 = *(operations_research::RoutingDimension **)&jarg2; 
  result = (operations_research::DecisionBuilder *)(arg1)->MakeSelfDependentDimensionFinalizer((operations_research::RoutingDimension const *)arg2);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModel_1addMatrixDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg3, jboolean jarg4, jstring jarg5) {
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64 > > *arg2 = 0 ;
  int64 arg3 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  std::vector< std::vector< int64 > > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  
  if(jarg2) {
    const int size = jenv->GetArrayLength(jarg2);
    result2.clear();
    result2.resize(size);
    for (int index1 = 0; index1 < size; ++index1) {
      jlongArray inner_array =
      (jlongArray)jenv->GetObjectArrayElement(jarg2, index1);
      const int inner_size = jenv->GetArrayLength(inner_array);
      result2[index1].reserve(inner_size);
      jlong * const values =
      jenv->GetLongArrayElements((jlongArray)inner_array, NULL);
      for (int index2 = 0; index2 < inner_size; ++index2) {
        result2[index1].emplace_back(values[index2]);
      }
      jenv->ReleaseLongArrayElements((jlongArray)inner_array, values, JNI_ABORT);
      jenv->DeleteLocalRef(inner_array);
    }
    arg2 = &result2;
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  arg3 = (int64)jarg3; 
  arg4 = jarg4 ? true : false; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  operations_research_RoutingModel_addMatrixDimension(arg1,(std::vector< std::vector< long > > const &)*arg2,arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModelVisitor_1kLightElement_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::RoutingModelVisitor::kLightElement;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModelVisitor_1kLightElement2_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::RoutingModelVisitor::kLightElement2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModelVisitor_1kRemoveValues_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)operations_research::RoutingModelVisitor::kRemoveValues;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1RoutingModelVisitor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  operations_research::RoutingModelVisitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (operations_research::RoutingModelVisitor *)new operations_research::RoutingModelVisitor();
  *(operations_research::RoutingModelVisitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RoutingModelVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::RoutingModelVisitor *arg1 = (operations_research::RoutingModelVisitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::RoutingModelVisitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1GlobalVehicleBreaksConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  operations_research::GlobalVehicleBreaksConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (operations_research::GlobalVehicleBreaksConstraint *)new operations_research::GlobalVehicleBreaksConstraint((operations_research::RoutingDimension const *)arg1);
  *(operations_research::GlobalVehicleBreaksConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_GlobalVehicleBreaksConstraint_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::GlobalVehicleBreaksConstraint *arg1 = (operations_research::GlobalVehicleBreaksConstraint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::GlobalVehicleBreaksConstraint **)&jarg1; 
  result = ((operations_research::GlobalVehicleBreaksConstraint const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_GlobalVehicleBreaksConstraint_1post(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::GlobalVehicleBreaksConstraint *arg1 = (operations_research::GlobalVehicleBreaksConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::GlobalVehicleBreaksConstraint **)&jarg1; 
  (arg1)->Post();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_GlobalVehicleBreaksConstraint_1initialPropagate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::GlobalVehicleBreaksConstraint *arg1 = (operations_research::GlobalVehicleBreaksConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::GlobalVehicleBreaksConstraint **)&jarg1; 
  (arg1)->InitialPropagate();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1GlobalVehicleBreaksConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::GlobalVehicleBreaksConstraint *arg1 = (operations_research::GlobalVehicleBreaksConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::GlobalVehicleBreaksConstraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1TypeRegulationsChecker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::TypeRegulationsChecker *arg1 = (operations_research::TypeRegulationsChecker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::TypeRegulationsChecker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1TypeIncompatibilityChecker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = 0 ;
  bool arg2 ;
  operations_research::TypeIncompatibilityChecker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::RoutingModel const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (operations_research::TypeIncompatibilityChecker *)new operations_research::TypeIncompatibilityChecker((operations_research::RoutingModel const &)*arg1,arg2);
  *(operations_research::TypeIncompatibilityChecker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1TypeIncompatibilityChecker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::TypeIncompatibilityChecker *arg1 = (operations_research::TypeIncompatibilityChecker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::TypeIncompatibilityChecker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1TypeRequirementChecker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = 0 ;
  operations_research::TypeRequirementChecker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::RoutingModel const & reference is null");
    return 0;
  } 
  result = (operations_research::TypeRequirementChecker *)new operations_research::TypeRequirementChecker((operations_research::RoutingModel const &)*arg1);
  *(operations_research::TypeRequirementChecker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1TypeRequirementChecker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::TypeRequirementChecker *arg1 = (operations_research::TypeRequirementChecker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::TypeRequirementChecker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1TypeRegulationsConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = 0 ;
  operations_research::TypeRegulationsConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::RoutingModel const & reference is null");
    return 0;
  } 
  result = (operations_research::TypeRegulationsConstraint *)new operations_research::TypeRegulationsConstraint((operations_research::RoutingModel const &)*arg1);
  *(operations_research::TypeRegulationsConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_TypeRegulationsConstraint_1post(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::TypeRegulationsConstraint *arg1 = (operations_research::TypeRegulationsConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::TypeRegulationsConstraint **)&jarg1; 
  (arg1)->Post();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_TypeRegulationsConstraint_1initialPropagate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::TypeRegulationsConstraint *arg1 = (operations_research::TypeRegulationsConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::TypeRegulationsConstraint **)&jarg1; 
  (arg1)->InitialPropagate();
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1TypeRegulationsConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::TypeRegulationsConstraint *arg1 = (operations_research::TypeRegulationsConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::TypeRegulationsConstraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1RoutingDimension(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  operations_research::RoutingModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (operations_research::RoutingModel *)((operations_research::RoutingDimension const *)arg1)->model();
  *(operations_research::RoutingModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getTransitValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetTransitValue(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getTransitValueFromClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetTransitValueFromClass(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1cumulVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)((operations_research::RoutingDimension const *)arg1)->CumulVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1transitVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)((operations_research::RoutingDimension const *)arg1)->TransitVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1fixedTransitVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)((operations_research::RoutingDimension const *)arg1)->FixedTransitVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1slackVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  operations_research::IntVar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (operations_research::IntVar *)((operations_research::RoutingDimension const *)arg1)->SlackVar(arg2);
  *(operations_research::IntVar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1cumuls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  std::vector< operations_research::IntVar * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (std::vector< operations_research::IntVar * > *) &((operations_research::RoutingDimension const *)arg1)->cumuls();
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::IntVar **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1fixed_1transits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  std::vector< operations_research::IntVar * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (std::vector< operations_research::IntVar * > *) &((operations_research::RoutingDimension const *)arg1)->fixed_transits();
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::IntVar **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1transits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  std::vector< operations_research::IntVar * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (std::vector< operations_research::IntVar * > *) &((operations_research::RoutingDimension const *)arg1)->transits();
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::IntVar **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1slacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  std::vector< operations_research::IntVar * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (std::vector< operations_research::IntVar * > *) &((operations_research::RoutingDimension const *)arg1)->slacks();
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::IntVar **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setSpanUpperBoundForVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetSpanUpperBoundForVehicle(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setSpanCostCoefficientForVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetSpanCostCoefficientForVehicle(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setSpanCostCoefficientForAllVehicles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetSpanCostCoefficientForAllVehicles(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setGlobalSpanCostCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetGlobalSpanCostCoefficient(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setCumulVarSoftUpperBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetCumulVarSoftUpperBound(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1hasCumulVarSoftUpperBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::RoutingDimension const *)arg1)->HasCumulVarSoftUpperBound(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getCumulVarSoftUpperBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetCumulVarSoftUpperBound(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getCumulVarSoftUpperBoundCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetCumulVarSoftUpperBoundCoefficient(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setCumulVarSoftLowerBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetCumulVarSoftLowerBound(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1hasCumulVarSoftLowerBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (bool)((operations_research::RoutingDimension const *)arg1)->HasCumulVarSoftLowerBound(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getCumulVarSoftLowerBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetCumulVarSoftLowerBound(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getCumulVarSoftLowerBoundCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetCumulVarSoftLowerBoundCoefficient(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setBreakIntervalsOfVehicle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3, jint jarg4, jint jarg5) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  SwigValueWrapper< std::vector< operations_research::IntervalVar * > > arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(object_class,
      "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = result2;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SetBreakIntervalsOfVehicle(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setBreakIntervalsOfVehicle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3, jlongArray jarg4) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  SwigValueWrapper< std::vector< operations_research::IntervalVar * > > arg2 ;
  int arg3 ;
  std::vector< int64 > arg4 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(object_class,
      "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = result2;
  }
  arg3 = (int)jarg3; 
  
  if(jarg4) {
    const int size = jenv->GetArrayLength(jarg4);
    (&arg4)->clear();
    (&arg4)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg4)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  (arg1)->SetBreakIntervalsOfVehicle(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1SetBreakDistanceDurationOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetBreakDistanceDurationOfVehicle(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1InitializeBreaks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  (arg1)->InitializeBreaks();
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1HasBreakConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (bool)((operations_research::RoutingDimension const *)arg1)->HasBreakConstraints();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setBreakIntervalsOfVehicle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3, jlongArray jarg4, jobject jarg5) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  SwigValueWrapper< std::vector< operations_research::IntervalVar * > > arg2 ;
  int arg3 ;
  std::vector< int64 > arg4 ;
  std::function< int64 (int64,int64) > arg5 ;
  std::vector< operations_research::IntervalVar * > result2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return ;
    jmethodID method_id =
    jenv->GetStaticMethodID(object_class,
      "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntervalVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = result2;
  }
  arg3 = (int)jarg3; 
  
  if(jarg4) {
    const int size = jenv->GetArrayLength(jarg4);
    (&arg4)->clear();
    (&arg4)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg4, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg4)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg4, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return ;
  }
  
  
  jclass jarg5_object_class = jenv->GetObjectClass(jarg5);
  if (nullptr == jarg5_object_class) return ;
  jmethodID jarg5_method_id = jenv->GetMethodID(
    jarg5_object_class, "applyAsLong", "(JJ)J");
  assert(jarg5_method_id != nullptr);
  // jarg5 will be deleted once this function return.
  jobject jarg5_object = jenv->NewGlobalRef(jarg5);
  
  // Global JNI reference deleter
  auto jarg5_guard = std::make_shared<GlobalRefGuard>(jenv, jarg5_object);
  arg5 = [jenv, jarg5_object, jarg5_method_id, jarg5_guard](long t,long u) -> long {
    return jenv->CallLongMethod(jarg5_object, jarg5_method_id, (jlong)t,(jlong)u);
  };
  
  (arg1)->SetBreakIntervalsOfVehicle(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jobjectArray JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getBreakIntervalsOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobjectArray jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  std::vector< operations_research::IntervalVar * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::vector< operations_research::IntervalVar * > *) &((operations_research::RoutingDimension const *)arg1)->GetBreakIntervalsOfVehicle(arg2);
  {
    if (nullptr == result)
    return 0;
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntervalVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jresult = jenv->NewObjectArray(result->size(), object_class, 0);
    jmethodID ctor = jenv->GetMethodID(object_class,"<init>", "(JZ)V");
    for (int i = 0; i < result->size(); ++i) {
      jlong obj_ptr = 0;
      *((operations_research::IntervalVar **)&obj_ptr) = (*result)[i];
      jobject elem = jenv->NewObject(object_class, ctor, obj_ptr, false);
      jenv->SetObjectArrayElement(jresult, i, elem);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1GetPreTravelEvaluatorOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((operations_research::RoutingDimension const *)arg1)->GetPreTravelEvaluatorOfVehicle(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1GetPostTravelEvaluatorOfVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((operations_research::RoutingDimension const *)arg1)->GetPostTravelEvaluatorOfVehicle(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1base_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  operations_research::RoutingDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (operations_research::RoutingDimension *)((operations_research::RoutingDimension const *)arg1)->base_dimension();
  *(operations_research::RoutingDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1shortestTransitionSlack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->ShortestTransitionSlack(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (std::string *) &((operations_research::RoutingDimension const *)arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1setPickupToDeliveryLimitFunctionForPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  operations_research::RoutingDimension::PickupToDeliveryLimitFunction arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  
  jclass jarg2_object_class = jenv->GetObjectClass(jarg2);
  if (nullptr == jarg2_object_class) return ;
  jmethodID jarg2_method_id = jenv->GetMethodID(
    jarg2_object_class, "applyAsLong", "(II)J");
  assert(jarg2_method_id != nullptr);
  // jarg2 will be deleted once this function return.
  jobject jarg2_object = jenv->NewGlobalRef(jarg2);
  
  // Global JNI reference deleter
  auto jarg2_guard = std::make_shared<GlobalRefGuard>(jenv, jarg2_object);
  arg2 = [jenv, jarg2_object, jarg2_method_id, jarg2_guard](int t,int u) -> long {
    return jenv->CallLongMethod(jarg2_object, jarg2_method_id, (jint)t,(jint)u);
  };
  
  arg3 = (int)jarg3; 
  (arg1)->SetPickupToDeliveryLimitFunctionForPair(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1hasPickupToDeliveryLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (bool)((operations_research::RoutingDimension const *)arg1)->HasPickupToDeliveryLimits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1addNodePrecedence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->AddNodePrecedence(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getSpanUpperBoundForVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetSpanUpperBoundForVehicle(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getSpanCostCoefficientForVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetSpanCostCoefficientForVehicle(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1getGlobalSpanCostCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->global_span_cost_coefficient();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1GetGlobalOptimizerOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetGlobalOptimizerOffset();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingDimension_1GetLocalOptimizerOffsetForVehicle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingDimension **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)((operations_research::RoutingDimension const *)arg1)->GetLocalOptimizerOffsetForVehicle(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_makeSetValuesFromTargets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlongArray jarg3) {
  jlong jresult = 0 ;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  SwigValueWrapper< std::vector< operations_research::IntVar * > > arg2 ;
  std::vector< int64 > arg3 ;
  std::vector< operations_research::IntVar * > result2 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::Solver **)&jarg1; 
  {
    std::string java_class_path ="com/google/ortools/constraintsolver" "/""IntVar";
    jclass object_class = jenv->FindClass(java_class_path.c_str());
    if (nullptr == object_class)
    return 0;
    jmethodID method_id =
    jenv->GetStaticMethodID(object_class,
      "getCPtr",
      std::string("(L" + java_class_path + ";)J").c_str());
    assert(method_id != nullptr);
    for (int i = 0; i < jenv->GetArrayLength(jarg2); i++) {
      jobject elem = jenv->GetObjectArrayElement(jarg2, i);
      jlong ptr_value = jenv->CallStaticLongMethod(object_class, method_id, elem);
      result2.push_back(/*@SWIG:/home/anselme/Documents/or-tools/ortools/util/java/vector.i,259,REINTERPRET_CAST@*/
        reinterpret_cast<operations_research::IntVar*>(ptr_value)
        /*@SWIG@*/);
    }
    arg2 = result2;
  }
  
  if(jarg3) {
    const int size = jenv->GetArrayLength(jarg3);
    (&arg3)->clear();
    (&arg3)->reserve(size);
    jlong *values = jenv->GetLongArrayElements((jlongArray)jarg3, NULL);
    for (int i = 0; i < size; ++i) {
      (&arg3)->emplace_back(values[i]);
    }
    jenv->ReleaseLongArrayElements((jlongArray)jarg3, values, JNI_ABORT);
  }
  else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null table");
    return 0;
  }
  
  result = (operations_research::DecisionBuilder *)operations_research::MakeSetValuesFromTargets(arg1,arg2,arg3);
  *(operations_research::DecisionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolveModelWithSat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  operations_research::RoutingModel *arg1 = 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg4 = (operations_research::Assignment *) 0 ;
  operations_research::RoutingSearchParameters temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(operations_research::RoutingModel **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "operations_research::RoutingModel const & reference is null");
    return 0;
  } 
  {
    int proto_size = 0;
    std::unique_ptr<char[]> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse operations_research::RoutingSearchParameters protocol message.");
    }
    arg2 = &temp2;
  }
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = *(operations_research::Assignment **)&jarg4; 
  result = (bool)operations_research::SolveModelWithSat((operations_research::RoutingModel const &)*arg1,(operations_research::RoutingSearchParameters const &)*arg2,(operations_research::Assignment const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1BasePathFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::BasePathFilter *arg1 = (operations_research::BasePathFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::BasePathFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BasePathFilter_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  operations_research::BasePathFilter *arg1 = (operations_research::BasePathFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  int64 arg4 ;
  int64 arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::BasePathFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  result = (bool)(arg1)->Accept((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BasePathFilter_1onSynchronize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::BasePathFilter *arg1 = (operations_research::BasePathFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::BasePathFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  (arg1)->OnSynchronize((operations_research::Assignment const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_new_1CPFeasibilityFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::CPFeasibilityFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::RoutingModel **)&jarg1; 
  result = (operations_research::CPFeasibilityFilter *)new operations_research::CPFeasibilityFilter((operations_research::RoutingModel const *)arg1);
  *(operations_research::CPFeasibilityFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_delete_1CPFeasibilityFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  operations_research::CPFeasibilityFilter *arg1 = (operations_research::CPFeasibilityFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(operations_research::CPFeasibilityFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CPFeasibilityFilter_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  operations_research::CPFeasibilityFilter *arg1 = (operations_research::CPFeasibilityFilter *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(operations_research::CPFeasibilityFilter **)&jarg1; 
  result = ((operations_research::CPFeasibilityFilter const *)arg1)->DebugString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CPFeasibilityFilter_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  operations_research::CPFeasibilityFilter *arg1 = (operations_research::CPFeasibilityFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  int64 arg4 ;
  int64 arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(operations_research::CPFeasibilityFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  arg3 = *(operations_research::Assignment **)&jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int64)jarg5; 
  result = (bool)(arg1)->Accept((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CPFeasibilityFilter_1onSynchronize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  operations_research::CPFeasibilityFilter *arg1 = (operations_research::CPFeasibilityFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(operations_research::CPFeasibilityFilter **)&jarg1; 
  arg2 = *(operations_research::Assignment **)&jarg2; 
  (arg1)->OnSynchronize((operations_research::Assignment const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationBaseObject_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::PropagationBaseObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Decision_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::Decision **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionVisitor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::DecisionVisitor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DecisionBuilder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::DecisionBuilder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Demon_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::Demon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ModelVisitor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::ModelVisitor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Constraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::PropagationBaseObject **)&baseptr = *(operations_research::Constraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CastConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::Constraint **)&baseptr = *(operations_research::CastConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchMonitor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::SearchMonitor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntExpr_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::PropagationBaseObject **)&baseptr = *(operations_research::IntExpr **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarIterator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::IntVarIterator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::IntExpr **)&baseptr = *(operations_research::IntVar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionCollector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::SearchMonitor **)&baseptr = *(operations_research::SolutionCollector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_OptimizeVar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::SearchMonitor **)&baseptr = *(operations_research::OptimizeVar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLimit_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::SearchMonitor **)&baseptr = *(operations_research::SearchLimit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RegularLimit_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::SearchLimit **)&baseptr = *(operations_research::RegularLimit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::PropagationBaseObject **)&baseptr = *(operations_research::IntervalVar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::PropagationBaseObject **)&baseptr = *(operations_research::SequenceVar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::AssignmentElement **)&baseptr = *(operations_research::IntVarElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntervalVarElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::AssignmentElement **)&baseptr = *(operations_research::IntervalVarElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::AssignmentElement **)&baseptr = *(operations_research::SequenceVarElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Assignment_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::PropagationBaseObject **)&baseptr = *(operations_research::Assignment **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_Pack_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::Constraint **)&baseptr = *(operations_research::Pack **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_DisjunctiveConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::Constraint **)&baseptr = *(operations_research::DisjunctiveConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SolutionPool_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::SolutionPool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseIntExpr_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::IntExpr **)&baseptr = *(operations_research::BaseIntExpr **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchOperator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::LocalSearchOperator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperatorTemplate_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::LocalSearchOperator **)&baseptr = *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchOperator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::VarLocalSearchOperator< operations_research::IntVar,int64,operations_research::IntVarLocalSearchHandler > **)&baseptr = *(operations_research::IntVarLocalSearchOperator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperatorTemplate_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::LocalSearchOperator **)&baseptr = *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SequenceVarLocalSearchOperator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::VarLocalSearchOperator< operations_research::SequenceVar,std::vector< int >,operations_research::SequenceVarLocalSearchHandler > **)&baseptr = *(operations_research::SequenceVarLocalSearchOperator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BaseLns_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::IntVarLocalSearchOperator **)&baseptr = *(operations_research::BaseLns **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_ChangeValue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::IntVarLocalSearchOperator **)&baseptr = *(operations_research::ChangeValue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PathOperator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::IntVarLocalSearchOperator **)&baseptr = *(operations_research::PathOperator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::LocalSearchFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_IntVarLocalSearchFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::LocalSearchFilter **)&baseptr = *(operations_research::IntVarLocalSearchFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_PropagationMonitor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::SearchMonitor **)&baseptr = *(operations_research::PropagationMonitor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_LocalSearchMonitor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::SearchMonitor **)&baseptr = *(operations_research::LocalSearchMonitor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BooleanVar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::IntVar **)&baseptr = *(operations_research::BooleanVar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SymmetryBreaker_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::DecisionVisitor **)&baseptr = *(operations_research::SymmetryBreaker **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_SearchLog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::SearchMonitor **)&baseptr = *(operations_research::SearchLog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_RoutingModelVisitor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::BaseObject **)&baseptr = *(operations_research::RoutingModelVisitor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_GlobalVehicleBreaksConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::Constraint **)&baseptr = *(operations_research::GlobalVehicleBreaksConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_TypeIncompatibilityChecker_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::TypeRegulationsChecker **)&baseptr = *(operations_research::TypeIncompatibilityChecker **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_TypeRequirementChecker_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::TypeRegulationsChecker **)&baseptr = *(operations_research::TypeRequirementChecker **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_TypeRegulationsConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::Constraint **)&baseptr = *(operations_research::TypeRegulationsConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_BasePathFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::IntVarLocalSearchFilter **)&baseptr = *(operations_research::BasePathFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_ortools_constraintsolver_mainJNI_CPFeasibilityFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(operations_research::IntVarLocalSearchFilter **)&baseptr = *(operations_research::CPFeasibilityFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_google_ortools_constraintsolver_mainJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[113] = {
    {
      "SwigDirector_Decision_toString", "(Lcom/google/ortools/constraintsolver/Decision;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Decision_apply", "(Lcom/google/ortools/constraintsolver/Decision;J)V" 
    },
    {
      "SwigDirector_Decision_refute", "(Lcom/google/ortools/constraintsolver/Decision;J)V" 
    },
    {
      "SwigDirector_Decision_accept", "(Lcom/google/ortools/constraintsolver/Decision;J)V" 
    },
    {
      "SwigDirector_DecisionVisitor_toString", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_DecisionVisitor_visitSetVariableValue", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;JJ)V" 
    },
    {
      "SwigDirector_DecisionVisitor_visitSplitVariableDomain", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;JJZ)V" 
    },
    {
      "SwigDirector_DecisionVisitor_visitScheduleOrPostpone", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;JJ)V" 
    },
    {
      "SwigDirector_DecisionVisitor_visitScheduleOrExpedite", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;JJ)V" 
    },
    {
      "SwigDirector_DecisionVisitor_visitRankFirstInterval", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;JI)V" 
    },
    {
      "SwigDirector_DecisionVisitor_visitRankLastInterval", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;JI)V" 
    },
    {
      "SwigDirector_DecisionVisitor_visitUnknownDecision", "(Lcom/google/ortools/constraintsolver/DecisionVisitor;)V" 
    },
    {
      "SwigDirector_DecisionBuilder_toString", "(Lcom/google/ortools/constraintsolver/DecisionBuilder;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_DecisionBuilder_nextWrap", "(Lcom/google/ortools/constraintsolver/DecisionBuilder;J)J" 
    },
    {
      "SwigDirector_SearchMonitor_toString", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_SearchMonitor_enterSearch", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_restartSearch", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_exitSearch", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_beginNextDecision", "(Lcom/google/ortools/constraintsolver/SearchMonitor;J)V" 
    },
    {
      "SwigDirector_SearchMonitor_endNextDecision", "(Lcom/google/ortools/constraintsolver/SearchMonitor;JJ)V" 
    },
    {
      "SwigDirector_SearchMonitor_applyDecision", "(Lcom/google/ortools/constraintsolver/SearchMonitor;J)V" 
    },
    {
      "SwigDirector_SearchMonitor_refuteDecision", "(Lcom/google/ortools/constraintsolver/SearchMonitor;J)V" 
    },
    {
      "SwigDirector_SearchMonitor_afterDecision", "(Lcom/google/ortools/constraintsolver/SearchMonitor;JZ)V" 
    },
    {
      "SwigDirector_SearchMonitor_beginFail", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_endFail", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_beginInitialPropagation", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_endInitialPropagation", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_acceptSolution", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)Z" 
    },
    {
      "SwigDirector_SearchMonitor_atSolution", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)Z" 
    },
    {
      "SwigDirector_SearchMonitor_noMoreSolutions", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_localOptimum", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)Z" 
    },
    {
      "SwigDirector_SearchMonitor_acceptDelta", "(Lcom/google/ortools/constraintsolver/SearchMonitor;JJ)Z" 
    },
    {
      "SwigDirector_SearchMonitor_acceptNeighbor", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_AcceptUncheckedNeighbor", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_IsUncheckedSolutionLimitReached", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)Z" 
    },
    {
      "SwigDirector_SearchMonitor_periodicCheck", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_SearchMonitor_progressPercent", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)I" 
    },
    {
      "SwigDirector_SearchMonitor_accept", "(Lcom/google/ortools/constraintsolver/SearchMonitor;J)V" 
    },
    {
      "SwigDirector_SearchMonitor_install", "(Lcom/google/ortools/constraintsolver/SearchMonitor;)V" 
    },
    {
      "SwigDirector_LocalSearchOperator_toString", "(Lcom/google/ortools/constraintsolver/LocalSearchOperator;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_LocalSearchOperator_nextNeighbor", "(Lcom/google/ortools/constraintsolver/LocalSearchOperator;JJ)Z" 
    },
    {
      "SwigDirector_LocalSearchOperator_start", "(Lcom/google/ortools/constraintsolver/LocalSearchOperator;J)V" 
    },
    {
      "SwigDirector_LocalSearchOperator_reset", "(Lcom/google/ortools/constraintsolver/LocalSearchOperator;)V" 
    },
    {
      "SwigDirector_LocalSearchOperator_HasFragments", "(Lcom/google/ortools/constraintsolver/LocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_LocalSearchOperator_HoldsDelta", "(Lcom/google/ortools/constraintsolver/LocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_IntVarLocalSearchOperator_toString", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchOperator;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_IntVarLocalSearchOperator_reset", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchOperator;)V" 
    },
    {
      "SwigDirector_IntVarLocalSearchOperator_HasFragments", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_IntVarLocalSearchOperator_HoldsDelta", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_IntVarLocalSearchOperator_isIncremental", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_IntVarLocalSearchOperator_onStart", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchOperator;)V" 
    },
    {
      "SwigDirector_IntVarLocalSearchOperator_oneNeighbor", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_SequenceVarLocalSearchOperator_toString", "(Lcom/google/ortools/constraintsolver/SequenceVarLocalSearchOperator;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_SequenceVarLocalSearchOperator_nextNeighbor", "(Lcom/google/ortools/constraintsolver/SequenceVarLocalSearchOperator;JJ)Z" 
    },
    {
      "SwigDirector_SequenceVarLocalSearchOperator_reset", "(Lcom/google/ortools/constraintsolver/SequenceVarLocalSearchOperator;)V" 
    },
    {
      "SwigDirector_SequenceVarLocalSearchOperator_HasFragments", "(Lcom/google/ortools/constraintsolver/SequenceVarLocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_SequenceVarLocalSearchOperator_HoldsDelta", "(Lcom/google/ortools/constraintsolver/SequenceVarLocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_SequenceVarLocalSearchOperator_isIncremental", "(Lcom/google/ortools/constraintsolver/SequenceVarLocalSearchOperator;)Z" 
    },
    {
      "SwigDirector_SequenceVarLocalSearchOperator_onStart", "(Lcom/google/ortools/constraintsolver/SequenceVarLocalSearchOperator;)V" 
    },
    {
      "SwigDirector_BaseLns_toString", "(Lcom/google/ortools/constraintsolver/BaseLns;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_BaseLns_reset", "(Lcom/google/ortools/constraintsolver/BaseLns;)V" 
    },
    {
      "SwigDirector_BaseLns_HasFragments", "(Lcom/google/ortools/constraintsolver/BaseLns;)Z" 
    },
    {
      "SwigDirector_BaseLns_HoldsDelta", "(Lcom/google/ortools/constraintsolver/BaseLns;)Z" 
    },
    {
      "SwigDirector_BaseLns_isIncremental", "(Lcom/google/ortools/constraintsolver/BaseLns;)Z" 
    },
    {
      "SwigDirector_BaseLns_initFragments", "(Lcom/google/ortools/constraintsolver/BaseLns;)V" 
    },
    {
      "SwigDirector_BaseLns_nextFragment", "(Lcom/google/ortools/constraintsolver/BaseLns;)Z" 
    },
    {
      "SwigDirector_ChangeValue_toString", "(Lcom/google/ortools/constraintsolver/ChangeValue;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ChangeValue_reset", "(Lcom/google/ortools/constraintsolver/ChangeValue;)V" 
    },
    {
      "SwigDirector_ChangeValue_HasFragments", "(Lcom/google/ortools/constraintsolver/ChangeValue;)Z" 
    },
    {
      "SwigDirector_ChangeValue_HoldsDelta", "(Lcom/google/ortools/constraintsolver/ChangeValue;)Z" 
    },
    {
      "SwigDirector_ChangeValue_isIncremental", "(Lcom/google/ortools/constraintsolver/ChangeValue;)Z" 
    },
    {
      "SwigDirector_ChangeValue_onStart", "(Lcom/google/ortools/constraintsolver/ChangeValue;)V" 
    },
    {
      "SwigDirector_ChangeValue_oneNeighbor", "(Lcom/google/ortools/constraintsolver/ChangeValue;)Z" 
    },
    {
      "SwigDirector_ChangeValue_modifyValue", "(Lcom/google/ortools/constraintsolver/ChangeValue;JJ)J" 
    },
    {
      "SwigDirector_PathOperator_toString", "(Lcom/google/ortools/constraintsolver/PathOperator;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_PathOperator_reset", "(Lcom/google/ortools/constraintsolver/PathOperator;)V" 
    },
    {
      "SwigDirector_PathOperator_HasFragments", "(Lcom/google/ortools/constraintsolver/PathOperator;)Z" 
    },
    {
      "SwigDirector_PathOperator_HoldsDelta", "(Lcom/google/ortools/constraintsolver/PathOperator;)Z" 
    },
    {
      "SwigDirector_PathOperator_isIncremental", "(Lcom/google/ortools/constraintsolver/PathOperator;)Z" 
    },
    {
      "SwigDirector_PathOperator_onStart", "(Lcom/google/ortools/constraintsolver/PathOperator;)V" 
    },
    {
      "SwigDirector_PathOperator_oneNeighbor", "(Lcom/google/ortools/constraintsolver/PathOperator;)Z" 
    },
    {
      "SwigDirector_PathOperator_neighbor", "(Lcom/google/ortools/constraintsolver/PathOperator;)Z" 
    },
    {
      "SwigDirector_PathOperator_OnNodeInitialization", "(Lcom/google/ortools/constraintsolver/PathOperator;)V" 
    },
    {
      "SwigDirector_PathOperator_restartAtPathStartOnSynchronize", "(Lcom/google/ortools/constraintsolver/PathOperator;)Z" 
    },
    {
      "SwigDirector_PathOperator_onSamePathAsPreviousBase", "(Lcom/google/ortools/constraintsolver/PathOperator;J)Z" 
    },
    {
      "SwigDirector_PathOperator_getBaseNodeRestartPosition", "(Lcom/google/ortools/constraintsolver/PathOperator;I)J" 
    },
    {
      "SwigDirector_PathOperator_setNextBaseToIncrement", "(Lcom/google/ortools/constraintsolver/PathOperator;J)V" 
    },
    {
      "SwigDirector_PathOperator_ConsiderAlternatives", "(Lcom/google/ortools/constraintsolver/PathOperator;J)Z" 
    },
    {
      "SwigDirector_PathOperator_initPosition", "(Lcom/google/ortools/constraintsolver/PathOperator;)Z" 
    },
    {
      "SwigDirector_LocalSearchFilter_toString", "(Lcom/google/ortools/constraintsolver/LocalSearchFilter;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_LocalSearchFilter_Relax", "(Lcom/google/ortools/constraintsolver/LocalSearchFilter;JJ)V" 
    },
    {
      "SwigDirector_LocalSearchFilter_accept", "(Lcom/google/ortools/constraintsolver/LocalSearchFilter;JJJJ)Z" 
    },
    {
      "SwigDirector_LocalSearchFilter_isIncremental", "(Lcom/google/ortools/constraintsolver/LocalSearchFilter;)Z" 
    },
    {
      "SwigDirector_LocalSearchFilter_synchronize", "(Lcom/google/ortools/constraintsolver/LocalSearchFilter;JJ)V" 
    },
    {
      "SwigDirector_LocalSearchFilter_Revert", "(Lcom/google/ortools/constraintsolver/LocalSearchFilter;)V" 
    },
    {
      "SwigDirector_LocalSearchFilter_getSynchronizedObjectiveValue", "(Lcom/google/ortools/constraintsolver/LocalSearchFilter;)J" 
    },
    {
      "SwigDirector_LocalSearchFilter_getAcceptedObjectiveValue", "(Lcom/google/ortools/constraintsolver/LocalSearchFilter;)J" 
    },
    {
      "SwigDirector_IntVarLocalSearchFilter_toString", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchFilter;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_IntVarLocalSearchFilter_Relax", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchFilter;JJ)V" 
    },
    {
      "SwigDirector_IntVarLocalSearchFilter_accept", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchFilter;JJJJ)Z" 
    },
    {
      "SwigDirector_IntVarLocalSearchFilter_isIncremental", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchFilter;)Z" 
    },
    {
      "SwigDirector_IntVarLocalSearchFilter_Revert", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchFilter;)V" 
    },
    {
      "SwigDirector_IntVarLocalSearchFilter_getSynchronizedObjectiveValue", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchFilter;)J" 
    },
    {
      "SwigDirector_IntVarLocalSearchFilter_getAcceptedObjectiveValue", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchFilter;)J" 
    },
    {
      "SwigDirector_IntVarLocalSearchFilter_onSynchronize", "(Lcom/google/ortools/constraintsolver/IntVarLocalSearchFilter;J)V" 
    },
    {
      "SwigDirector_SymmetryBreaker_toString", "(Lcom/google/ortools/constraintsolver/SymmetryBreaker;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_SymmetryBreaker_visitSetVariableValue", "(Lcom/google/ortools/constraintsolver/SymmetryBreaker;JJ)V" 
    },
    {
      "SwigDirector_SymmetryBreaker_visitSplitVariableDomain", "(Lcom/google/ortools/constraintsolver/SymmetryBreaker;JJZ)V" 
    },
    {
      "SwigDirector_SymmetryBreaker_visitScheduleOrPostpone", "(Lcom/google/ortools/constraintsolver/SymmetryBreaker;JJ)V" 
    },
    {
      "SwigDirector_SymmetryBreaker_visitScheduleOrExpedite", "(Lcom/google/ortools/constraintsolver/SymmetryBreaker;JJ)V" 
    },
    {
      "SwigDirector_SymmetryBreaker_visitRankFirstInterval", "(Lcom/google/ortools/constraintsolver/SymmetryBreaker;JI)V" 
    },
    {
      "SwigDirector_SymmetryBreaker_visitRankLastInterval", "(Lcom/google/ortools/constraintsolver/SymmetryBreaker;JI)V" 
    },
    {
      "SwigDirector_SymmetryBreaker_visitUnknownDecision", "(Lcom/google/ortools/constraintsolver/SymmetryBreaker;)V" 
    }
  };
  Swig::jclass_mainJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_mainJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

