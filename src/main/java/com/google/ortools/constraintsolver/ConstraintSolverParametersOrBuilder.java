// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/solver_parameters.proto

package com.google.ortools.constraintsolver;

public interface ConstraintSolverParametersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:operations_research.ConstraintSolverParameters)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * This parameter indicates if the solver should compress the trail
   * during the search. No compression means that the solver will be faster,
   * but will use more memory.
   * </pre>
   *
   * <code>.operations_research.ConstraintSolverParameters.TrailCompression compress_trail = 1;</code>
   * @return The enum numeric value on the wire for compressTrail.
   */
  int getCompressTrailValue();
  /**
   * <pre>
   * This parameter indicates if the solver should compress the trail
   * during the search. No compression means that the solver will be faster,
   * but will use more memory.
   * </pre>
   *
   * <code>.operations_research.ConstraintSolverParameters.TrailCompression compress_trail = 1;</code>
   * @return The compressTrail.
   */
  com.google.ortools.constraintsolver.ConstraintSolverParameters.TrailCompression getCompressTrail();

  /**
   * <pre>
   * This parameter indicates the default size of a block of the trail.
   * Compression applies at the block level.
   * </pre>
   *
   * <code>int32 trail_block_size = 2;</code>
   * @return The trailBlockSize.
   */
  int getTrailBlockSize();

  /**
   * <pre>
   * When a sum/min/max operation is applied on a large array, this
   * array is recursively split into blocks of size 'array_split_size'.
   * </pre>
   *
   * <code>int32 array_split_size = 3;</code>
   * @return The arraySplitSize.
   */
  int getArraySplitSize();

  /**
   * <pre>
   * This parameters indicates if the solver should store the names of
   * the objets it manages.
   * </pre>
   *
   * <code>bool store_names = 4;</code>
   * @return The storeNames.
   */
  boolean getStoreNames();

  /**
   * <pre>
   * Create names for cast variables.
   * </pre>
   *
   * <code>bool name_cast_variables = 5;</code>
   * @return The nameCastVariables.
   */
  boolean getNameCastVariables();

  /**
   * <pre>
   * Should anonymous variables be given a name.
   * </pre>
   *
   * <code>bool name_all_variables = 6;</code>
   * @return The nameAllVariables.
   */
  boolean getNameAllVariables();

  /**
   * <pre>
   * Activate propagation profiling.
   * </pre>
   *
   * <code>bool profile_propagation = 7;</code>
   * @return The profilePropagation.
   */
  boolean getProfilePropagation();

  /**
   * <pre>
   * Export propagation profiling data to file.
   * </pre>
   *
   * <code>string profile_file = 8;</code>
   * @return The profileFile.
   */
  java.lang.String getProfileFile();
  /**
   * <pre>
   * Export propagation profiling data to file.
   * </pre>
   *
   * <code>string profile_file = 8;</code>
   * @return The bytes for profileFile.
   */
  com.google.protobuf.ByteString
      getProfileFileBytes();

  /**
   * <pre>
   * Activate local search profiling.
   * </pre>
   *
   * <code>bool profile_local_search = 16;</code>
   * @return The profileLocalSearch.
   */
  boolean getProfileLocalSearch();

  /**
   * <pre>
   * Print local search profiling data after solving.
   * </pre>
   *
   * <code>bool print_local_search_profile = 17;</code>
   * @return The printLocalSearchProfile.
   */
  boolean getPrintLocalSearchProfile();

  /**
   * <pre>
   * Activate propagate tracing.
   * </pre>
   *
   * <code>bool trace_propagation = 9;</code>
   * @return The tracePropagation.
   */
  boolean getTracePropagation();

  /**
   * <pre>
   * Trace search.
   * </pre>
   *
   * <code>bool trace_search = 10;</code>
   * @return The traceSearch.
   */
  boolean getTraceSearch();

  /**
   * <pre>
   * Print the model before solving.
   * </pre>
   *
   * <code>bool print_model = 11;</code>
   * @return The printModel.
   */
  boolean getPrintModel();

  /**
   * <pre>
   * Print model statistics before solving.
   * </pre>
   *
   * <code>bool print_model_stats = 12;</code>
   * @return The printModelStats.
   */
  boolean getPrintModelStats();

  /**
   * <pre>
   * Print added constraints.
   * </pre>
   *
   * <code>bool print_added_constraints = 13;</code>
   * @return The printAddedConstraints.
   */
  boolean getPrintAddedConstraints();

  /**
   * <code>bool disable_solve = 15;</code>
   * @return The disableSolve.
   */
  boolean getDisableSolve();

  /**
   * <pre>
   * Control the implementation of the table constraint.
   * </pre>
   *
   * <code>bool use_small_table = 101;</code>
   * @return The useSmallTable.
   */
  boolean getUseSmallTable();

  /**
   * <pre>
   * Control the propagation of the cumulative constraint.
   * </pre>
   *
   * <code>bool use_cumulative_edge_finder = 105;</code>
   * @return The useCumulativeEdgeFinder.
   */
  boolean getUseCumulativeEdgeFinder();

  /**
   * <code>bool use_cumulative_time_table = 106;</code>
   * @return The useCumulativeTimeTable.
   */
  boolean getUseCumulativeTimeTable();

  /**
   * <code>bool use_cumulative_time_table_sync = 112;</code>
   * @return The useCumulativeTimeTableSync.
   */
  boolean getUseCumulativeTimeTableSync();

  /**
   * <code>bool use_sequence_high_demand_tasks = 107;</code>
   * @return The useSequenceHighDemandTasks.
   */
  boolean getUseSequenceHighDemandTasks();

  /**
   * <code>bool use_all_possible_disjunctions = 108;</code>
   * @return The useAllPossibleDisjunctions.
   */
  boolean getUseAllPossibleDisjunctions();

  /**
   * <code>int32 max_edge_finder_size = 109;</code>
   * @return The maxEdgeFinderSize.
   */
  int getMaxEdgeFinderSize();

  /**
   * <pre>
   * Control the propagation of the diffn constraint.
   * </pre>
   *
   * <code>bool diffn_use_cumulative = 110;</code>
   * @return The diffnUseCumulative.
   */
  boolean getDiffnUseCumulative();

  /**
   * <pre>
   * Control the implementation of the element constraint.
   * </pre>
   *
   * <code>bool use_element_rmq = 111;</code>
   * @return The useElementRmq.
   */
  boolean getUseElementRmq();

  /**
   * <pre>
   * Skip locally optimal pairs of paths in PathOperators. Setting this
   * parameter to true might skip valid neighbors if there are constraints
   * linking paths together (such as precedences). In any other case this
   * should only speed up the search without omitting any neighbors.
   * </pre>
   *
   * <code>bool skip_locally_optimal_paths = 113;</code>
   * @return The skipLocallyOptimalPaths.
   */
  boolean getSkipLocallyOptimalPaths();

  /**
   * <pre>
   * Control the behavior of local search.
   * </pre>
   *
   * <code>int32 check_solution_period = 114;</code>
   * @return The checkSolutionPeriod.
   */
  int getCheckSolutionPeriod();
}
