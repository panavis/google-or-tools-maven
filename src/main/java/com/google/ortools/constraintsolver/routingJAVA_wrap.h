/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_main_WRAP_H_
#define SWIG_main_WRAP_H_

class SwigDirector_Decision : public operations_research::Decision, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Decision(JNIEnv *jenv);
    virtual ~SwigDirector_Decision();
    virtual std::string DebugString() const;
    virtual void Apply(operations_research::Solver *const s);
    virtual void Refute(operations_research::Solver *const s);
    virtual void Accept(operations_research::DecisionVisitor *const visitor) const;
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_DecisionVisitor : public operations_research::DecisionVisitor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_DecisionVisitor(JNIEnv *jenv);
    virtual ~SwigDirector_DecisionVisitor();
    virtual std::string DebugString() const;
    virtual void VisitSetVariableValue(operations_research::IntVar *const var, int64 value);
    virtual void VisitSplitVariableDomain(operations_research::IntVar *const var, int64 value, bool start_with_lower_half);
    virtual void VisitScheduleOrPostpone(operations_research::IntervalVar *const var, int64 est);
    virtual void VisitScheduleOrExpedite(operations_research::IntervalVar *const var, int64 est);
    virtual void VisitRankFirstInterval(operations_research::SequenceVar *const sequence, int index);
    virtual void VisitRankLastInterval(operations_research::SequenceVar *const sequence, int index);
    virtual void VisitUnknownDecision();
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<8> swig_override;
};

class SwigDirector_DecisionBuilder : public operations_research::DecisionBuilder, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_DecisionBuilder(JNIEnv *jenv);
    virtual ~SwigDirector_DecisionBuilder();
    virtual std::string DebugString() const;
    virtual operations_research::Decision *Next(operations_research::Solver *const s);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_SearchMonitor : public operations_research::SearchMonitor, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_SearchMonitor(JNIEnv *jenv, operations_research::Solver *const s);
    virtual ~SwigDirector_SearchMonitor();
    virtual std::string DebugString() const;
    virtual void EnterSearch();
    virtual void RestartSearch();
    virtual void ExitSearch();
    virtual void BeginNextDecision(operations_research::DecisionBuilder *const b);
    virtual void EndNextDecision(operations_research::DecisionBuilder *const b, operations_research::Decision *const d);
    virtual void ApplyDecision(operations_research::Decision *const d);
    virtual void RefuteDecision(operations_research::Decision *const d);
    virtual void AfterDecision(operations_research::Decision *const d, bool apply);
    virtual void BeginFail();
    virtual void EndFail();
    virtual void BeginInitialPropagation();
    virtual void EndInitialPropagation();
    virtual bool AcceptSolution();
    virtual bool AtSolution();
    virtual void NoMoreSolutions();
    virtual bool LocalOptimum();
    virtual bool AcceptDelta(operations_research::Assignment *delta, operations_research::Assignment *deltadelta);
    virtual void AcceptNeighbor();
    virtual void AcceptUncheckedNeighbor();
    virtual bool IsUncheckedSolutionLimitReached();
    virtual void PeriodicCheck();
    virtual int ProgressPercent();
    virtual void Accept(operations_research::ModelVisitor *const visitor) const;
    virtual void Install();
public:
    bool swig_overrides(int n) {
      return (n < 25 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<25> swig_override;
};

class SwigDirector_LocalSearchOperator : public operations_research::LocalSearchOperator, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_LocalSearchOperator(JNIEnv *jenv);
    virtual ~SwigDirector_LocalSearchOperator();
    virtual std::string DebugString() const;
    virtual bool MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta);
    virtual void Start(operations_research::Assignment const *assignment);
    virtual void Reset();
    virtual bool HasFragments() const;
    virtual bool HoldsDelta() const;
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<6> swig_override;
};

class SwigDirector_IntVarLocalSearchOperator : public operations_research::IntVarLocalSearchOperator, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_IntVarLocalSearchOperator(JNIEnv *jenv);
    SwigDirector_IntVarLocalSearchOperator(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &vars, bool keep_inverse_values = false);
    virtual ~SwigDirector_IntVarLocalSearchOperator();
    virtual std::string DebugString() const;
    virtual bool MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta);
    virtual void Start(operations_research::Assignment const *assignment);
    virtual void Reset();
    virtual bool HasFragments() const;
    virtual bool HoldsDelta() const;
    virtual bool IsIncremental() const;
    virtual bool SkipUnchanged(int index) const;
    virtual void OnStart();
    virtual bool MakeOneNeighbor();
    virtual bool MakeOneNeighborSwigPublic() {
      return operations_research::IntVarLocalSearchOperator::MakeOneNeighbor();
    }
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<7> swig_override;
};

class SwigDirector_SequenceVarLocalSearchOperator : public operations_research::SequenceVarLocalSearchOperator, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_SequenceVarLocalSearchOperator(JNIEnv *jenv);
    SwigDirector_SequenceVarLocalSearchOperator(JNIEnv *jenv, std::vector< operations_research::SequenceVar * > const &vars);
    virtual ~SwigDirector_SequenceVarLocalSearchOperator();
    virtual std::string DebugString() const;
    virtual bool MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta);
    virtual void Start(operations_research::Assignment const *assignment);
    virtual void Reset();
    virtual bool HasFragments() const;
    virtual bool HoldsDelta() const;
    virtual bool IsIncremental() const;
    virtual bool SkipUnchanged(int index) const;
    virtual void OnStart();
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<7> swig_override;
};

class SwigDirector_BaseLns : public operations_research::BaseLns, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BaseLns(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &vars);
    virtual ~SwigDirector_BaseLns();
    virtual std::string DebugString() const;
    virtual bool MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta);
    virtual void Start(operations_research::Assignment const *assignment);
    virtual void Reset();
    virtual bool HasFragments() const;
    virtual bool HoldsDelta() const;
    virtual bool IsIncremental() const;
    virtual void InitFragments();
    virtual bool NextFragment();
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<7> swig_override;
};

class SwigDirector_ChangeValue : public operations_research::ChangeValue, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ChangeValue(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &vars);
    virtual ~SwigDirector_ChangeValue();
    virtual std::string DebugString() const;
    virtual bool MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta);
    virtual void Start(operations_research::Assignment const *assignment);
    virtual void Reset();
    virtual bool HasFragments() const;
    virtual bool HoldsDelta() const;
    virtual bool IsIncremental() const;
    virtual bool SkipUnchanged(int index) const;
    virtual void OnStart();
    virtual bool MakeOneNeighbor();
    virtual bool MakeOneNeighborSwigPublic() {
      return operations_research::ChangeValue::MakeOneNeighbor();
    }
    virtual int64 ModifyValue(int64 index, int64 value);
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<8> swig_override;
};

class SwigDirector_PathOperator : public operations_research::PathOperator, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_PathOperator(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &next_vars, std::vector< operations_research::IntVar * > const &path_vars, int number_of_base_nodes, bool skip_locally_optimal_paths, bool accept_path_end_base, std::function< int (int64) > start_empty_path_class);
    virtual ~SwigDirector_PathOperator();
    virtual std::string DebugString() const;
    virtual bool MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta);
    virtual void Start(operations_research::Assignment const *assignment);
    virtual void Reset();
    virtual bool HasFragments() const;
    virtual bool HoldsDelta() const;
    virtual bool IsIncremental() const;
    virtual bool SkipUnchanged(int index) const;
    virtual void OnStart();
    virtual bool MakeOneNeighbor();
    virtual bool MakeOneNeighborSwigPublic() {
      return operations_research::PathOperator::MakeOneNeighbor();
    }
    virtual bool MakeNeighbor();
    virtual void OnNodeInitialization();
    virtual void OnNodeInitializationSwigPublic() {
      operations_research::PathOperator::OnNodeInitialization();
    }
    virtual bool RestartAtPathStartOnSynchronize();
    virtual bool RestartAtPathStartOnSynchronizeSwigPublic() {
      return operations_research::PathOperator::RestartAtPathStartOnSynchronize();
    }
    virtual bool OnSamePathAsPreviousBase(int64 base_index);
    virtual bool OnSamePathAsPreviousBaseSwigPublic(int64 base_index) {
      return operations_research::PathOperator::OnSamePathAsPreviousBase(base_index);
    }
    virtual int64 GetBaseNodeRestartPosition(int base_index);
    virtual int64 GetBaseNodeRestartPositionSwigPublic(int base_index) {
      return operations_research::PathOperator::GetBaseNodeRestartPosition(base_index);
    }
    virtual void SetNextBaseToIncrement(int64 base_index);
    virtual void SetNextBaseToIncrementSwigPublic(int64 base_index) {
      operations_research::PathOperator::SetNextBaseToIncrement(base_index);
    }
    virtual bool ConsiderAlternatives(int64 base_index) const;
    virtual bool ConsiderAlternativesSwigPublic(int64 base_index) const {
      return operations_research::PathOperator::ConsiderAlternatives(base_index);
    }
    virtual bool InitPosition() const;
    virtual bool InitPositionSwigPublic() const {
      return operations_research::PathOperator::InitPosition();
    }
public:
    bool swig_overrides(int n) {
      return (n < 15 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<15> swig_override;
};

class SwigDirector_LocalSearchFilter : public operations_research::LocalSearchFilter, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_LocalSearchFilter(JNIEnv *jenv);
    virtual ~SwigDirector_LocalSearchFilter();
    virtual std::string DebugString() const;
    virtual void Relax(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta);
    virtual bool Accept(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta, int64 objective_min, int64 objective_max);
    virtual bool IsIncremental() const;
    virtual void Synchronize(operations_research::Assignment const *assignment, operations_research::Assignment const *delta);
    virtual void Revert();
    virtual int64 GetSynchronizedObjectiveValue() const;
    virtual int64 GetAcceptedObjectiveValue() const;
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<8> swig_override;
};

class SwigDirector_IntVarLocalSearchFilter : public operations_research::IntVarLocalSearchFilter, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_IntVarLocalSearchFilter(JNIEnv *jenv, std::vector< operations_research::IntVar * > const &vars);
    virtual ~SwigDirector_IntVarLocalSearchFilter();
    virtual std::string DebugString() const;
    virtual void Relax(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta);
    virtual bool Accept(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta, int64 objective_min, int64 objective_max);
    virtual bool IsIncremental() const;
    virtual void Revert();
    virtual int64 GetSynchronizedObjectiveValue() const;
    virtual int64 GetAcceptedObjectiveValue() const;
    virtual void OnSynchronize(operations_research::Assignment const *delta);
    virtual void OnSynchronizeSwigPublic(operations_research::Assignment const *delta) {
      operations_research::IntVarLocalSearchFilter::OnSynchronize(delta);
    }
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<8> swig_override;
};

class SwigDirector_SymmetryBreaker : public operations_research::SymmetryBreaker, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_SymmetryBreaker(JNIEnv *jenv);
    virtual ~SwigDirector_SymmetryBreaker();
    virtual std::string DebugString() const;
    virtual void VisitSetVariableValue(operations_research::IntVar *const var, int64 value);
    virtual void VisitSplitVariableDomain(operations_research::IntVar *const var, int64 value, bool start_with_lower_half);
    virtual void VisitScheduleOrPostpone(operations_research::IntervalVar *const var, int64 est);
    virtual void VisitScheduleOrExpedite(operations_research::IntervalVar *const var, int64 est);
    virtual void VisitRankFirstInterval(operations_research::SequenceVar *const sequence, int index);
    virtual void VisitRankLastInterval(operations_research::SequenceVar *const sequence, int index);
    virtual void VisitUnknownDecision();
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<8> swig_override;
};


#endif
